# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
The `modshogun` module gathers all modules available in the SHOGUN toolkit.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_modshogun', [dirname(__file__)])
        except ImportError:
            import _modshogun
            return _modshogun
        if fp is not None:
            try:
                _mod = imp.load_module('_modshogun', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _modshogun = swig_import_helper()
    del swig_import_helper
else:
    import _modshogun
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


STRING_LEN = _modshogun.STRING_LEN
STRING_LEN_STR = _modshogun.STRING_LEN_STR

def init_shogun(print_message=None, print_warning=None, print_error=None, cancel_computations=None):
  """
    init_shogun(print_message=None, print_warning=None, print_error=None, cancel_computations=None)
    init_shogun(print_message=None, print_warning=None, print_error=None)
    init_shogun(print_message=None, print_warning=None)
    init_shogun(print_message=None)
    init_shogun()
    """
  return _modshogun.init_shogun(print_message, print_warning, print_error, cancel_computations)

def init_shogun_with_defaults():
  """init_shogun_with_defaults()"""
  return _modshogun.init_shogun_with_defaults()

def exit_shogun():
  """exit_shogun()"""
  return _modshogun.exit_shogun()

def set_global_io(*args):
  """set_global_io(io)"""
  return _modshogun.set_global_io(*args)

def get_global_io():
  """get_global_io() -> SGIO"""
  return _modshogun.get_global_io()

def set_global_parallel(*args):
  """set_global_parallel(parallel)"""
  return _modshogun.set_global_parallel(*args)

def get_global_parallel():
  """get_global_parallel() -> Parallel"""
  return _modshogun.get_global_parallel()

def set_global_version(*args):
  """set_global_version(version)"""
  return _modshogun.set_global_version(*args)

def get_global_version():
  """get_global_version() -> Version"""
  return _modshogun.get_global_version()

def set_global_math(*args):
  """set_global_math(math)"""
  return _modshogun.set_global_math(*args)

def get_global_math():
  """get_global_math() -> Math"""
  return _modshogun.get_global_math()
MSG_GCDEBUG = _modshogun.MSG_GCDEBUG
MSG_DEBUG = _modshogun.MSG_DEBUG
MSG_INFO = _modshogun.MSG_INFO
MSG_NOTICE = _modshogun.MSG_NOTICE
MSG_WARN = _modshogun.MSG_WARN
MSG_ERROR = _modshogun.MSG_ERROR
MSG_CRITICAL = _modshogun.MSG_CRITICAL
MSG_ALERT = _modshogun.MSG_ALERT
MSG_EMERGENCY = _modshogun.MSG_EMERGENCY
MSG_MESSAGEONLY = _modshogun.MSG_MESSAGEONLY
class SGIO(_object):
    """Proxy of C++ shogun::SGIO class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGIO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGIO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SGIO
        __init__(self, orig) -> SGIO
        """
        this = _modshogun.new_SGIO(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_loglevel(self, *args):
        """set_loglevel(self, level)"""
        return _modshogun.SGIO_set_loglevel(self, *args)

    def get_loglevel(self):
        """get_loglevel(self) -> shogun::EMessageType"""
        return _modshogun.SGIO_get_loglevel(self)

    def get_show_progress(self):
        """get_show_progress(self) -> bool"""
        return _modshogun.SGIO_get_show_progress(self)

    def get_show_file_and_line(self):
        """get_show_file_and_line(self) -> bool"""
        return _modshogun.SGIO_get_show_file_and_line(self)

    def get_syntax_highlight(self):
        """get_syntax_highlight(self) -> bool"""
        return _modshogun.SGIO_get_syntax_highlight(self)

    def message(self, *args):
        """message(self, prio, file, line, fmt)"""
        return _modshogun.SGIO_message(self, *args)

    def progress(self, *args):
        """
        progress(self, current_val, min_val=0.0, max_val=1.0, decimals=1, prefix="PROGRESS:\t")
        progress(self, current_val, min_val=0.0, max_val=1.0, decimals=1)
        progress(self, current_val, min_val=0.0, max_val=1.0)
        progress(self, current_val, min_val=0.0)
        progress(self, current_val)
        """
        return _modshogun.SGIO_progress(self, *args)

    def absolute_progress(self, *args):
        """
        absolute_progress(self, current_val, val, min_val=0.0, max_val=1.0, decimals=1, prefix="PROGRESS:\t")
        absolute_progress(self, current_val, val, min_val=0.0, max_val=1.0, decimals=1)
        absolute_progress(self, current_val, val, min_val=0.0, max_val=1.0)
        absolute_progress(self, current_val, val, min_val=0.0)
        absolute_progress(self, current_val, val)
        """
        return _modshogun.SGIO_absolute_progress(self, *args)

    def done(self):
        """done(self)"""
        return _modshogun.SGIO_done(self)

    def not_implemented(self, *args):
        """not_implemented(self, file, line)"""
        return _modshogun.SGIO_not_implemented(self, *args)

    def deprecated(self, *args):
        """deprecated(self, file, line)"""
        return _modshogun.SGIO_deprecated(self, *args)

    def buffered_message(self, *args):
        """buffered_message(self, prio, fmt)"""
        return _modshogun.SGIO_buffered_message(self, *args)

    def skip_spaces(*args):
        """skip_spaces(str) -> str *"""
        return _modshogun.SGIO_skip_spaces(*args)

    if _newclass:skip_spaces = staticmethod(skip_spaces)
    __swig_getmethods__["skip_spaces"] = lambda x: skip_spaces
    def skip_blanks(*args):
        """skip_blanks(str) -> str *"""
        return _modshogun.SGIO_skip_blanks(*args)

    if _newclass:skip_blanks = staticmethod(skip_blanks)
    __swig_getmethods__["skip_blanks"] = lambda x: skip_blanks
    def get_target(self):
        """get_target(self) -> FILE *"""
        return _modshogun.SGIO_get_target(self)

    def set_target(self, *args):
        """set_target(self, target)"""
        return _modshogun.SGIO_set_target(self, *args)

    def set_target_to_stderr(self):
        """set_target_to_stderr(self)"""
        return _modshogun.SGIO_set_target_to_stderr(self)

    def set_target_to_stdout(self):
        """set_target_to_stdout(self)"""
        return _modshogun.SGIO_set_target_to_stdout(self)

    def enable_progress(self):
        """enable_progress(self)"""
        return _modshogun.SGIO_enable_progress(self)

    def disable_progress(self):
        """disable_progress(self)"""
        return _modshogun.SGIO_disable_progress(self)

    def enable_file_and_line(self):
        """enable_file_and_line(self)"""
        return _modshogun.SGIO_enable_file_and_line(self)

    def disable_file_and_line(self):
        """disable_file_and_line(self)"""
        return _modshogun.SGIO_disable_file_and_line(self)

    def enable_syntax_highlighting(self):
        """enable_syntax_highlighting(self)"""
        return _modshogun.SGIO_enable_syntax_highlighting(self)

    def disable_syntax_highlighting(self):
        """disable_syntax_highlighting(self)"""
        return _modshogun.SGIO_disable_syntax_highlighting(self)

    def set_dirname(*args):
        """set_dirname(dirname)"""
        return _modshogun.SGIO_set_dirname(*args)

    if _newclass:set_dirname = staticmethod(set_dirname)
    __swig_getmethods__["set_dirname"] = lambda x: set_dirname
    def concat_filename(*args):
        """concat_filename(filename) -> str *"""
        return _modshogun.SGIO_concat_filename(*args)

    if _newclass:concat_filename = staticmethod(concat_filename)
    __swig_getmethods__["concat_filename"] = lambda x: concat_filename
    def filter(*args):
        """filter(d) -> int"""
        return _modshogun.SGIO_filter(*args)

    if _newclass:filter = staticmethod(filter)
    __swig_getmethods__["filter"] = lambda x: filter
    def ref_count(self):
        """ref_count(self) ->  int"""
        return _modshogun.SGIO_ref_count(self)

    def get_name(self):
        """get_name(self) -> str const *"""
        return _modshogun.SGIO_get_name(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.SGIO_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.SGIO_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_SGIO
    __del__ = lambda self : None;
SGIO_swigregister = _modshogun.SGIO_swigregister
SGIO_swigregister(SGIO)
cvar = _modshogun.cvar

def SGIO_skip_spaces(*args):
  """SGIO_skip_spaces(str) -> str *"""
  return _modshogun.SGIO_skip_spaces(*args)

def SGIO_skip_blanks(*args):
  """SGIO_skip_blanks(str) -> str *"""
  return _modshogun.SGIO_skip_blanks(*args)

def SGIO_set_dirname(*args):
  """SGIO_set_dirname(dirname)"""
  return _modshogun.SGIO_set_dirname(*args)

def SGIO_concat_filename(*args):
  """SGIO_concat_filename(filename) -> str *"""
  return _modshogun.SGIO_concat_filename(*args)

def SGIO_filter(*args):
  """SGIO_filter(d) -> int"""
  return _modshogun.SGIO_filter(*args)


def c_string_of_substring(*args):
  """c_string_of_substring(s) -> str *"""
  return _modshogun.c_string_of_substring(*args)

def print_substring(*args):
  """print_substring(s)"""
  return _modshogun.print_substring(*args)

def float_of_substring(*args):
  """float_of_substring(s) -> float"""
  return _modshogun.float_of_substring(*args)

def float_of_substring(*args):
  """double_of_substring(s) -> float"""
  return _modshogun.double_of_substring(*args)

def int_of_substring(*args):
  """int_of_substring(s) ->  int"""
  return _modshogun.int_of_substring(*args)

def ulong_of_substring(*args):
  """ulong_of_substring(s) -> int"""
  return _modshogun.ulong_of_substring(*args)

def ss_length(*args):
  """ss_length(s) -> int"""
  return _modshogun.ss_length(*args)
MS_NOT_AVAILABLE = _modshogun.MS_NOT_AVAILABLE
MS_AVAILABLE = _modshogun.MS_AVAILABLE
class SGObject(_object):
    """Proxy of C++ shogun::CSGObject class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SGObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SGObject
    __del__ = lambda self : None;
    def ref_count(self):
        """ref_count(self) ->  int"""
        return _modshogun.SGObject_ref_count(self)

    def get_name(self):
        """get_name(self) -> str const *"""
        return _modshogun.SGObject_get_name(self)

    def is_generic(self, *args):
        """is_generic(self, generic) -> bool"""
        return _modshogun.SGObject_is_generic(self, *args)

    def unset_generic(self):
        """unset_generic(self)"""
        return _modshogun.SGObject_unset_generic(self)

    def print_serializable(self, prefix=""):
        """
        print_serializable(self, prefix="")
        print_serializable(self)
        """
        return _modshogun.SGObject_print_serializable(self, prefix)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.SGObject_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.SGObject_load_serializable(self, *args)

    def set_global_io(self, *args):
        """set_global_io(self, io)"""
        return _modshogun.SGObject_set_global_io(self, *args)

    def get_global_io(self):
        """get_global_io(self) -> SGIO"""
        return _modshogun.SGObject_get_global_io(self)

    def set_global_parallel(self, *args):
        """set_global_parallel(self, parallel)"""
        return _modshogun.SGObject_set_global_parallel(self, *args)

    def get_global_parallel(self):
        """get_global_parallel(self) -> Parallel"""
        return _modshogun.SGObject_get_global_parallel(self)

    def set_global_version(self, *args):
        """set_global_version(self, version)"""
        return _modshogun.SGObject_set_global_version(self, *args)

    def get_global_version(self):
        """get_global_version(self) -> Version"""
        return _modshogun.SGObject_get_global_version(self)

    def get_modelsel_names(self):
        """get_modelsel_names(self) -> SGVector< str * >"""
        return _modshogun.SGObject_get_modelsel_names(self)

    def get_modsel_param_descr(self, *args):
        """get_modsel_param_descr(self, param_name) -> str *"""
        return _modshogun.SGObject_get_modsel_param_descr(self, *args)

    def get_modsel_param_index(self, *args):
        """get_modsel_param_index(self, param_name) -> index_t"""
        return _modshogun.SGObject_get_modsel_param_index(self, *args)

    __swig_setmethods__["io"] = _modshogun.SGObject_io_set
    __swig_getmethods__["io"] = _modshogun.SGObject_io_get
    if _newclass:io = _swig_property(_modshogun.SGObject_io_get, _modshogun.SGObject_io_set)
    __swig_setmethods__["parallel"] = _modshogun.SGObject_parallel_set
    __swig_getmethods__["parallel"] = _modshogun.SGObject_parallel_get
    if _newclass:parallel = _swig_property(_modshogun.SGObject_parallel_get, _modshogun.SGObject_parallel_set)
    __swig_setmethods__["version"] = _modshogun.SGObject_version_set
    __swig_getmethods__["version"] = _modshogun.SGObject_version_get
    if _newclass:version = _swig_property(_modshogun.SGObject_version_get, _modshogun.SGObject_version_set)
    __swig_setmethods__["m_parameters"] = _modshogun.SGObject_m_parameters_set
    __swig_getmethods__["m_parameters"] = _modshogun.SGObject_m_parameters_get
    if _newclass:m_parameters = _swig_property(_modshogun.SGObject_m_parameters_get, _modshogun.SGObject_m_parameters_set)
    __swig_setmethods__["m_model_selection_parameters"] = _modshogun.SGObject_m_model_selection_parameters_set
    __swig_getmethods__["m_model_selection_parameters"] = _modshogun.SGObject_m_model_selection_parameters_get
    if _newclass:m_model_selection_parameters = _swig_property(_modshogun.SGObject_m_model_selection_parameters_get, _modshogun.SGObject_m_model_selection_parameters_set)
SGObject_swigregister = _modshogun.SGObject_swigregister
SGObject_swigregister(SGObject)

class Version(_object):
    """Proxy of C++ shogun::Version class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Version"""
        this = _modshogun.new_Version()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Version
    __del__ = lambda self : None;
    def print_version():
        """print_version()"""
        return _modshogun.Version_print_version()

    if _newclass:print_version = staticmethod(print_version)
    __swig_getmethods__["print_version"] = lambda x: print_version
    def get_version_extra():
        """get_version_extra() -> str const *"""
        return _modshogun.Version_get_version_extra()

    if _newclass:get_version_extra = staticmethod(get_version_extra)
    __swig_getmethods__["get_version_extra"] = lambda x: get_version_extra
    def get_version_release():
        """get_version_release() -> str const *"""
        return _modshogun.Version_get_version_release()

    if _newclass:get_version_release = staticmethod(get_version_release)
    __swig_getmethods__["get_version_release"] = lambda x: get_version_release
    def get_version_revision():
        """get_version_revision() ->  int"""
        return _modshogun.Version_get_version_revision()

    if _newclass:get_version_revision = staticmethod(get_version_revision)
    __swig_getmethods__["get_version_revision"] = lambda x: get_version_revision
    def get_version_year():
        """get_version_year() ->  int"""
        return _modshogun.Version_get_version_year()

    if _newclass:get_version_year = staticmethod(get_version_year)
    __swig_getmethods__["get_version_year"] = lambda x: get_version_year
    def get_version_month():
        """get_version_month() ->  int"""
        return _modshogun.Version_get_version_month()

    if _newclass:get_version_month = staticmethod(get_version_month)
    __swig_getmethods__["get_version_month"] = lambda x: get_version_month
    def get_version_day():
        """get_version_day() ->  int"""
        return _modshogun.Version_get_version_day()

    if _newclass:get_version_day = staticmethod(get_version_day)
    __swig_getmethods__["get_version_day"] = lambda x: get_version_day
    def get_version_hour():
        """get_version_hour() ->  int"""
        return _modshogun.Version_get_version_hour()

    if _newclass:get_version_hour = staticmethod(get_version_hour)
    __swig_getmethods__["get_version_hour"] = lambda x: get_version_hour
    def get_version_minute():
        """get_version_minute() ->  int"""
        return _modshogun.Version_get_version_minute()

    if _newclass:get_version_minute = staticmethod(get_version_minute)
    __swig_getmethods__["get_version_minute"] = lambda x: get_version_minute
    def get_version_parameter():
        """get_version_parameter() ->  int"""
        return _modshogun.Version_get_version_parameter()

    if _newclass:get_version_parameter = staticmethod(get_version_parameter)
    __swig_getmethods__["get_version_parameter"] = lambda x: get_version_parameter
    def get_version_in_minutes():
        """get_version_in_minutes() -> int"""
        return _modshogun.Version_get_version_in_minutes()

    if _newclass:get_version_in_minutes = staticmethod(get_version_in_minutes)
    __swig_getmethods__["get_version_in_minutes"] = lambda x: get_version_in_minutes
    def ref_count(self):
        """ref_count(self) ->  int"""
        return _modshogun.Version_ref_count(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.Version_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.Version_load_serializable(self, *args)

Version_swigregister = _modshogun.Version_swigregister
Version_swigregister(Version)

def Version_print_version():
  """Version_print_version()"""
  return _modshogun.Version_print_version()

def Version_get_version_extra():
  """Version_get_version_extra() -> str const *"""
  return _modshogun.Version_get_version_extra()

def Version_get_version_release():
  """Version_get_version_release() -> str const *"""
  return _modshogun.Version_get_version_release()

def Version_get_version_revision():
  """Version_get_version_revision() ->  int"""
  return _modshogun.Version_get_version_revision()

def Version_get_version_year():
  """Version_get_version_year() ->  int"""
  return _modshogun.Version_get_version_year()

def Version_get_version_month():
  """Version_get_version_month() ->  int"""
  return _modshogun.Version_get_version_month()

def Version_get_version_day():
  """Version_get_version_day() ->  int"""
  return _modshogun.Version_get_version_day()

def Version_get_version_hour():
  """Version_get_version_hour() ->  int"""
  return _modshogun.Version_get_version_hour()

def Version_get_version_minute():
  """Version_get_version_minute() ->  int"""
  return _modshogun.Version_get_version_minute()

def Version_get_version_parameter():
  """Version_get_version_parameter() ->  int"""
  return _modshogun.Version_get_version_parameter()

def Version_get_version_in_minutes():
  """Version_get_version_in_minutes() -> int"""
  return _modshogun.Version_get_version_in_minutes()

class Parallel(_object):
    """Proxy of C++ shogun::Parallel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parallel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parallel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Parallel
        __init__(self, orig) -> Parallel
        """
        this = _modshogun.new_Parallel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Parallel
    __del__ = lambda self : None;
    def get_num_cpus(self):
        """get_num_cpus(self) ->  int"""
        return _modshogun.Parallel_get_num_cpus(self)

    def set_num_threads(self, *args):
        """set_num_threads(self, n)"""
        return _modshogun.Parallel_set_num_threads(self, *args)

    def get_num_threads(self):
        """get_num_threads(self) ->  int"""
        return _modshogun.Parallel_get_num_threads(self)

    def ref_count(self):
        """ref_count(self) ->  int"""
        return _modshogun.Parallel_ref_count(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.Parallel_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.Parallel_load_serializable(self, *args)

Parallel_swigregister = _modshogun.Parallel_swigregister
Parallel_swigregister(Parallel)

import tempfile, random, os, exceptions

import modshogun

def __SGgetstate__(self):
    fname = tempfile.gettempdir() + "/" + tempfile.gettempprefix() \
        + str(random.randint(0, 1e15))

    try:
        fstream = modshogun.SerializableAsciiFile(fname, "w") \
            if self.__pickle_ascii__ \
            else modshogun.SerializableHDF5File(fname, "w")
    except exceptions.AttributeError:
        fstream = modshogun.SerializableAsciiFile(fname, "w")
        self.__pickle_ascii__ = True

    if not self.save_serializable(fstream):
        fstream.close(); os.remove(fname)
        raise exceptions.IOError("Could not dump Shogun object!")
    fstream.close()
    fstream = open(fname, "r"); result = fstream.read();
    fstream.close()

    os.remove(fname)
    return (self.__pickle_ascii__, result)

def __SGsetstate__(self, state_tuple):
    self.__init__()

    fname = tempfile.gettempdir() + "/" + tempfile.gettempprefix() \
        + str(random.randint(0, 1e15))

    fstream = open(fname, "w"); fstream.write(state_tuple[1]);
    fstream.close()

    try:
        fstream = modshogun.SerializableAsciiFile(fname, "r") \
            if state_tuple[0] \
            else modshogun.SerializableHDF5File(fname, "r")
    except exceptions.AttributeError:
        raise exceptions.IOError("File contains an HDF5 stream but " \
                                 "Shogun was not compiled with HDF5" \
                                 " support!")

    if not self.load_serializable(fstream):
        fstream.close(); os.remove(fname)
        raise exceptions.IOError("Could not load Shogun object!")
    fstream.close()

    os.remove(fname)

def __SGreduce_ex__(self, protocol):
    self.__pickle_ascii__ = True if protocol == 0 else False
    return super(self.__class__, self).__reduce__()

def __SGstr__(self):
    fname = tempfile.gettempdir() + "/" + tempfile.gettempprefix() \
        + str(random.randint(0, 1e15))

    fstream = modshogun.SerializableAsciiFile(fname, "w")
    if not self.save_serializable(fstream):
        fstream.close(); os.remove(fname)
        raise exceptions.IOError("Could not dump Shogun object!")
    fstream.close()

    fstream = open(fname, "r"); result = fstream.read();
    fstream.close()

    os.remove(fname)
    return result

def __SGeq__(self, other):
    return self.__str__() == str(other)

def __SGneq__(self, other):
    return self.__str__() != str(other)

SGObject.__setstate__ = __SGsetstate__
SGObject.__getstate__ = __SGgetstate__
SGObject.__reduce_ex__ = __SGreduce_ex__
SGObject.__str__ = __SGstr__
SGObject.__eq__ = __SGeq__
SGObject.__neq__ = __SGneq__

class File(SGObject):
    """Proxy of C++ shogun::CFile class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, File, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, File, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_File
    __del__ = lambda self : None;
    def close(self):
        """close(self)"""
        return _modshogun.File_close(self)

    def get_file_descriptor(self):
        """get_file_descriptor(self) -> FILE *"""
        return _modshogun.File_get_file_descriptor(self)

    def set_variable_name(self, *args):
        """set_variable_name(self, name)"""
        return _modshogun.File_set_variable_name(self, *args)

    def get_variable_name(self):
        """get_variable_name(self) -> str *"""
        return _modshogun.File_get_variable_name(self)

    def get_vector(self, *args):
        """
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        """
        return _modshogun.File_get_vector(self, *args)

    def get_int8_matrix(self, *args):
        """get_int8_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_int8_matrix(self, *args)

    def get_uint_matrix(self, *args):
        """get_uint_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_uint_matrix(self, *args)

    def get_long_matrix(self, *args):
        """get_long_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_long_matrix(self, *args)

    def get_ulong_matrix(self, *args):
        """get_ulong_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_ulong_matrix(self, *args)

    def get_longreal_matrix(self, *args):
        """get_longreal_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_longreal_matrix(self, *args)

    def get_matrix(self, *args):
        """
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.File_get_matrix(self, *args)

    def get_ndarray(self, *args):
        """
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        """
        return _modshogun.File_get_ndarray(self, *args)

    def get_int8_sparsematrix(self, *args):
        """get_int8_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_int8_sparsematrix(self, *args)

    def get_uint_sparsematrix(self, *args):
        """get_uint_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_uint_sparsematrix(self, *args)

    def get_long_sparsematrix(self, *args):
        """get_long_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_long_sparsematrix(self, *args)

    def get_ulong_sparsematrix(self, *args):
        """get_ulong_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_ulong_sparsematrix(self, *args)

    def get_sparse_matrix(self, *args):
        """
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.File_get_sparse_matrix(self, *args)

    def get_longreal_sparsematrix(self, *args):
        """get_longreal_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_get_longreal_sparsematrix(self, *args)

    def get_int8_string_list(self, *args):
        """get_int8_string_list(self, strings, num_str, max_string_len)"""
        return _modshogun.File_get_int8_string_list(self, *args)

    def get_uint_string_list(self, *args):
        """get_uint_string_list(self, strings, num_str, max_string_len)"""
        return _modshogun.File_get_uint_string_list(self, *args)

    def get_long_string_list(self, *args):
        """get_long_string_list(self, strings, num_str, max_string_len)"""
        return _modshogun.File_get_long_string_list(self, *args)

    def get_ulong_string_list(self, *args):
        """get_ulong_string_list(self, strings, num_str, max_string_len)"""
        return _modshogun.File_get_ulong_string_list(self, *args)

    def get_string_list(self, *args):
        """
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        """
        return _modshogun.File_get_string_list(self, *args)

    def get_longreal_string_list(self, *args):
        """get_longreal_string_list(self, strings, num_str, max_string_len)"""
        return _modshogun.File_get_longreal_string_list(self, *args)

    def set_vector(self, *args):
        """
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        """
        return _modshogun.File_set_vector(self, *args)

    def set_int8_matrix(self, *args):
        """set_int8_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_int8_matrix(self, *args)

    def set_uint_matrix(self, *args):
        """set_uint_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_uint_matrix(self, *args)

    def set_long_matrix(self, *args):
        """set_long_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_long_matrix(self, *args)

    def set_ulong_matrix(self, *args):
        """set_ulong_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_ulong_matrix(self, *args)

    def set_longreal_matrix(self, *args):
        """set_longreal_matrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_longreal_matrix(self, *args)

    def set_matrix(self, *args):
        """
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.File_set_matrix(self, *args)

    def set_int8_sparsematrix(self, *args):
        """set_int8_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_int8_sparsematrix(self, *args)

    def set_uint_sparsematrix(self, *args):
        """set_uint_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_uint_sparsematrix(self, *args)

    def set_long_sparsematrix(self, *args):
        """set_long_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_long_sparsematrix(self, *args)

    def set_ulong_sparsematrix(self, *args):
        """set_ulong_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_ulong_sparsematrix(self, *args)

    def set_sparse_matrix(self, *args):
        """
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.File_set_sparse_matrix(self, *args)

    def set_longreal_sparsematrix(self, *args):
        """set_longreal_sparsematrix(self, matrix, num_feat, num_vec)"""
        return _modshogun.File_set_longreal_sparsematrix(self, *args)

    def set_int8_string_list(self, *args):
        """set_int8_string_list(self, strings, num_str)"""
        return _modshogun.File_set_int8_string_list(self, *args)

    def set_uint_string_list(self, *args):
        """set_uint_string_list(self, strings, num_str)"""
        return _modshogun.File_set_uint_string_list(self, *args)

    def set_long_string_list(self, *args):
        """set_long_string_list(self, strings, num_str)"""
        return _modshogun.File_set_long_string_list(self, *args)

    def set_ulong_string_list(self, *args):
        """set_ulong_string_list(self, strings, num_str)"""
        return _modshogun.File_set_ulong_string_list(self, *args)

    def set_string_list(self, *args):
        """
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        """
        return _modshogun.File_set_string_list(self, *args)

    def set_longreal_string_list(self, *args):
        """set_longreal_string_list(self, strings, num_str)"""
        return _modshogun.File_set_longreal_string_list(self, *args)

File_swigregister = _modshogun.File_swigregister
File_swigregister(File)

class StreamingFile(SGObject):
    """Proxy of C++ shogun::CStreamingFile class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFile, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFile
        __init__(self, fname, rw='r') -> StreamingFile
        __init__(self, fname) -> StreamingFile
        """
        this = _modshogun.new_StreamingFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFile
    __del__ = lambda self : None;
    def close(self):
        """close(self)"""
        return _modshogun.StreamingFile_close(self)

    def is_seekable(self):
        """is_seekable(self) -> bool"""
        return _modshogun.StreamingFile_is_seekable(self)

    def reset_stream(self):
        """reset_stream(self)"""
        return _modshogun.StreamingFile_reset_stream(self)

    def get_string(self, *args):
        """
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        """
        return _modshogun.StreamingFile_get_string(self, *args)

    def get_string_and_label(self, *args):
        """
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        """
        return _modshogun.StreamingFile_get_string_and_label(self, *args)

    def get_sparse_vector(self, *args):
        """
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        """
        return _modshogun.StreamingFile_get_sparse_vector(self, *args)

    def get_sparse_vector_and_label(self, *args):
        """
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        """
        return _modshogun.StreamingFile_get_sparse_vector_and_label(self, *args)

    def get_vector(self, *args):
        """
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, ex, len)
        """
        return _modshogun.StreamingFile_get_vector(self, *args)

    def get_vector_and_label(self, *args):
        """
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, ex, len, label)
        """
        return _modshogun.StreamingFile_get_vector_and_label(self, *args)

StreamingFile_swigregister = _modshogun.StreamingFile_swigregister
StreamingFile_swigregister(StreamingFile)

class StreamingFileFromFeatures(StreamingFile):
    """Proxy of C++ shogun::CStreamingFileFromFeatures class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromFeatures
        __init__(self, feat) -> StreamingFileFromFeatures
        __init__(self, feat, lab) -> StreamingFileFromFeatures
        """
        this = _modshogun.new_StreamingFileFromFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromFeatures
    __del__ = lambda self : None;
    def set_features(self, *args):
        """set_features(self, feat)"""
        return _modshogun.StreamingFileFromFeatures_set_features(self, *args)

    def set_labels(self, *args):
        """set_labels(self, lab)"""
        return _modshogun.StreamingFileFromFeatures_set_labels(self, *args)

StreamingFileFromFeatures_swigregister = _modshogun.StreamingFileFromFeatures_swigregister
StreamingFileFromFeatures_swigregister(StreamingFileFromFeatures)

class StreamingFileFromSparseBoolFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseBoolFeatures
        __init__(self, feat) -> StreamingFileFromSparseBoolFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseBoolFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseBoolFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseBoolFeatures_swigregister = _modshogun.StreamingFileFromSparseBoolFeatures_swigregister
StreamingFileFromSparseBoolFeatures_swigregister(StreamingFileFromSparseBoolFeatures)

class StreamingFileFromSparseCharFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseCharFeatures
        __init__(self, feat) -> StreamingFileFromSparseCharFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseCharFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseCharFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseCharFeatures_swigregister = _modshogun.StreamingFileFromSparseCharFeatures_swigregister
StreamingFileFromSparseCharFeatures_swigregister(StreamingFileFromSparseCharFeatures)

class StreamingFileFromSparseByteFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseByteFeatures
        __init__(self, feat) -> StreamingFileFromSparseByteFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseByteFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseByteFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseByteFeatures_swigregister = _modshogun.StreamingFileFromSparseByteFeatures_swigregister
StreamingFileFromSparseByteFeatures_swigregister(StreamingFileFromSparseByteFeatures)

class StreamingFileFromSparseWordFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseWordFeatures
        __init__(self, feat) -> StreamingFileFromSparseWordFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseWordFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseWordFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseWordFeatures_swigregister = _modshogun.StreamingFileFromSparseWordFeatures_swigregister
StreamingFileFromSparseWordFeatures_swigregister(StreamingFileFromSparseWordFeatures)

class StreamingFileFromSparseIntFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseIntFeatures
        __init__(self, feat) -> StreamingFileFromSparseIntFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseIntFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseIntFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseIntFeatures_swigregister = _modshogun.StreamingFileFromSparseIntFeatures_swigregister
StreamingFileFromSparseIntFeatures_swigregister(StreamingFileFromSparseIntFeatures)

class StreamingFileFromSparseLongFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseLongFeatures
        __init__(self, feat) -> StreamingFileFromSparseLongFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseLongFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseLongFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseLongFeatures_swigregister = _modshogun.StreamingFileFromSparseLongFeatures_swigregister
StreamingFileFromSparseLongFeatures_swigregister(StreamingFileFromSparseLongFeatures)

class StreamingFileFromSparseUlongFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseUlongFeatures
        __init__(self, feat) -> StreamingFileFromSparseUlongFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseUlongFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseUlongFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseUlongFeatures_swigregister = _modshogun.StreamingFileFromSparseUlongFeatures_swigregister
StreamingFileFromSparseUlongFeatures_swigregister(StreamingFileFromSparseUlongFeatures)

class StreamingFileFromSparseShortRealFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseShortRealFeatures
        __init__(self, feat) -> StreamingFileFromSparseShortRealFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseShortRealFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseShortRealFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseShortRealFeatures_swigregister = _modshogun.StreamingFileFromSparseShortRealFeatures_swigregister
StreamingFileFromSparseShortRealFeatures_swigregister(StreamingFileFromSparseShortRealFeatures)

class StreamingFileFromSparseRealFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSparseFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromSparseRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromSparseRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromSparseRealFeatures
        __init__(self, feat) -> StreamingFileFromSparseRealFeatures
        __init__(self, feat, lab) -> StreamingFileFromSparseRealFeatures
        """
        this = _modshogun.new_StreamingFileFromSparseRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromSparseRealFeatures
    __del__ = lambda self : None;
StreamingFileFromSparseRealFeatures_swigregister = _modshogun.StreamingFileFromSparseRealFeatures_swigregister
StreamingFileFromSparseRealFeatures_swigregister(StreamingFileFromSparseRealFeatures)

class StreamingFileFromBoolFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromBoolFeatures
        __init__(self, feat) -> StreamingFileFromBoolFeatures
        __init__(self, feat, lab) -> StreamingFileFromBoolFeatures
        """
        this = _modshogun.new_StreamingFileFromBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromBoolFeatures
    __del__ = lambda self : None;
StreamingFileFromBoolFeatures_swigregister = _modshogun.StreamingFileFromBoolFeatures_swigregister
StreamingFileFromBoolFeatures_swigregister(StreamingFileFromBoolFeatures)

class StreamingFileFromCharFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromCharFeatures
        __init__(self, feat) -> StreamingFileFromCharFeatures
        __init__(self, feat, lab) -> StreamingFileFromCharFeatures
        """
        this = _modshogun.new_StreamingFileFromCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromCharFeatures
    __del__ = lambda self : None;
StreamingFileFromCharFeatures_swigregister = _modshogun.StreamingFileFromCharFeatures_swigregister
StreamingFileFromCharFeatures_swigregister(StreamingFileFromCharFeatures)

class StreamingFileFromByteFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromByteFeatures
        __init__(self, feat) -> StreamingFileFromByteFeatures
        __init__(self, feat, lab) -> StreamingFileFromByteFeatures
        """
        this = _modshogun.new_StreamingFileFromByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromByteFeatures
    __del__ = lambda self : None;
StreamingFileFromByteFeatures_swigregister = _modshogun.StreamingFileFromByteFeatures_swigregister
StreamingFileFromByteFeatures_swigregister(StreamingFileFromByteFeatures)

class StreamingFileFromWordFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromWordFeatures
        __init__(self, feat) -> StreamingFileFromWordFeatures
        __init__(self, feat, lab) -> StreamingFileFromWordFeatures
        """
        this = _modshogun.new_StreamingFileFromWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromWordFeatures
    __del__ = lambda self : None;
StreamingFileFromWordFeatures_swigregister = _modshogun.StreamingFileFromWordFeatures_swigregister
StreamingFileFromWordFeatures_swigregister(StreamingFileFromWordFeatures)

class StreamingFileFromIntFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromIntFeatures
        __init__(self, feat) -> StreamingFileFromIntFeatures
        __init__(self, feat, lab) -> StreamingFileFromIntFeatures
        """
        this = _modshogun.new_StreamingFileFromIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromIntFeatures
    __del__ = lambda self : None;
StreamingFileFromIntFeatures_swigregister = _modshogun.StreamingFileFromIntFeatures_swigregister
StreamingFileFromIntFeatures_swigregister(StreamingFileFromIntFeatures)

class StreamingFileFromLongFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromLongFeatures
        __init__(self, feat) -> StreamingFileFromLongFeatures
        __init__(self, feat, lab) -> StreamingFileFromLongFeatures
        """
        this = _modshogun.new_StreamingFileFromLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromLongFeatures
    __del__ = lambda self : None;
StreamingFileFromLongFeatures_swigregister = _modshogun.StreamingFileFromLongFeatures_swigregister
StreamingFileFromLongFeatures_swigregister(StreamingFileFromLongFeatures)

class StreamingFileFromUlongFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromUlongFeatures
        __init__(self, feat) -> StreamingFileFromUlongFeatures
        __init__(self, feat, lab) -> StreamingFileFromUlongFeatures
        """
        this = _modshogun.new_StreamingFileFromUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromUlongFeatures
    __del__ = lambda self : None;
StreamingFileFromUlongFeatures_swigregister = _modshogun.StreamingFileFromUlongFeatures_swigregister
StreamingFileFromUlongFeatures_swigregister(StreamingFileFromUlongFeatures)

class StreamingFileFromShortRealFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromShortRealFeatures
        __init__(self, feat) -> StreamingFileFromShortRealFeatures
        __init__(self, feat, lab) -> StreamingFileFromShortRealFeatures
        """
        this = _modshogun.new_StreamingFileFromShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromShortRealFeatures
    __del__ = lambda self : None;
StreamingFileFromShortRealFeatures_swigregister = _modshogun.StreamingFileFromShortRealFeatures_swigregister
StreamingFileFromShortRealFeatures_swigregister(StreamingFileFromShortRealFeatures)

class StreamingFileFromRealFeatures(StreamingFileFromFeatures):
    """Proxy of C++ shogun::CStreamingFileFromSimpleFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFileFromRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFileFromFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFileFromRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingFileFromRealFeatures
        __init__(self, feat) -> StreamingFileFromRealFeatures
        __init__(self, feat, lab) -> StreamingFileFromRealFeatures
        """
        this = _modshogun.new_StreamingFileFromRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingFileFromRealFeatures
    __del__ = lambda self : None;
StreamingFileFromRealFeatures_swigregister = _modshogun.StreamingFileFromRealFeatures_swigregister
StreamingFileFromRealFeatures_swigregister(StreamingFileFromRealFeatures)

class AsciiFile(File):
    """Proxy of C++ shogun::CAsciiFile class"""
    __swig_setmethods__ = {}
    for _s in [File]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsciiFile, name, value)
    __swig_getmethods__ = {}
    for _s in [File]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsciiFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AsciiFile
        __init__(self, f, name=None) -> AsciiFile
        __init__(self, f) -> AsciiFile
        __init__(self, fname, rw='r', name=None) -> AsciiFile
        __init__(self, fname, rw='r') -> AsciiFile
        __init__(self, fname) -> AsciiFile
        """
        this = _modshogun.new_AsciiFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_AsciiFile
    __del__ = lambda self : None;
    def get_vector(self, *args):
        """
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        """
        return _modshogun.AsciiFile_get_vector(self, *args)

    def get_matrix(self, *args):
        """
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.AsciiFile_get_matrix(self, *args)

    def get_int8_ndarray(self, *args):
        """get_int8_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_get_int8_ndarray(self, *args)

    def get_uint_ndarray(self, *args):
        """get_uint_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_get_uint_ndarray(self, *args)

    def get_long_ndarray(self, *args):
        """get_long_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_get_long_ndarray(self, *args)

    def get_ulong_ndarray(self, *args):
        """get_ulong_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_get_ulong_ndarray(self, *args)

    def get_longreal_ndarray(self, *args):
        """get_longreal_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_get_longreal_ndarray(self, *args)

    def get_ndarray(self, *args):
        """
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        """
        return _modshogun.AsciiFile_get_ndarray(self, *args)

    def get_sparse_matrix(self, *args):
        """
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.AsciiFile_get_sparse_matrix(self, *args)

    def get_string_list(self, *args):
        """
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        """
        return _modshogun.AsciiFile_get_string_list(self, *args)

    def set_vector(self, *args):
        """
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        """
        return _modshogun.AsciiFile_set_vector(self, *args)

    def set_matrix(self, *args):
        """
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.AsciiFile_set_matrix(self, *args)

    def set_int8_ndarray(self, *args):
        """set_int8_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_set_int8_ndarray(self, *args)

    def set_uint_ndarray(self, *args):
        """set_uint_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_set_uint_ndarray(self, *args)

    def set_long_ndarray(self, *args):
        """set_long_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_set_long_ndarray(self, *args)

    def set_ulong_ndarray(self, *args):
        """set_ulong_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_set_ulong_ndarray(self, *args)

    def set_longreal_ndarray(self, *args):
        """set_longreal_ndarray(self, array, dims, num_dims)"""
        return _modshogun.AsciiFile_set_longreal_ndarray(self, *args)

    def set_ndarray(self, *args):
        """
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        """
        return _modshogun.AsciiFile_set_ndarray(self, *args)

    def set_sparse_matrix(self, *args):
        """
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.AsciiFile_set_sparse_matrix(self, *args)

    def set_string_list(self, *args):
        """
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        """
        return _modshogun.AsciiFile_set_string_list(self, *args)

    def getdelim(*args):
        """getdelim(lineptr, n, delimiter, stream) -> ssize_t"""
        return _modshogun.AsciiFile_getdelim(*args)

    if _newclass:getdelim = staticmethod(getdelim)
    __swig_getmethods__["getdelim"] = lambda x: getdelim
    def getline(*args):
        """getline(lineptr, n, stream) -> ssize_t"""
        return _modshogun.AsciiFile_getline(*args)

    if _newclass:getline = staticmethod(getline)
    __swig_getmethods__["getline"] = lambda x: getline
    def tokenize(*args):
        """tokenize(delim, s, ret)"""
        return _modshogun.AsciiFile_tokenize(*args)

    if _newclass:tokenize = staticmethod(tokenize)
    __swig_getmethods__["tokenize"] = lambda x: tokenize
AsciiFile_swigregister = _modshogun.AsciiFile_swigregister
AsciiFile_swigregister(AsciiFile)

def AsciiFile_getdelim(*args):
  """AsciiFile_getdelim(lineptr, n, delimiter, stream) -> ssize_t"""
  return _modshogun.AsciiFile_getdelim(*args)

def AsciiFile_getline(*args):
  """AsciiFile_getline(lineptr, n, stream) -> ssize_t"""
  return _modshogun.AsciiFile_getline(*args)

def AsciiFile_tokenize(*args):
  """AsciiFile_tokenize(delim, s, ret)"""
  return _modshogun.AsciiFile_tokenize(*args)

class StreamingAsciiFile(StreamingFile):
    """Proxy of C++ shogun::CStreamingAsciiFile class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingAsciiFile, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingAsciiFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingAsciiFile
        __init__(self, fname, rw='r') -> StreamingAsciiFile
        __init__(self, fname) -> StreamingAsciiFile
        """
        this = _modshogun.new_StreamingAsciiFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingAsciiFile
    __del__ = lambda self : None;
    def str_to_bool(self, *args):
        """str_to_bool(self, str) -> bool"""
        return _modshogun.StreamingAsciiFile_str_to_bool(self, *args)

    def get_vector(self, *args):
        """
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        """
        return _modshogun.StreamingAsciiFile_get_vector(self, *args)

    def get_vector_and_label(self, *args):
        """
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        get_vector_and_label(self, vector, len, label)
        """
        return _modshogun.StreamingAsciiFile_get_vector_and_label(self, *args)

    def get_string(self, *args):
        """
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        get_string(self, vector, len)
        """
        return _modshogun.StreamingAsciiFile_get_string(self, *args)

    def get_string_and_label(self, *args):
        """
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        get_string_and_label(self, vector, len, label)
        """
        return _modshogun.StreamingAsciiFile_get_string_and_label(self, *args)

    def get_sparse_vector(self, *args):
        """
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        get_sparse_vector(self, vector, len)
        """
        return _modshogun.StreamingAsciiFile_get_sparse_vector(self, *args)

    def get_sparse_vector_and_label(self, *args):
        """
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        get_sparse_vector_and_label(self, vector, len, label)
        """
        return _modshogun.StreamingAsciiFile_get_sparse_vector_and_label(self, *args)

StreamingAsciiFile_swigregister = _modshogun.StreamingAsciiFile_swigregister
StreamingAsciiFile_swigregister(StreamingAsciiFile)

T_VW = _modshogun.T_VW
T_SVMLIGHT = _modshogun.T_SVMLIGHT
T_DENSE = _modshogun.T_DENSE
class VwParser(SGObject):
    """Proxy of C++ shogun::CVwParser class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VwParser, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VwParser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VwParser
        __init__(self, env_to_use) -> VwParser
        """
        this = _modshogun.new_VwParser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_VwParser
    __del__ = lambda self : None;
    def get_env(self):
        """get_env(self) -> CVwEnvironment *"""
        return _modshogun.VwParser_get_env(self)

    def set_env(self, *args):
        """set_env(self, env_to_use)"""
        return _modshogun.VwParser_set_env(self, *args)

    def set_cache_parameters(self, *args):
        """
        set_cache_parameters(self, fname, type=C_NATIVE)
        set_cache_parameters(self, fname)
        """
        return _modshogun.VwParser_set_cache_parameters(self, *args)

    def get_cache_type(self):
        """get_cache_type(self) -> EVwCacheType"""
        return _modshogun.VwParser_get_cache_type(self)

    def set_write_cache(self, *args):
        """set_write_cache(self, wr_cache)"""
        return _modshogun.VwParser_set_write_cache(self, *args)

    def get_write_cache(self):
        """get_write_cache(self) -> bool"""
        return _modshogun.VwParser_get_write_cache(self)

    def set_mm(self, *args):
        """set_mm(self, label)"""
        return _modshogun.VwParser_set_mm(self, *args)

    def noop_mm(self, *args):
        """noop_mm(self, label)"""
        return _modshogun.VwParser_noop_mm(self, *args)

    def set_minmax(self, *args):
        """set_minmax(self, label)"""
        return _modshogun.VwParser_set_minmax(self, *args)

    def read_features(self, *args):
        """read_features(self, buf, ex) ->  int"""
        return _modshogun.VwParser_read_features(self, *args)

    def read_svmlight_features(self, *args):
        """read_svmlight_features(self, buf, ae) ->  int"""
        return _modshogun.VwParser_read_svmlight_features(self, *args)

    def read_dense_features(self, *args):
        """read_dense_features(self, buf, ae) ->  int"""
        return _modshogun.VwParser_read_dense_features(self, *args)

    __swig_setmethods__["hasher"] = _modshogun.VwParser_hasher_set
    __swig_getmethods__["hasher"] = _modshogun.VwParser_hasher_get
    if _newclass:hasher = _swig_property(_modshogun.VwParser_hasher_get, _modshogun.VwParser_hasher_set)
VwParser_swigregister = _modshogun.VwParser_swigregister
VwParser_swigregister(VwParser)

class StreamingVwFile(StreamingFile):
    """Proxy of C++ shogun::CStreamingVwFile class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingVwFile, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingVwFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingVwFile
        __init__(self, fname, rw='r') -> StreamingVwFile
        __init__(self, fname) -> StreamingVwFile
        """
        this = _modshogun.new_StreamingVwFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingVwFile
    __del__ = lambda self : None;
    def set_parser_type(self, *args):
        """
        set_parser_type(self, type=T_VW)
        set_parser_type(self)
        """
        return _modshogun.StreamingVwFile_set_parser_type(self, *args)

    def set_env(self, *args):
        """set_env(self, env_to_use)"""
        return _modshogun.StreamingVwFile_set_env(self, *args)

    def get_env(self):
        """get_env(self) -> CVwEnvironment *"""
        return _modshogun.StreamingVwFile_get_env(self)

    def set_write_to_cache(self, *args):
        """set_write_to_cache(self, write_cache)"""
        return _modshogun.StreamingVwFile_set_write_to_cache(self, *args)

    def get_write_to_cache(self):
        """get_write_to_cache(self) -> bool"""
        return _modshogun.StreamingVwFile_get_write_to_cache(self)

    __swig_setmethods__["parse_example"] = _modshogun.StreamingVwFile_parse_example_set
    __swig_getmethods__["parse_example"] = _modshogun.StreamingVwFile_parse_example_get
    if _newclass:parse_example = _swig_property(_modshogun.StreamingVwFile_parse_example_get, _modshogun.StreamingVwFile_parse_example_set)
StreamingVwFile_swigregister = _modshogun.StreamingVwFile_swigregister
StreamingVwFile_swigregister(StreamingVwFile)

class StreamingVwCacheFile(StreamingFile):
    """Proxy of C++ shogun::CStreamingVwCacheFile class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingVwCacheFile, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingVwCacheFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingVwCacheFile
        __init__(self, cache_type) -> StreamingVwCacheFile
        __init__(self, fname, rw='r', cache_type=C_NATIVE) -> StreamingVwCacheFile
        __init__(self, fname, rw='r') -> StreamingVwCacheFile
        __init__(self, fname) -> StreamingVwCacheFile
        """
        this = _modshogun.new_StreamingVwCacheFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingVwCacheFile
    __del__ = lambda self : None;
    def set_env(self, *args):
        """set_env(self, env_to_use)"""
        return _modshogun.StreamingVwCacheFile_set_env(self, *args)

    def get_env(self):
        """get_env(self) -> CVwEnvironment *"""
        return _modshogun.StreamingVwCacheFile_get_env(self)

StreamingVwCacheFile_swigregister = _modshogun.StreamingVwCacheFile_swigregister
StreamingVwCacheFile_swigregister(StreamingVwCacheFile)

class BinaryFile(File):
    """Proxy of C++ shogun::CBinaryFile class"""
    __swig_setmethods__ = {}
    for _s in [File]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryFile, name, value)
    __swig_getmethods__ = {}
    for _s in [File]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BinaryFile
        __init__(self, f, name=None) -> BinaryFile
        __init__(self, f) -> BinaryFile
        __init__(self, fname, rw='r', name=None) -> BinaryFile
        __init__(self, fname, rw='r') -> BinaryFile
        __init__(self, fname) -> BinaryFile
        """
        this = _modshogun.new_BinaryFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_BinaryFile
    __del__ = lambda self : None;
    def get_vector(self, *args):
        """
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        get_vector(self, vector, len)
        """
        return _modshogun.BinaryFile_get_vector(self, *args)

    def get_matrix(self, *args):
        """
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        get_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.BinaryFile_get_matrix(self, *args)

    def get_ndarray(self, *args):
        """
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        get_ndarray(self, array, dims, num_dims)
        """
        return _modshogun.BinaryFile_get_ndarray(self, *args)

    def get_sparse_matrix(self, *args):
        """
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        get_sparse_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.BinaryFile_get_sparse_matrix(self, *args)

    def get_string_list(self, *args):
        """
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        get_string_list(self, strings, num_str, max_string_len)
        """
        return _modshogun.BinaryFile_get_string_list(self, *args)

    def set_vector(self, *args):
        """
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        set_vector(self, vector, len)
        """
        return _modshogun.BinaryFile_set_vector(self, *args)

    def set_matrix(self, *args):
        """
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        set_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.BinaryFile_set_matrix(self, *args)

    def set_ndarray(self, *args):
        """
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        set_ndarray(self, array, dims, num_dims)
        """
        return _modshogun.BinaryFile_set_ndarray(self, *args)

    def set_sparse_matrix(self, *args):
        """
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        set_sparse_matrix(self, matrix, num_feat, num_vec)
        """
        return _modshogun.BinaryFile_set_sparse_matrix(self, *args)

    def set_string_list(self, *args):
        """
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        set_string_list(self, strings, num_str)
        """
        return _modshogun.BinaryFile_set_string_list(self, *args)

BinaryFile_swigregister = _modshogun.BinaryFile_swigregister
BinaryFile_swigregister(BinaryFile)

class SerializableFile(SGObject):
    """Proxy of C++ shogun::CSerializableFile class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializableFile, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SerializableFile, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SerializableFile
    __del__ = lambda self : None;
    def close(self):
        """close(self)"""
        return _modshogun.SerializableFile_close(self)

    def is_opened(self):
        """is_opened(self) -> bool"""
        return _modshogun.SerializableFile_is_opened(self)

SerializableFile_swigregister = _modshogun.SerializableFile_swigregister
SerializableFile_swigregister(SerializableFile)

CHAR_CONT_BEGIN = _modshogun.CHAR_CONT_BEGIN
CHAR_CONT_END = _modshogun.CHAR_CONT_END
CHAR_ITEM_BEGIN = _modshogun.CHAR_ITEM_BEGIN
CHAR_ITEM_END = _modshogun.CHAR_ITEM_END
CHAR_SGSERIAL_BEGIN = _modshogun.CHAR_SGSERIAL_BEGIN
CHAR_SGSERIAL_END = _modshogun.CHAR_SGSERIAL_END
CHAR_STRING_BEGIN = _modshogun.CHAR_STRING_BEGIN
CHAR_STRING_END = _modshogun.CHAR_STRING_END
CHAR_SPARSE_BEGIN = _modshogun.CHAR_SPARSE_BEGIN
CHAR_SPARSE_END = _modshogun.CHAR_SPARSE_END
CHAR_TYPE_END = _modshogun.CHAR_TYPE_END
STR_SGSERIAL_NULL = _modshogun.STR_SGSERIAL_NULL
class SerializableAsciiFile(SerializableFile):
    """Proxy of C++ shogun::CSerializableAsciiFile class"""
    __swig_setmethods__ = {}
    for _s in [SerializableFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializableAsciiFile, name, value)
    __swig_getmethods__ = {}
    for _s in [SerializableFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SerializableAsciiFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SerializableAsciiFile
        __init__(self, fstream, rw) -> SerializableAsciiFile
        __init__(self, fname, rw='r') -> SerializableAsciiFile
        __init__(self, fname) -> SerializableAsciiFile
        """
        this = _modshogun.new_SerializableAsciiFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SerializableAsciiFile
    __del__ = lambda self : None;
SerializableAsciiFile_swigregister = _modshogun.SerializableAsciiFile_swigregister
SerializableAsciiFile_swigregister(SerializableAsciiFile)

CT_SCALAR = _modshogun.CT_SCALAR
CT_VECTOR = _modshogun.CT_VECTOR
CT_MATRIX = _modshogun.CT_MATRIX
CT_NDARRAY = _modshogun.CT_NDARRAY
CT_SGVECTOR = _modshogun.CT_SGVECTOR
CT_SGMATRIX = _modshogun.CT_SGMATRIX
ST_NONE = _modshogun.ST_NONE
ST_STRING = _modshogun.ST_STRING
ST_SPARSE = _modshogun.ST_SPARSE
PT_BOOL = _modshogun.PT_BOOL
PT_CHAR = _modshogun.PT_CHAR
PT_INT8 = _modshogun.PT_INT8
PT_UINT8 = _modshogun.PT_UINT8
PT_INT16 = _modshogun.PT_INT16
PT_UINT16 = _modshogun.PT_UINT16
PT_INT32 = _modshogun.PT_INT32
PT_UINT32 = _modshogun.PT_UINT32
PT_INT64 = _modshogun.PT_INT64
PT_UINT64 = _modshogun.PT_UINT64
PT_FLOAT32 = _modshogun.PT_FLOAT32
PT_FLOAT64 = _modshogun.PT_FLOAT64
PT_FLOATMAX = _modshogun.PT_FLOATMAX
PT_SGOBJECT = _modshogun.PT_SGOBJECT
class BoolSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoolSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> BoolSparseVector
        __init__(self, feats, num_entries, index) -> BoolSparseVector
        __init__(self, num_entries, index, free_v=False) -> BoolSparseVector
        __init__(self, num_entries, index) -> BoolSparseVector
        __init__(self, orig) -> BoolSparseVector
        """
        this = _modshogun.new_BoolSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.BoolSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.BoolSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.BoolSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.BoolSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.BoolSparseVector_vec_index_get, _modshogun.BoolSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.BoolSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.BoolSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.BoolSparseVector_num_feat_entries_get, _modshogun.BoolSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.BoolSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.BoolSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.BoolSparseVector_do_free_get, _modshogun.BoolSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.BoolSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.BoolSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_BoolSparseVector
    __del__ = lambda self : None;
BoolSparseVector_swigregister = _modshogun.BoolSparseVector_swigregister
BoolSparseVector_swigregister(BoolSparseVector)

class CharSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CharSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> CharSparseVector
        __init__(self, feats, num_entries, index) -> CharSparseVector
        __init__(self, num_entries, index, free_v=False) -> CharSparseVector
        __init__(self, num_entries, index) -> CharSparseVector
        __init__(self, orig) -> CharSparseVector
        """
        this = _modshogun.new_CharSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.CharSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.CharSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.CharSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.CharSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.CharSparseVector_vec_index_get, _modshogun.CharSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.CharSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.CharSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.CharSparseVector_num_feat_entries_get, _modshogun.CharSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.CharSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.CharSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.CharSparseVector_do_free_get, _modshogun.CharSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CharSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CharSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_CharSparseVector
    __del__ = lambda self : None;
CharSparseVector_swigregister = _modshogun.CharSparseVector_swigregister
CharSparseVector_swigregister(CharSparseVector)

class ByteSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> ByteSparseVector
        __init__(self, feats, num_entries, index) -> ByteSparseVector
        __init__(self, num_entries, index, free_v=False) -> ByteSparseVector
        __init__(self, num_entries, index) -> ByteSparseVector
        __init__(self, orig) -> ByteSparseVector
        """
        this = _modshogun.new_ByteSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.ByteSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.ByteSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.ByteSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.ByteSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.ByteSparseVector_vec_index_get, _modshogun.ByteSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.ByteSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.ByteSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.ByteSparseVector_num_feat_entries_get, _modshogun.ByteSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.ByteSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ByteSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ByteSparseVector_do_free_get, _modshogun.ByteSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ByteSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ByteSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ByteSparseVector
    __del__ = lambda self : None;
ByteSparseVector_swigregister = _modshogun.ByteSparseVector_swigregister
ByteSparseVector_swigregister(ByteSparseVector)

class WordSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WordSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> WordSparseVector
        __init__(self, feats, num_entries, index) -> WordSparseVector
        __init__(self, num_entries, index, free_v=False) -> WordSparseVector
        __init__(self, num_entries, index) -> WordSparseVector
        __init__(self, orig) -> WordSparseVector
        """
        this = _modshogun.new_WordSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.WordSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.WordSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.WordSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.WordSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.WordSparseVector_vec_index_get, _modshogun.WordSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.WordSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.WordSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.WordSparseVector_num_feat_entries_get, _modshogun.WordSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.WordSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.WordSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.WordSparseVector_do_free_get, _modshogun.WordSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.WordSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.WordSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_WordSparseVector
    __del__ = lambda self : None;
WordSparseVector_swigregister = _modshogun.WordSparseVector_swigregister
WordSparseVector_swigregister(WordSparseVector)

class IntSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> IntSparseVector
        __init__(self, feats, num_entries, index) -> IntSparseVector
        __init__(self, num_entries, index, free_v=False) -> IntSparseVector
        __init__(self, num_entries, index) -> IntSparseVector
        __init__(self, orig) -> IntSparseVector
        """
        this = _modshogun.new_IntSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.IntSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.IntSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.IntSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.IntSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.IntSparseVector_vec_index_get, _modshogun.IntSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.IntSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.IntSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.IntSparseVector_num_feat_entries_get, _modshogun.IntSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.IntSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.IntSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.IntSparseVector_do_free_get, _modshogun.IntSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.IntSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.IntSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_IntSparseVector
    __del__ = lambda self : None;
IntSparseVector_swigregister = _modshogun.IntSparseVector_swigregister
IntSparseVector_swigregister(IntSparseVector)

class LongIntSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LongIntSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> LongIntSparseVector
        __init__(self, feats, num_entries, index) -> LongIntSparseVector
        __init__(self, num_entries, index, free_v=False) -> LongIntSparseVector
        __init__(self, num_entries, index) -> LongIntSparseVector
        __init__(self, orig) -> LongIntSparseVector
        """
        this = _modshogun.new_LongIntSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.LongIntSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.LongIntSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.LongIntSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.LongIntSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.LongIntSparseVector_vec_index_get, _modshogun.LongIntSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.LongIntSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.LongIntSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.LongIntSparseVector_num_feat_entries_get, _modshogun.LongIntSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.LongIntSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.LongIntSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.LongIntSparseVector_do_free_get, _modshogun.LongIntSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.LongIntSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.LongIntSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_LongIntSparseVector
    __del__ = lambda self : None;
LongIntSparseVector_swigregister = _modshogun.LongIntSparseVector_swigregister
LongIntSparseVector_swigregister(LongIntSparseVector)

class ULongIntSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(uint64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ULongIntSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> ULongIntSparseVector
        __init__(self, feats, num_entries, index) -> ULongIntSparseVector
        __init__(self, num_entries, index, free_v=False) -> ULongIntSparseVector
        __init__(self, num_entries, index) -> ULongIntSparseVector
        __init__(self, orig) -> ULongIntSparseVector
        """
        this = _modshogun.new_ULongIntSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.ULongIntSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.ULongIntSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.ULongIntSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.ULongIntSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.ULongIntSparseVector_vec_index_get, _modshogun.ULongIntSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.ULongIntSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.ULongIntSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.ULongIntSparseVector_num_feat_entries_get, _modshogun.ULongIntSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.ULongIntSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ULongIntSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ULongIntSparseVector_do_free_get, _modshogun.ULongIntSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ULongIntSparseVector
    __del__ = lambda self : None;
ULongIntSparseVector_swigregister = _modshogun.ULongIntSparseVector_swigregister
ULongIntSparseVector_swigregister(ULongIntSparseVector)

class ShortRealSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(float32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortRealSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> ShortRealSparseVector
        __init__(self, feats, num_entries, index) -> ShortRealSparseVector
        __init__(self, num_entries, index, free_v=False) -> ShortRealSparseVector
        __init__(self, num_entries, index) -> ShortRealSparseVector
        __init__(self, orig) -> ShortRealSparseVector
        """
        this = _modshogun.new_ShortRealSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.ShortRealSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.ShortRealSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.ShortRealSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.ShortRealSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.ShortRealSparseVector_vec_index_get, _modshogun.ShortRealSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.ShortRealSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.ShortRealSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.ShortRealSparseVector_num_feat_entries_get, _modshogun.ShortRealSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.ShortRealSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ShortRealSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ShortRealSparseVector_do_free_get, _modshogun.ShortRealSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ShortRealSparseVector
    __del__ = lambda self : None;
ShortRealSparseVector_swigregister = _modshogun.ShortRealSparseVector_swigregister
ShortRealSparseVector_swigregister(ShortRealSparseVector)

class RealSparseVector(_object):
    """Proxy of C++ shogun::SGSparseVector<(float64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealSparseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealSparseVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealSparseVector
        __init__(self, feats, num_entries, index, free_v=False) -> RealSparseVector
        __init__(self, feats, num_entries, index) -> RealSparseVector
        __init__(self, num_entries, index, free_v=False) -> RealSparseVector
        __init__(self, num_entries, index) -> RealSparseVector
        __init__(self, orig) -> RealSparseVector
        """
        this = _modshogun.new_RealSparseVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.RealSparseVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.RealSparseVector_destroy_vector(self)

    __swig_setmethods__["vec_index"] = _modshogun.RealSparseVector_vec_index_set
    __swig_getmethods__["vec_index"] = _modshogun.RealSparseVector_vec_index_get
    if _newclass:vec_index = _swig_property(_modshogun.RealSparseVector_vec_index_get, _modshogun.RealSparseVector_vec_index_set)
    __swig_setmethods__["num_feat_entries"] = _modshogun.RealSparseVector_num_feat_entries_set
    __swig_getmethods__["num_feat_entries"] = _modshogun.RealSparseVector_num_feat_entries_get
    if _newclass:num_feat_entries = _swig_property(_modshogun.RealSparseVector_num_feat_entries_get, _modshogun.RealSparseVector_num_feat_entries_set)
    __swig_setmethods__["do_free"] = _modshogun.RealSparseVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.RealSparseVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.RealSparseVector_do_free_get, _modshogun.RealSparseVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.RealSparseVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.RealSparseVector_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_RealSparseVector
    __del__ = lambda self : None;
RealSparseVector_swigregister = _modshogun.RealSparseVector_swigregister
RealSparseVector_swigregister(RealSparseVector)

class BoolSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoolSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> BoolSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> BoolSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> BoolSparseMatrix
        __init__(self, num_vec, num_feat) -> BoolSparseMatrix
        __init__(self, orig) -> BoolSparseMatrix
        """
        this = _modshogun.new_BoolSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.BoolSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.BoolSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.BoolSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.BoolSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.BoolSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.BoolSparseMatrix_num_vectors_get, _modshogun.BoolSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.BoolSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.BoolSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.BoolSparseMatrix_num_features_get, _modshogun.BoolSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.BoolSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.BoolSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.BoolSparseMatrix_sparse_matrix_get, _modshogun.BoolSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.BoolSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.BoolSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.BoolSparseMatrix_do_free_get, _modshogun.BoolSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.BoolSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.BoolSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_BoolSparseMatrix
    __del__ = lambda self : None;
BoolSparseMatrix_swigregister = _modshogun.BoolSparseMatrix_swigregister
BoolSparseMatrix_swigregister(BoolSparseMatrix)

class CharSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CharSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> CharSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> CharSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> CharSparseMatrix
        __init__(self, num_vec, num_feat) -> CharSparseMatrix
        __init__(self, orig) -> CharSparseMatrix
        """
        this = _modshogun.new_CharSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.CharSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.CharSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.CharSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.CharSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.CharSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.CharSparseMatrix_num_vectors_get, _modshogun.CharSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.CharSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.CharSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.CharSparseMatrix_num_features_get, _modshogun.CharSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.CharSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.CharSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.CharSparseMatrix_sparse_matrix_get, _modshogun.CharSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.CharSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.CharSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.CharSparseMatrix_do_free_get, _modshogun.CharSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CharSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CharSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_CharSparseMatrix
    __del__ = lambda self : None;
CharSparseMatrix_swigregister = _modshogun.CharSparseMatrix_swigregister
CharSparseMatrix_swigregister(CharSparseMatrix)

class ByteSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> ByteSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> ByteSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> ByteSparseMatrix
        __init__(self, num_vec, num_feat) -> ByteSparseMatrix
        __init__(self, orig) -> ByteSparseMatrix
        """
        this = _modshogun.new_ByteSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.ByteSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.ByteSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.ByteSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.ByteSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.ByteSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.ByteSparseMatrix_num_vectors_get, _modshogun.ByteSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.ByteSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.ByteSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.ByteSparseMatrix_num_features_get, _modshogun.ByteSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.ByteSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.ByteSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.ByteSparseMatrix_sparse_matrix_get, _modshogun.ByteSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.ByteSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ByteSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ByteSparseMatrix_do_free_get, _modshogun.ByteSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ByteSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ByteSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ByteSparseMatrix
    __del__ = lambda self : None;
ByteSparseMatrix_swigregister = _modshogun.ByteSparseMatrix_swigregister
ByteSparseMatrix_swigregister(ByteSparseMatrix)

class WordSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WordSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> WordSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> WordSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> WordSparseMatrix
        __init__(self, num_vec, num_feat) -> WordSparseMatrix
        __init__(self, orig) -> WordSparseMatrix
        """
        this = _modshogun.new_WordSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.WordSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.WordSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.WordSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.WordSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.WordSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.WordSparseMatrix_num_vectors_get, _modshogun.WordSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.WordSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.WordSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.WordSparseMatrix_num_features_get, _modshogun.WordSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.WordSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.WordSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.WordSparseMatrix_sparse_matrix_get, _modshogun.WordSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.WordSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.WordSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.WordSparseMatrix_do_free_get, _modshogun.WordSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.WordSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.WordSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_WordSparseMatrix
    __del__ = lambda self : None;
WordSparseMatrix_swigregister = _modshogun.WordSparseMatrix_swigregister
WordSparseMatrix_swigregister(WordSparseMatrix)

class IntSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> IntSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> IntSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> IntSparseMatrix
        __init__(self, num_vec, num_feat) -> IntSparseMatrix
        __init__(self, orig) -> IntSparseMatrix
        """
        this = _modshogun.new_IntSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.IntSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.IntSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.IntSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.IntSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.IntSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.IntSparseMatrix_num_vectors_get, _modshogun.IntSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.IntSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.IntSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.IntSparseMatrix_num_features_get, _modshogun.IntSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.IntSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.IntSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.IntSparseMatrix_sparse_matrix_get, _modshogun.IntSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.IntSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.IntSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.IntSparseMatrix_do_free_get, _modshogun.IntSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.IntSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.IntSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_IntSparseMatrix
    __del__ = lambda self : None;
IntSparseMatrix_swigregister = _modshogun.IntSparseMatrix_swigregister
IntSparseMatrix_swigregister(IntSparseMatrix)

class LongIntSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LongIntSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> LongIntSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> LongIntSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> LongIntSparseMatrix
        __init__(self, num_vec, num_feat) -> LongIntSparseMatrix
        __init__(self, orig) -> LongIntSparseMatrix
        """
        this = _modshogun.new_LongIntSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.LongIntSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.LongIntSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.LongIntSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.LongIntSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.LongIntSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.LongIntSparseMatrix_num_vectors_get, _modshogun.LongIntSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.LongIntSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.LongIntSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.LongIntSparseMatrix_num_features_get, _modshogun.LongIntSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.LongIntSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.LongIntSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.LongIntSparseMatrix_sparse_matrix_get, _modshogun.LongIntSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.LongIntSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.LongIntSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.LongIntSparseMatrix_do_free_get, _modshogun.LongIntSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.LongIntSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.LongIntSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_LongIntSparseMatrix
    __del__ = lambda self : None;
LongIntSparseMatrix_swigregister = _modshogun.LongIntSparseMatrix_swigregister
LongIntSparseMatrix_swigregister(LongIntSparseMatrix)

class ULongIntSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(uint64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ULongIntSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> ULongIntSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> ULongIntSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> ULongIntSparseMatrix
        __init__(self, num_vec, num_feat) -> ULongIntSparseMatrix
        __init__(self, orig) -> ULongIntSparseMatrix
        """
        this = _modshogun.new_ULongIntSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.ULongIntSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.ULongIntSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.ULongIntSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.ULongIntSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.ULongIntSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.ULongIntSparseMatrix_num_vectors_get, _modshogun.ULongIntSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.ULongIntSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.ULongIntSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.ULongIntSparseMatrix_num_features_get, _modshogun.ULongIntSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.ULongIntSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.ULongIntSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.ULongIntSparseMatrix_sparse_matrix_get, _modshogun.ULongIntSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.ULongIntSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ULongIntSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ULongIntSparseMatrix_do_free_get, _modshogun.ULongIntSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ULongIntSparseMatrix
    __del__ = lambda self : None;
ULongIntSparseMatrix_swigregister = _modshogun.ULongIntSparseMatrix_swigregister
ULongIntSparseMatrix_swigregister(ULongIntSparseMatrix)

class ShortRealSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(float32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortRealSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> ShortRealSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> ShortRealSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> ShortRealSparseMatrix
        __init__(self, num_vec, num_feat) -> ShortRealSparseMatrix
        __init__(self, orig) -> ShortRealSparseMatrix
        """
        this = _modshogun.new_ShortRealSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.ShortRealSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.ShortRealSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.ShortRealSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.ShortRealSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.ShortRealSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.ShortRealSparseMatrix_num_vectors_get, _modshogun.ShortRealSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.ShortRealSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.ShortRealSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.ShortRealSparseMatrix_num_features_get, _modshogun.ShortRealSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.ShortRealSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.ShortRealSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.ShortRealSparseMatrix_sparse_matrix_get, _modshogun.ShortRealSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.ShortRealSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ShortRealSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ShortRealSparseMatrix_do_free_get, _modshogun.ShortRealSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ShortRealSparseMatrix
    __del__ = lambda self : None;
ShortRealSparseMatrix_swigregister = _modshogun.ShortRealSparseMatrix_swigregister
ShortRealSparseMatrix_swigregister(ShortRealSparseMatrix)

class RealSparseMatrix(_object):
    """Proxy of C++ shogun::SGSparseMatrix<(float64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealSparseMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealSparseMatrix
        __init__(self, vecs, num_feat, num_vec, free_m=False) -> RealSparseMatrix
        __init__(self, vecs, num_feat, num_vec) -> RealSparseMatrix
        __init__(self, num_vec, num_feat, free_m=False) -> RealSparseMatrix
        __init__(self, num_vec, num_feat) -> RealSparseMatrix
        __init__(self, orig) -> RealSparseMatrix
        """
        this = _modshogun.new_RealSparseMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.RealSparseMatrix_free_matrix(self)

    def own_matrix(self):
        """own_matrix(self)"""
        return _modshogun.RealSparseMatrix_own_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.RealSparseMatrix_destroy_matrix(self)

    __swig_setmethods__["num_vectors"] = _modshogun.RealSparseMatrix_num_vectors_set
    __swig_getmethods__["num_vectors"] = _modshogun.RealSparseMatrix_num_vectors_get
    if _newclass:num_vectors = _swig_property(_modshogun.RealSparseMatrix_num_vectors_get, _modshogun.RealSparseMatrix_num_vectors_set)
    __swig_setmethods__["num_features"] = _modshogun.RealSparseMatrix_num_features_set
    __swig_getmethods__["num_features"] = _modshogun.RealSparseMatrix_num_features_get
    if _newclass:num_features = _swig_property(_modshogun.RealSparseMatrix_num_features_get, _modshogun.RealSparseMatrix_num_features_set)
    __swig_setmethods__["sparse_matrix"] = _modshogun.RealSparseMatrix_sparse_matrix_set
    __swig_getmethods__["sparse_matrix"] = _modshogun.RealSparseMatrix_sparse_matrix_get
    if _newclass:sparse_matrix = _swig_property(_modshogun.RealSparseMatrix_sparse_matrix_get, _modshogun.RealSparseMatrix_sparse_matrix_set)
    __swig_setmethods__["do_free"] = _modshogun.RealSparseMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.RealSparseMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.RealSparseMatrix_do_free_get, _modshogun.RealSparseMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.RealSparseMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.RealSparseMatrix_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_RealSparseMatrix
    __del__ = lambda self : None;
RealSparseMatrix_swigregister = _modshogun.RealSparseMatrix_swigregister
RealSparseMatrix_swigregister(RealSparseMatrix)

class BoolStringList(_object):
    """Proxy of C++ shogun::SGStringList<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoolStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> BoolStringList
        __init__(self, s, num_s, max_length) -> BoolStringList
        __init__(self, num_s, max_length, free_strings=False) -> BoolStringList
        __init__(self, num_s, max_length) -> BoolStringList
        __init__(self, orig) -> BoolStringList
        """
        this = _modshogun.new_BoolStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.BoolStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.BoolStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.BoolStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.BoolStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.BoolStringList_num_strings_get, _modshogun.BoolStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.BoolStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.BoolStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.BoolStringList_max_string_length_get, _modshogun.BoolStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.BoolStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.BoolStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.BoolStringList_strings_get, _modshogun.BoolStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.BoolStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.BoolStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.BoolStringList_do_free_get, _modshogun.BoolStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.BoolStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.BoolStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_BoolStringList
    __del__ = lambda self : None;
BoolStringList_swigregister = _modshogun.BoolStringList_swigregister
BoolStringList_swigregister(BoolStringList)

class CharStringList(_object):
    """Proxy of C++ shogun::SGStringList<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CharStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> CharStringList
        __init__(self, s, num_s, max_length) -> CharStringList
        __init__(self, num_s, max_length, free_strings=False) -> CharStringList
        __init__(self, num_s, max_length) -> CharStringList
        __init__(self, orig) -> CharStringList
        """
        this = _modshogun.new_CharStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.CharStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.CharStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.CharStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.CharStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.CharStringList_num_strings_get, _modshogun.CharStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.CharStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.CharStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.CharStringList_max_string_length_get, _modshogun.CharStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.CharStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.CharStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.CharStringList_strings_get, _modshogun.CharStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.CharStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.CharStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.CharStringList_do_free_get, _modshogun.CharStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CharStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CharStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_CharStringList
    __del__ = lambda self : None;
CharStringList_swigregister = _modshogun.CharStringList_swigregister
CharStringList_swigregister(CharStringList)

class ByteStringList(_object):
    """Proxy of C++ shogun::SGStringList<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> ByteStringList
        __init__(self, s, num_s, max_length) -> ByteStringList
        __init__(self, num_s, max_length, free_strings=False) -> ByteStringList
        __init__(self, num_s, max_length) -> ByteStringList
        __init__(self, orig) -> ByteStringList
        """
        this = _modshogun.new_ByteStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.ByteStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.ByteStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.ByteStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.ByteStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.ByteStringList_num_strings_get, _modshogun.ByteStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.ByteStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.ByteStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.ByteStringList_max_string_length_get, _modshogun.ByteStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.ByteStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.ByteStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.ByteStringList_strings_get, _modshogun.ByteStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.ByteStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ByteStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ByteStringList_do_free_get, _modshogun.ByteStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ByteStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ByteStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ByteStringList
    __del__ = lambda self : None;
ByteStringList_swigregister = _modshogun.ByteStringList_swigregister
ByteStringList_swigregister(ByteStringList)

class WordStringList(_object):
    """Proxy of C++ shogun::SGStringList<(uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WordStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> WordStringList
        __init__(self, s, num_s, max_length) -> WordStringList
        __init__(self, num_s, max_length, free_strings=False) -> WordStringList
        __init__(self, num_s, max_length) -> WordStringList
        __init__(self, orig) -> WordStringList
        """
        this = _modshogun.new_WordStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.WordStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.WordStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.WordStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.WordStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.WordStringList_num_strings_get, _modshogun.WordStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.WordStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.WordStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.WordStringList_max_string_length_get, _modshogun.WordStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.WordStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.WordStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.WordStringList_strings_get, _modshogun.WordStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.WordStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.WordStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.WordStringList_do_free_get, _modshogun.WordStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.WordStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.WordStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_WordStringList
    __del__ = lambda self : None;
WordStringList_swigregister = _modshogun.WordStringList_swigregister
WordStringList_swigregister(WordStringList)

class IntStringList(_object):
    """Proxy of C++ shogun::SGStringList<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> IntStringList
        __init__(self, s, num_s, max_length) -> IntStringList
        __init__(self, num_s, max_length, free_strings=False) -> IntStringList
        __init__(self, num_s, max_length) -> IntStringList
        __init__(self, orig) -> IntStringList
        """
        this = _modshogun.new_IntStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.IntStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.IntStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.IntStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.IntStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.IntStringList_num_strings_get, _modshogun.IntStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.IntStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.IntStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.IntStringList_max_string_length_get, _modshogun.IntStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.IntStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.IntStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.IntStringList_strings_get, _modshogun.IntStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.IntStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.IntStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.IntStringList_do_free_get, _modshogun.IntStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.IntStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.IntStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_IntStringList
    __del__ = lambda self : None;
IntStringList_swigregister = _modshogun.IntStringList_swigregister
IntStringList_swigregister(IntStringList)

class LongIntStringList(_object):
    """Proxy of C++ shogun::SGStringList<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LongIntStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> LongIntStringList
        __init__(self, s, num_s, max_length) -> LongIntStringList
        __init__(self, num_s, max_length, free_strings=False) -> LongIntStringList
        __init__(self, num_s, max_length) -> LongIntStringList
        __init__(self, orig) -> LongIntStringList
        """
        this = _modshogun.new_LongIntStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.LongIntStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.LongIntStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.LongIntStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.LongIntStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.LongIntStringList_num_strings_get, _modshogun.LongIntStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.LongIntStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.LongIntStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.LongIntStringList_max_string_length_get, _modshogun.LongIntStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.LongIntStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.LongIntStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.LongIntStringList_strings_get, _modshogun.LongIntStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.LongIntStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.LongIntStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.LongIntStringList_do_free_get, _modshogun.LongIntStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.LongIntStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.LongIntStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_LongIntStringList
    __del__ = lambda self : None;
LongIntStringList_swigregister = _modshogun.LongIntStringList_swigregister
LongIntStringList_swigregister(LongIntStringList)

class ULongIntStringList(_object):
    """Proxy of C++ shogun::SGStringList<(uint64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ULongIntStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> ULongIntStringList
        __init__(self, s, num_s, max_length) -> ULongIntStringList
        __init__(self, num_s, max_length, free_strings=False) -> ULongIntStringList
        __init__(self, num_s, max_length) -> ULongIntStringList
        __init__(self, orig) -> ULongIntStringList
        """
        this = _modshogun.new_ULongIntStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.ULongIntStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.ULongIntStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.ULongIntStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.ULongIntStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.ULongIntStringList_num_strings_get, _modshogun.ULongIntStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.ULongIntStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.ULongIntStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.ULongIntStringList_max_string_length_get, _modshogun.ULongIntStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.ULongIntStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.ULongIntStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.ULongIntStringList_strings_get, _modshogun.ULongIntStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.ULongIntStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ULongIntStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ULongIntStringList_do_free_get, _modshogun.ULongIntStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ULongIntStringList
    __del__ = lambda self : None;
ULongIntStringList_swigregister = _modshogun.ULongIntStringList_swigregister
ULongIntStringList_swigregister(ULongIntStringList)

class ShortRealStringList(_object):
    """Proxy of C++ shogun::SGStringList<(float32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortRealStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> ShortRealStringList
        __init__(self, s, num_s, max_length) -> ShortRealStringList
        __init__(self, num_s, max_length, free_strings=False) -> ShortRealStringList
        __init__(self, num_s, max_length) -> ShortRealStringList
        __init__(self, orig) -> ShortRealStringList
        """
        this = _modshogun.new_ShortRealStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.ShortRealStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.ShortRealStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.ShortRealStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.ShortRealStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.ShortRealStringList_num_strings_get, _modshogun.ShortRealStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.ShortRealStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.ShortRealStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.ShortRealStringList_max_string_length_get, _modshogun.ShortRealStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.ShortRealStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.ShortRealStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.ShortRealStringList_strings_get, _modshogun.ShortRealStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.ShortRealStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ShortRealStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ShortRealStringList_do_free_get, _modshogun.ShortRealStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ShortRealStringList
    __del__ = lambda self : None;
ShortRealStringList_swigregister = _modshogun.ShortRealStringList_swigregister
ShortRealStringList_swigregister(ShortRealStringList)

class RealStringList(_object):
    """Proxy of C++ shogun::SGStringList<(float64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealStringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealStringList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealStringList
        __init__(self, s, num_s, max_length, free_strings=False) -> RealStringList
        __init__(self, s, num_s, max_length) -> RealStringList
        __init__(self, num_s, max_length, free_strings=False) -> RealStringList
        __init__(self, num_s, max_length) -> RealStringList
        __init__(self, orig) -> RealStringList
        """
        this = _modshogun.new_RealStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def free_list(self):
        """free_list(self)"""
        return _modshogun.RealStringList_free_list(self)

    def destroy_list(self):
        """destroy_list(self)"""
        return _modshogun.RealStringList_destroy_list(self)

    __swig_setmethods__["num_strings"] = _modshogun.RealStringList_num_strings_set
    __swig_getmethods__["num_strings"] = _modshogun.RealStringList_num_strings_get
    if _newclass:num_strings = _swig_property(_modshogun.RealStringList_num_strings_get, _modshogun.RealStringList_num_strings_set)
    __swig_setmethods__["max_string_length"] = _modshogun.RealStringList_max_string_length_set
    __swig_getmethods__["max_string_length"] = _modshogun.RealStringList_max_string_length_get
    if _newclass:max_string_length = _swig_property(_modshogun.RealStringList_max_string_length_get, _modshogun.RealStringList_max_string_length_set)
    __swig_setmethods__["strings"] = _modshogun.RealStringList_strings_set
    __swig_getmethods__["strings"] = _modshogun.RealStringList_strings_get
    if _newclass:strings = _swig_property(_modshogun.RealStringList_strings_get, _modshogun.RealStringList_strings_set)
    __swig_setmethods__["do_free"] = _modshogun.RealStringList_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.RealStringList_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.RealStringList_do_free_get, _modshogun.RealStringList_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.RealStringList_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.RealStringList_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_RealStringList
    __del__ = lambda self : None;
RealStringList_swigregister = _modshogun.RealStringList_swigregister
RealStringList_swigregister(RealStringList)

class BoolVector(_object):
    """Proxy of C++ shogun::SGVector<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoolVector
        __init__(self, v, len, free_vec=False) -> BoolVector
        __init__(self, v, len) -> BoolVector
        __init__(self, len, free_vec=False) -> BoolVector
        __init__(self, len) -> BoolVector
        __init__(self, orig) -> BoolVector
        """
        this = _modshogun.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_BoolVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> BoolVector
        get_vector(src) -> BoolVector
        """
        return _modshogun.BoolVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.BoolVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.BoolVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.BoolVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.BoolVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.BoolVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> bool const &"""
        return _modshogun.BoolVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.BoolVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.BoolVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.BoolVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.BoolVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.BoolVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.BoolVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.BoolVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.BoolVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.BoolVector_vector_get, _modshogun.BoolVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.BoolVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.BoolVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.BoolVector_vlen_get, _modshogun.BoolVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.BoolVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.BoolVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.BoolVector_do_free_get, _modshogun.BoolVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.BoolVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.BoolVector_load_serializable(self, *args)

BoolVector_swigregister = _modshogun.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

def BoolVector_get_vector(*args):
  """
    get_vector(src, own=True) -> BoolVector
    BoolVector_get_vector(src) -> BoolVector
    """
  return _modshogun.BoolVector_get_vector(*args)

class CharVector(_object):
    """Proxy of C++ shogun::SGVector<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CharVector
        __init__(self, v, len, free_vec=False) -> CharVector
        __init__(self, v, len) -> CharVector
        __init__(self, len, free_vec=False) -> CharVector
        __init__(self, len) -> CharVector
        __init__(self, orig) -> CharVector
        """
        this = _modshogun.new_CharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CharVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> CharVector
        get_vector(src) -> CharVector
        """
        return _modshogun.CharVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.CharVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.CharVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.CharVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.CharVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.CharVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> str const &"""
        return _modshogun.CharVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.CharVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.CharVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.CharVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.CharVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.CharVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.CharVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.CharVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.CharVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.CharVector_vector_get, _modshogun.CharVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.CharVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.CharVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.CharVector_vlen_get, _modshogun.CharVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.CharVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.CharVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.CharVector_do_free_get, _modshogun.CharVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CharVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CharVector_load_serializable(self, *args)

CharVector_swigregister = _modshogun.CharVector_swigregister
CharVector_swigregister(CharVector)

def CharVector_get_vector(*args):
  """
    get_vector(src, own=True) -> CharVector
    CharVector_get_vector(src) -> CharVector
    """
  return _modshogun.CharVector_get_vector(*args)

class ByteVector(_object):
    """Proxy of C++ shogun::SGVector<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteVector
        __init__(self, v, len, free_vec=False) -> ByteVector
        __init__(self, v, len) -> ByteVector
        __init__(self, len, free_vec=False) -> ByteVector
        __init__(self, len) -> ByteVector
        __init__(self, orig) -> ByteVector
        """
        this = _modshogun.new_ByteVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ByteVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> ByteVector
        get_vector(src) -> ByteVector
        """
        return _modshogun.ByteVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.ByteVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.ByteVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.ByteVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.ByteVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.ByteVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> unsigned str const &"""
        return _modshogun.ByteVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.ByteVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.ByteVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.ByteVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.ByteVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.ByteVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.ByteVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.ByteVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.ByteVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.ByteVector_vector_get, _modshogun.ByteVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.ByteVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.ByteVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.ByteVector_vlen_get, _modshogun.ByteVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.ByteVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ByteVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ByteVector_do_free_get, _modshogun.ByteVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ByteVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ByteVector_load_serializable(self, *args)

ByteVector_swigregister = _modshogun.ByteVector_swigregister
ByteVector_swigregister(ByteVector)

def ByteVector_get_vector(*args):
  """
    get_vector(src, own=True) -> ByteVector
    ByteVector_get_vector(src) -> ByteVector
    """
  return _modshogun.ByteVector_get_vector(*args)

class WordVector(_object):
    """Proxy of C++ shogun::SGVector<(uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WordVector
        __init__(self, v, len, free_vec=False) -> WordVector
        __init__(self, v, len) -> WordVector
        __init__(self, len, free_vec=False) -> WordVector
        __init__(self, len) -> WordVector
        __init__(self, orig) -> WordVector
        """
        this = _modshogun.new_WordVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WordVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> WordVector
        get_vector(src) -> WordVector
        """
        return _modshogun.WordVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.WordVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.WordVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.WordVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.WordVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.WordVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> unsigned short const &"""
        return _modshogun.WordVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.WordVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.WordVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.WordVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.WordVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.WordVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.WordVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.WordVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.WordVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.WordVector_vector_get, _modshogun.WordVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.WordVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.WordVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.WordVector_vlen_get, _modshogun.WordVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.WordVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.WordVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.WordVector_do_free_get, _modshogun.WordVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.WordVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.WordVector_load_serializable(self, *args)

WordVector_swigregister = _modshogun.WordVector_swigregister
WordVector_swigregister(WordVector)

def WordVector_get_vector(*args):
  """
    get_vector(src, own=True) -> WordVector
    WordVector_get_vector(src) -> WordVector
    """
  return _modshogun.WordVector_get_vector(*args)

class IntVector(_object):
    """Proxy of C++ shogun::SGVector<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntVector
        __init__(self, v, len, free_vec=False) -> IntVector
        __init__(self, v, len) -> IntVector
        __init__(self, len, free_vec=False) -> IntVector
        __init__(self, len) -> IntVector
        __init__(self, orig) -> IntVector
        """
        this = _modshogun.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_IntVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> IntVector
        get_vector(src) -> IntVector
        """
        return _modshogun.IntVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.IntVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.IntVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.IntVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.IntVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.IntVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> int const &"""
        return _modshogun.IntVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.IntVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.IntVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.IntVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.IntVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.IntVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.IntVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.IntVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.IntVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.IntVector_vector_get, _modshogun.IntVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.IntVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.IntVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.IntVector_vlen_get, _modshogun.IntVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.IntVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.IntVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.IntVector_do_free_get, _modshogun.IntVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.IntVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.IntVector_load_serializable(self, *args)

IntVector_swigregister = _modshogun.IntVector_swigregister
IntVector_swigregister(IntVector)

def IntVector_get_vector(*args):
  """
    get_vector(src, own=True) -> IntVector
    IntVector_get_vector(src) -> IntVector
    """
  return _modshogun.IntVector_get_vector(*args)

class LongIntVector(_object):
    """Proxy of C++ shogun::SGVector<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LongIntVector
        __init__(self, v, len, free_vec=False) -> LongIntVector
        __init__(self, v, len) -> LongIntVector
        __init__(self, len, free_vec=False) -> LongIntVector
        __init__(self, len) -> LongIntVector
        __init__(self, orig) -> LongIntVector
        """
        this = _modshogun.new_LongIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LongIntVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> LongIntVector
        get_vector(src) -> LongIntVector
        """
        return _modshogun.LongIntVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.LongIntVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.LongIntVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.LongIntVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.LongIntVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.LongIntVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> long const &"""
        return _modshogun.LongIntVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.LongIntVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.LongIntVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.LongIntVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.LongIntVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.LongIntVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.LongIntVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.LongIntVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.LongIntVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.LongIntVector_vector_get, _modshogun.LongIntVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.LongIntVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.LongIntVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.LongIntVector_vlen_get, _modshogun.LongIntVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.LongIntVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.LongIntVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.LongIntVector_do_free_get, _modshogun.LongIntVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.LongIntVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.LongIntVector_load_serializable(self, *args)

LongIntVector_swigregister = _modshogun.LongIntVector_swigregister
LongIntVector_swigregister(LongIntVector)

def LongIntVector_get_vector(*args):
  """
    get_vector(src, own=True) -> LongIntVector
    LongIntVector_get_vector(src) -> LongIntVector
    """
  return _modshogun.LongIntVector_get_vector(*args)

class ULongIntVector(_object):
    """Proxy of C++ shogun::SGVector<(uint64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ULongIntVector
        __init__(self, v, len, free_vec=False) -> ULongIntVector
        __init__(self, v, len) -> ULongIntVector
        __init__(self, len, free_vec=False) -> ULongIntVector
        __init__(self, len) -> ULongIntVector
        __init__(self, orig) -> ULongIntVector
        """
        this = _modshogun.new_ULongIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ULongIntVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> ULongIntVector
        get_vector(src) -> ULongIntVector
        """
        return _modshogun.ULongIntVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.ULongIntVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.ULongIntVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.ULongIntVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.ULongIntVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.ULongIntVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> unsigned long const &"""
        return _modshogun.ULongIntVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.ULongIntVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.ULongIntVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.ULongIntVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.ULongIntVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.ULongIntVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.ULongIntVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.ULongIntVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.ULongIntVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.ULongIntVector_vector_get, _modshogun.ULongIntVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.ULongIntVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.ULongIntVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.ULongIntVector_vlen_get, _modshogun.ULongIntVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.ULongIntVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ULongIntVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ULongIntVector_do_free_get, _modshogun.ULongIntVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntVector_load_serializable(self, *args)

ULongIntVector_swigregister = _modshogun.ULongIntVector_swigregister
ULongIntVector_swigregister(ULongIntVector)

def ULongIntVector_get_vector(*args):
  """
    get_vector(src, own=True) -> ULongIntVector
    ULongIntVector_get_vector(src) -> ULongIntVector
    """
  return _modshogun.ULongIntVector_get_vector(*args)

class ShortRealVector(_object):
    """Proxy of C++ shogun::SGVector<(float32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortRealVector
        __init__(self, v, len, free_vec=False) -> ShortRealVector
        __init__(self, v, len) -> ShortRealVector
        __init__(self, len, free_vec=False) -> ShortRealVector
        __init__(self, len) -> ShortRealVector
        __init__(self, orig) -> ShortRealVector
        """
        this = _modshogun.new_ShortRealVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ShortRealVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> ShortRealVector
        get_vector(src) -> ShortRealVector
        """
        return _modshogun.ShortRealVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.ShortRealVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.ShortRealVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.ShortRealVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.ShortRealVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.ShortRealVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> float const &"""
        return _modshogun.ShortRealVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.ShortRealVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.ShortRealVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.ShortRealVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.ShortRealVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.ShortRealVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.ShortRealVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.ShortRealVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.ShortRealVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.ShortRealVector_vector_get, _modshogun.ShortRealVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.ShortRealVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.ShortRealVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.ShortRealVector_vlen_get, _modshogun.ShortRealVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.ShortRealVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ShortRealVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ShortRealVector_do_free_get, _modshogun.ShortRealVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealVector_load_serializable(self, *args)

ShortRealVector_swigregister = _modshogun.ShortRealVector_swigregister
ShortRealVector_swigregister(ShortRealVector)

def ShortRealVector_get_vector(*args):
  """
    get_vector(src, own=True) -> ShortRealVector
    ShortRealVector_get_vector(src) -> ShortRealVector
    """
  return _modshogun.ShortRealVector_get_vector(*args)

class RealVector(_object):
    """Proxy of C++ shogun::SGVector<(float64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealVector
        __init__(self, v, len, free_vec=False) -> RealVector
        __init__(self, v, len) -> RealVector
        __init__(self, len, free_vec=False) -> RealVector
        __init__(self, len) -> RealVector
        __init__(self, orig) -> RealVector
        """
        this = _modshogun.new_RealVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RealVector
    __del__ = lambda self : None;
    def get_vector(*args):
        """
        get_vector(src, own=True) -> RealVector
        get_vector(src) -> RealVector
        """
        return _modshogun.RealVector_get_vector(*args)

    if _newclass:get_vector = staticmethod(get_vector)
    __swig_getmethods__["get_vector"] = lambda x: get_vector
    def zero(self):
        """zero(self)"""
        return _modshogun.RealVector_zero(self)

    def set_const(self, *args):
        """set_const(self, const_elem)"""
        return _modshogun.RealVector_set_const(self, *args)

    def range_fill(self, start=0):
        """
        range_fill(self, start=0)
        range_fill(self)
        """
        return _modshogun.RealVector_range_fill(self, start)

    def random(self, *args):
        """random(self, min_value, max_value)"""
        return _modshogun.RealVector_random(self, *args)

    def randperm(self):
        """randperm(self)"""
        return _modshogun.RealVector_randperm(self)

    def get_element(self, *args):
        """get_element(self, index) -> float const &"""
        return _modshogun.RealVector_get_element(self, *args)

    def set_element(self, *args):
        """set_element(self, p_element, index)"""
        return _modshogun.RealVector_set_element(self, *args)

    def resize_vector(self, *args):
        """resize_vector(self, n)"""
        return _modshogun.RealVector_resize_vector(self, *args)

    def free_vector(self):
        """free_vector(self)"""
        return _modshogun.RealVector_free_vector(self)

    def destroy_vector(self):
        """destroy_vector(self)"""
        return _modshogun.RealVector_destroy_vector(self)

    def display_size(self):
        """display_size(self)"""
        return _modshogun.RealVector_display_size(self)

    def display_vector(self):
        """display_vector(self)"""
        return _modshogun.RealVector_display_vector(self)

    __swig_setmethods__["vector"] = _modshogun.RealVector_vector_set
    __swig_getmethods__["vector"] = _modshogun.RealVector_vector_get
    if _newclass:vector = _swig_property(_modshogun.RealVector_vector_get, _modshogun.RealVector_vector_set)
    __swig_setmethods__["vlen"] = _modshogun.RealVector_vlen_set
    __swig_getmethods__["vlen"] = _modshogun.RealVector_vlen_get
    if _newclass:vlen = _swig_property(_modshogun.RealVector_vlen_get, _modshogun.RealVector_vlen_set)
    __swig_setmethods__["do_free"] = _modshogun.RealVector_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.RealVector_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.RealVector_do_free_get, _modshogun.RealVector_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.RealVector_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.RealVector_load_serializable(self, *args)

RealVector_swigregister = _modshogun.RealVector_swigregister
RealVector_swigregister(RealVector)

def RealVector_get_vector(*args):
  """
    get_vector(src, own=True) -> RealVector
    RealVector_get_vector(src) -> RealVector
    """
  return _modshogun.RealVector_get_vector(*args)

class BoolMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoolMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> BoolMatrix
        __init__(self, m, nrows, ncols) -> BoolMatrix
        __init__(self, nrows, ncols, free_mat=False) -> BoolMatrix
        __init__(self, nrows, ncols) -> BoolMatrix
        __init__(self, orig) -> BoolMatrix
        """
        this = _modshogun.new_BoolMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_BoolMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.BoolMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.BoolMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.BoolMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.BoolMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.BoolMatrix_matrix_get, _modshogun.BoolMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.BoolMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.BoolMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.BoolMatrix_num_rows_get, _modshogun.BoolMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.BoolMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.BoolMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.BoolMatrix_num_cols_get, _modshogun.BoolMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.BoolMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.BoolMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.BoolMatrix_do_free_get, _modshogun.BoolMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.BoolMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.BoolMatrix_load_serializable(self, *args)

BoolMatrix_swigregister = _modshogun.BoolMatrix_swigregister
BoolMatrix_swigregister(BoolMatrix)

class CharMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CharMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> CharMatrix
        __init__(self, m, nrows, ncols) -> CharMatrix
        __init__(self, nrows, ncols, free_mat=False) -> CharMatrix
        __init__(self, nrows, ncols) -> CharMatrix
        __init__(self, orig) -> CharMatrix
        """
        this = _modshogun.new_CharMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CharMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.CharMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.CharMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.CharMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.CharMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.CharMatrix_matrix_get, _modshogun.CharMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.CharMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.CharMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.CharMatrix_num_rows_get, _modshogun.CharMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.CharMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.CharMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.CharMatrix_num_cols_get, _modshogun.CharMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.CharMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.CharMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.CharMatrix_do_free_get, _modshogun.CharMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CharMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CharMatrix_load_serializable(self, *args)

CharMatrix_swigregister = _modshogun.CharMatrix_swigregister
CharMatrix_swigregister(CharMatrix)

class ByteMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> ByteMatrix
        __init__(self, m, nrows, ncols) -> ByteMatrix
        __init__(self, nrows, ncols, free_mat=False) -> ByteMatrix
        __init__(self, nrows, ncols) -> ByteMatrix
        __init__(self, orig) -> ByteMatrix
        """
        this = _modshogun.new_ByteMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ByteMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.ByteMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.ByteMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.ByteMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.ByteMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.ByteMatrix_matrix_get, _modshogun.ByteMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.ByteMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.ByteMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.ByteMatrix_num_rows_get, _modshogun.ByteMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.ByteMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.ByteMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.ByteMatrix_num_cols_get, _modshogun.ByteMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.ByteMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ByteMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ByteMatrix_do_free_get, _modshogun.ByteMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ByteMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ByteMatrix_load_serializable(self, *args)

ByteMatrix_swigregister = _modshogun.ByteMatrix_swigregister
ByteMatrix_swigregister(ByteMatrix)

class WordMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WordMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> WordMatrix
        __init__(self, m, nrows, ncols) -> WordMatrix
        __init__(self, nrows, ncols, free_mat=False) -> WordMatrix
        __init__(self, nrows, ncols) -> WordMatrix
        __init__(self, orig) -> WordMatrix
        """
        this = _modshogun.new_WordMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WordMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.WordMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.WordMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.WordMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.WordMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.WordMatrix_matrix_get, _modshogun.WordMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.WordMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.WordMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.WordMatrix_num_rows_get, _modshogun.WordMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.WordMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.WordMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.WordMatrix_num_cols_get, _modshogun.WordMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.WordMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.WordMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.WordMatrix_do_free_get, _modshogun.WordMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.WordMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.WordMatrix_load_serializable(self, *args)

WordMatrix_swigregister = _modshogun.WordMatrix_swigregister
WordMatrix_swigregister(WordMatrix)

class IntMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> IntMatrix
        __init__(self, m, nrows, ncols) -> IntMatrix
        __init__(self, nrows, ncols, free_mat=False) -> IntMatrix
        __init__(self, nrows, ncols) -> IntMatrix
        __init__(self, orig) -> IntMatrix
        """
        this = _modshogun.new_IntMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_IntMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.IntMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.IntMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.IntMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.IntMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.IntMatrix_matrix_get, _modshogun.IntMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.IntMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.IntMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.IntMatrix_num_rows_get, _modshogun.IntMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.IntMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.IntMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.IntMatrix_num_cols_get, _modshogun.IntMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.IntMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.IntMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.IntMatrix_do_free_get, _modshogun.IntMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.IntMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.IntMatrix_load_serializable(self, *args)

IntMatrix_swigregister = _modshogun.IntMatrix_swigregister
IntMatrix_swigregister(IntMatrix)

class LongIntMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LongIntMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> LongIntMatrix
        __init__(self, m, nrows, ncols) -> LongIntMatrix
        __init__(self, nrows, ncols, free_mat=False) -> LongIntMatrix
        __init__(self, nrows, ncols) -> LongIntMatrix
        __init__(self, orig) -> LongIntMatrix
        """
        this = _modshogun.new_LongIntMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LongIntMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.LongIntMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.LongIntMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.LongIntMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.LongIntMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.LongIntMatrix_matrix_get, _modshogun.LongIntMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.LongIntMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.LongIntMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.LongIntMatrix_num_rows_get, _modshogun.LongIntMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.LongIntMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.LongIntMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.LongIntMatrix_num_cols_get, _modshogun.LongIntMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.LongIntMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.LongIntMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.LongIntMatrix_do_free_get, _modshogun.LongIntMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.LongIntMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.LongIntMatrix_load_serializable(self, *args)

LongIntMatrix_swigregister = _modshogun.LongIntMatrix_swigregister
LongIntMatrix_swigregister(LongIntMatrix)

class ULongIntMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(uint64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ULongIntMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> ULongIntMatrix
        __init__(self, m, nrows, ncols) -> ULongIntMatrix
        __init__(self, nrows, ncols, free_mat=False) -> ULongIntMatrix
        __init__(self, nrows, ncols) -> ULongIntMatrix
        __init__(self, orig) -> ULongIntMatrix
        """
        this = _modshogun.new_ULongIntMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ULongIntMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.ULongIntMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.ULongIntMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.ULongIntMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.ULongIntMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.ULongIntMatrix_matrix_get, _modshogun.ULongIntMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.ULongIntMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.ULongIntMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.ULongIntMatrix_num_rows_get, _modshogun.ULongIntMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.ULongIntMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.ULongIntMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.ULongIntMatrix_num_cols_get, _modshogun.ULongIntMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.ULongIntMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ULongIntMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ULongIntMatrix_do_free_get, _modshogun.ULongIntMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntMatrix_load_serializable(self, *args)

ULongIntMatrix_swigregister = _modshogun.ULongIntMatrix_swigregister
ULongIntMatrix_swigregister(ULongIntMatrix)

class ShortRealMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(float32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortRealMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> ShortRealMatrix
        __init__(self, m, nrows, ncols) -> ShortRealMatrix
        __init__(self, nrows, ncols, free_mat=False) -> ShortRealMatrix
        __init__(self, nrows, ncols) -> ShortRealMatrix
        __init__(self, orig) -> ShortRealMatrix
        """
        this = _modshogun.new_ShortRealMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ShortRealMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.ShortRealMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.ShortRealMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.ShortRealMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.ShortRealMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.ShortRealMatrix_matrix_get, _modshogun.ShortRealMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.ShortRealMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.ShortRealMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.ShortRealMatrix_num_rows_get, _modshogun.ShortRealMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.ShortRealMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.ShortRealMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.ShortRealMatrix_num_cols_get, _modshogun.ShortRealMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.ShortRealMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.ShortRealMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.ShortRealMatrix_do_free_get, _modshogun.ShortRealMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealMatrix_load_serializable(self, *args)

ShortRealMatrix_swigregister = _modshogun.ShortRealMatrix_swigregister
ShortRealMatrix_swigregister(ShortRealMatrix)

class RealMatrix(_object):
    """Proxy of C++ shogun::SGMatrix<(float64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealMatrix
        __init__(self, m, nrows, ncols, free_mat=False) -> RealMatrix
        __init__(self, m, nrows, ncols) -> RealMatrix
        __init__(self, nrows, ncols, free_mat=False) -> RealMatrix
        __init__(self, nrows, ncols) -> RealMatrix
        __init__(self, orig) -> RealMatrix
        """
        this = _modshogun.new_RealMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RealMatrix
    __del__ = lambda self : None;
    def free_matrix(self):
        """free_matrix(self)"""
        return _modshogun.RealMatrix_free_matrix(self)

    def destroy_matrix(self):
        """destroy_matrix(self)"""
        return _modshogun.RealMatrix_destroy_matrix(self)

    __swig_setmethods__["matrix"] = _modshogun.RealMatrix_matrix_set
    __swig_getmethods__["matrix"] = _modshogun.RealMatrix_matrix_get
    if _newclass:matrix = _swig_property(_modshogun.RealMatrix_matrix_get, _modshogun.RealMatrix_matrix_set)
    __swig_setmethods__["num_rows"] = _modshogun.RealMatrix_num_rows_set
    __swig_getmethods__["num_rows"] = _modshogun.RealMatrix_num_rows_get
    if _newclass:num_rows = _swig_property(_modshogun.RealMatrix_num_rows_get, _modshogun.RealMatrix_num_rows_set)
    __swig_setmethods__["num_cols"] = _modshogun.RealMatrix_num_cols_set
    __swig_getmethods__["num_cols"] = _modshogun.RealMatrix_num_cols_get
    if _newclass:num_cols = _swig_property(_modshogun.RealMatrix_num_cols_get, _modshogun.RealMatrix_num_cols_set)
    __swig_setmethods__["do_free"] = _modshogun.RealMatrix_do_free_set
    __swig_getmethods__["do_free"] = _modshogun.RealMatrix_do_free_get
    if _newclass:do_free = _swig_property(_modshogun.RealMatrix_do_free_get, _modshogun.RealMatrix_do_free_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.RealMatrix_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.RealMatrix_load_serializable(self, *args)

RealMatrix_swigregister = _modshogun.RealMatrix_swigregister
RealMatrix_swigregister(RealMatrix)

class BoolNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BoolNDArray
        __init__(self, a, d, nd) -> BoolNDArray
        __init__(self, orig) -> BoolNDArray
        """
        this = _modshogun.new_BoolNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.BoolNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.BoolNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.BoolNDArray_array_get, _modshogun.BoolNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.BoolNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.BoolNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.BoolNDArray_dims_get, _modshogun.BoolNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.BoolNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.BoolNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.BoolNDArray_num_dims_get, _modshogun.BoolNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.BoolNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.BoolNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_BoolNDArray
    __del__ = lambda self : None;
BoolNDArray_swigregister = _modshogun.BoolNDArray_swigregister
BoolNDArray_swigregister(BoolNDArray)

class CharNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CharNDArray
        __init__(self, a, d, nd) -> CharNDArray
        __init__(self, orig) -> CharNDArray
        """
        this = _modshogun.new_CharNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.CharNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.CharNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.CharNDArray_array_get, _modshogun.CharNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.CharNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.CharNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.CharNDArray_dims_get, _modshogun.CharNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.CharNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.CharNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.CharNDArray_num_dims_get, _modshogun.CharNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CharNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CharNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_CharNDArray
    __del__ = lambda self : None;
CharNDArray_swigregister = _modshogun.CharNDArray_swigregister
CharNDArray_swigregister(CharNDArray)

class WordNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WordNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WordNDArray
        __init__(self, a, d, nd) -> WordNDArray
        __init__(self, orig) -> WordNDArray
        """
        this = _modshogun.new_WordNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.WordNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.WordNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.WordNDArray_array_get, _modshogun.WordNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.WordNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.WordNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.WordNDArray_dims_get, _modshogun.WordNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.WordNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.WordNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.WordNDArray_num_dims_get, _modshogun.WordNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.WordNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.WordNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_WordNDArray
    __del__ = lambda self : None;
WordNDArray_swigregister = _modshogun.WordNDArray_swigregister
WordNDArray_swigregister(WordNDArray)

class ByteNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ByteNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ByteNDArray
        __init__(self, a, d, nd) -> ByteNDArray
        __init__(self, orig) -> ByteNDArray
        """
        this = _modshogun.new_ByteNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.ByteNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.ByteNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.ByteNDArray_array_get, _modshogun.ByteNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.ByteNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.ByteNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.ByteNDArray_dims_get, _modshogun.ByteNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.ByteNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.ByteNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.ByteNDArray_num_dims_get, _modshogun.ByteNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ByteNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ByteNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ByteNDArray
    __del__ = lambda self : None;
ByteNDArray_swigregister = _modshogun.ByteNDArray_swigregister
ByteNDArray_swigregister(ByteNDArray)

class IntNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntNDArray
        __init__(self, a, d, nd) -> IntNDArray
        __init__(self, orig) -> IntNDArray
        """
        this = _modshogun.new_IntNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.IntNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.IntNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.IntNDArray_array_get, _modshogun.IntNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.IntNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.IntNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.IntNDArray_dims_get, _modshogun.IntNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.IntNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.IntNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.IntNDArray_num_dims_get, _modshogun.IntNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.IntNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.IntNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_IntNDArray
    __del__ = lambda self : None;
IntNDArray_swigregister = _modshogun.IntNDArray_swigregister
IntNDArray_swigregister(IntNDArray)

class LongIntNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LongIntNDArray
        __init__(self, a, d, nd) -> LongIntNDArray
        __init__(self, orig) -> LongIntNDArray
        """
        this = _modshogun.new_LongIntNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.LongIntNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.LongIntNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.LongIntNDArray_array_get, _modshogun.LongIntNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.LongIntNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.LongIntNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.LongIntNDArray_dims_get, _modshogun.LongIntNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.LongIntNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.LongIntNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.LongIntNDArray_num_dims_get, _modshogun.LongIntNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.LongIntNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.LongIntNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_LongIntNDArray
    __del__ = lambda self : None;
LongIntNDArray_swigregister = _modshogun.LongIntNDArray_swigregister
LongIntNDArray_swigregister(LongIntNDArray)

class ULongIntNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(uint64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ULongIntNDArray
        __init__(self, a, d, nd) -> ULongIntNDArray
        __init__(self, orig) -> ULongIntNDArray
        """
        this = _modshogun.new_ULongIntNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.ULongIntNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.ULongIntNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.ULongIntNDArray_array_get, _modshogun.ULongIntNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.ULongIntNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.ULongIntNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.ULongIntNDArray_dims_get, _modshogun.ULongIntNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.ULongIntNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.ULongIntNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.ULongIntNDArray_num_dims_get, _modshogun.ULongIntNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ULongIntNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ULongIntNDArray
    __del__ = lambda self : None;
ULongIntNDArray_swigregister = _modshogun.ULongIntNDArray_swigregister
ULongIntNDArray_swigregister(ULongIntNDArray)

class ShortRealNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(float32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortRealNDArray
        __init__(self, a, d, nd) -> ShortRealNDArray
        __init__(self, orig) -> ShortRealNDArray
        """
        this = _modshogun.new_ShortRealNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.ShortRealNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.ShortRealNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.ShortRealNDArray_array_get, _modshogun.ShortRealNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.ShortRealNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.ShortRealNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.ShortRealNDArray_dims_get, _modshogun.ShortRealNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.ShortRealNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.ShortRealNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.ShortRealNDArray_num_dims_get, _modshogun.ShortRealNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.ShortRealNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_ShortRealNDArray
    __del__ = lambda self : None;
ShortRealNDArray_swigregister = _modshogun.ShortRealNDArray_swigregister
ShortRealNDArray_swigregister(ShortRealNDArray)

class RealNDArray(_object):
    """Proxy of C++ shogun::SGNDArray<(float64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealNDArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RealNDArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealNDArray
        __init__(self, a, d, nd) -> RealNDArray
        __init__(self, orig) -> RealNDArray
        """
        this = _modshogun.new_RealNDArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["array"] = _modshogun.RealNDArray_array_set
    __swig_getmethods__["array"] = _modshogun.RealNDArray_array_get
    if _newclass:array = _swig_property(_modshogun.RealNDArray_array_get, _modshogun.RealNDArray_array_set)
    __swig_setmethods__["dims"] = _modshogun.RealNDArray_dims_set
    __swig_getmethods__["dims"] = _modshogun.RealNDArray_dims_get
    if _newclass:dims = _swig_property(_modshogun.RealNDArray_dims_get, _modshogun.RealNDArray_dims_set)
    __swig_setmethods__["num_dims"] = _modshogun.RealNDArray_num_dims_set
    __swig_getmethods__["num_dims"] = _modshogun.RealNDArray_num_dims_get
    if _newclass:num_dims = _swig_property(_modshogun.RealNDArray_num_dims_get, _modshogun.RealNDArray_num_dims_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.RealNDArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.RealNDArray_load_serializable(self, *args)

    __swig_destroy__ = _modshogun.delete_RealNDArray
    __del__ = lambda self : None;
RealNDArray_swigregister = _modshogun.RealNDArray_swigregister
RealNDArray_swigregister(RealNDArray)

class DynamicCharArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicCharArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicCharArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicCharArray
        __init__(self) -> DynamicCharArray
        """
        this = _modshogun.new_DynamicCharArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicCharArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicCharArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicCharArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicCharArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> str"""
        return _modshogun.DynamicCharArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> str"""
        return _modshogun.DynamicCharArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicCharArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicCharArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicCharArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicCharArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicCharArray_pop_back(self)

    def back(self):
        """back(self) -> str"""
        return _modshogun.DynamicCharArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicCharArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicCharArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicCharArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> str *"""
        return _modshogun.DynamicCharArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicCharArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicCharArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicCharArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicCharArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicCharArray_load_serializable(self, *args)

DynamicCharArray_swigregister = _modshogun.DynamicCharArray_swigregister
DynamicCharArray_swigregister(DynamicCharArray)

class DynamicByteArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicByteArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicByteArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicByteArray
        __init__(self) -> DynamicByteArray
        """
        this = _modshogun.new_DynamicByteArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicByteArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicByteArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicByteArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicByteArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> unsigned str"""
        return _modshogun.DynamicByteArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> unsigned str"""
        return _modshogun.DynamicByteArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicByteArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicByteArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicByteArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicByteArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicByteArray_pop_back(self)

    def back(self):
        """back(self) -> unsigned str"""
        return _modshogun.DynamicByteArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicByteArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicByteArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicByteArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> unsigned str *"""
        return _modshogun.DynamicByteArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicByteArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicByteArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicByteArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicByteArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicByteArray_load_serializable(self, *args)

DynamicByteArray_swigregister = _modshogun.DynamicByteArray_swigregister
DynamicByteArray_swigregister(DynamicByteArray)

class DynamicWordArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicWordArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicWordArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicWordArray
        __init__(self) -> DynamicWordArray
        """
        this = _modshogun.new_DynamicWordArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicWordArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicWordArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicWordArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicWordArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> unsigned short"""
        return _modshogun.DynamicWordArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> unsigned short"""
        return _modshogun.DynamicWordArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicWordArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicWordArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicWordArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicWordArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicWordArray_pop_back(self)

    def back(self):
        """back(self) -> unsigned short"""
        return _modshogun.DynamicWordArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicWordArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicWordArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicWordArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> unsigned short *"""
        return _modshogun.DynamicWordArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicWordArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicWordArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicWordArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicWordArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicWordArray_load_serializable(self, *args)

DynamicWordArray_swigregister = _modshogun.DynamicWordArray_swigregister
DynamicWordArray_swigregister(DynamicWordArray)

class DynamicIntArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicIntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicIntArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicIntArray
        __init__(self) -> DynamicIntArray
        """
        this = _modshogun.new_DynamicIntArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicIntArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicIntArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicIntArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicIntArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> int"""
        return _modshogun.DynamicIntArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> int"""
        return _modshogun.DynamicIntArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicIntArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicIntArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicIntArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicIntArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicIntArray_pop_back(self)

    def back(self):
        """back(self) -> int"""
        return _modshogun.DynamicIntArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicIntArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicIntArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicIntArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> int *"""
        return _modshogun.DynamicIntArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicIntArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicIntArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicIntArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicIntArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicIntArray_load_serializable(self, *args)

DynamicIntArray_swigregister = _modshogun.DynamicIntArray_swigregister
DynamicIntArray_swigregister(DynamicIntArray)

class DynamicLongArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicLongArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicLongArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicLongArray
        __init__(self) -> DynamicLongArray
        """
        this = _modshogun.new_DynamicLongArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicLongArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicLongArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicLongArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicLongArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> long"""
        return _modshogun.DynamicLongArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> long"""
        return _modshogun.DynamicLongArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicLongArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicLongArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicLongArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicLongArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicLongArray_pop_back(self)

    def back(self):
        """back(self) -> long"""
        return _modshogun.DynamicLongArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicLongArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicLongArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicLongArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> long *"""
        return _modshogun.DynamicLongArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicLongArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicLongArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicLongArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicLongArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicLongArray_load_serializable(self, *args)

DynamicLongArray_swigregister = _modshogun.DynamicLongArray_swigregister
DynamicLongArray_swigregister(DynamicLongArray)

class DynamicULongArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicULongArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicULongArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicULongArray
        __init__(self) -> DynamicULongArray
        """
        this = _modshogun.new_DynamicULongArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicULongArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicULongArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicULongArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicULongArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> unsigned long"""
        return _modshogun.DynamicULongArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> unsigned long"""
        return _modshogun.DynamicULongArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicULongArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicULongArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicULongArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicULongArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicULongArray_pop_back(self)

    def back(self):
        """back(self) -> unsigned long"""
        return _modshogun.DynamicULongArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicULongArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicULongArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicULongArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> unsigned long *"""
        return _modshogun.DynamicULongArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicULongArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicULongArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicULongArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicULongArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicULongArray_load_serializable(self, *args)

DynamicULongArray_swigregister = _modshogun.DynamicULongArray_swigregister
DynamicULongArray_swigregister(DynamicULongArray)

class DynamicShortRealArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicShortRealArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicShortRealArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicShortRealArray
        __init__(self) -> DynamicShortRealArray
        """
        this = _modshogun.new_DynamicShortRealArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicShortRealArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicShortRealArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicShortRealArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicShortRealArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> float"""
        return _modshogun.DynamicShortRealArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> float"""
        return _modshogun.DynamicShortRealArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicShortRealArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicShortRealArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicShortRealArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicShortRealArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicShortRealArray_pop_back(self)

    def back(self):
        """back(self) -> float"""
        return _modshogun.DynamicShortRealArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicShortRealArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicShortRealArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicShortRealArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> float *"""
        return _modshogun.DynamicShortRealArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicShortRealArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicShortRealArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicShortRealArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicShortRealArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicShortRealArray_load_serializable(self, *args)

DynamicShortRealArray_swigregister = _modshogun.DynamicShortRealArray_swigregister
DynamicShortRealArray_swigregister(DynamicShortRealArray)

class DynamicRealArray(SGObject):
    """Proxy of C++ shogun::CDynamicArray<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicRealArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicRealArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicRealArray
        __init__(self) -> DynamicRealArray
        """
        this = _modshogun.new_DynamicRealArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicRealArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicRealArray_set_granularity(self, *args)

    def get_array_size(self):
        """get_array_size(self) ->  int"""
        return _modshogun.DynamicRealArray_get_array_size(self)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicRealArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> float"""
        return _modshogun.DynamicRealArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> float"""
        return _modshogun.DynamicRealArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicRealArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicRealArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicRealArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicRealArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicRealArray_pop_back(self)

    def back(self):
        """back(self) -> float"""
        return _modshogun.DynamicRealArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicRealArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicRealArray_delete_element(self, *args)

    def resize_array(self, *args):
        """resize_array(self, n) -> bool"""
        return _modshogun.DynamicRealArray_resize_array(self, *args)

    def get_array(self):
        """get_array(self) -> float *"""
        return _modshogun.DynamicRealArray_get_array(self)

    def set_array(self, *args):
        """set_array(self, p_array, p_num_elements, array_size)"""
        return _modshogun.DynamicRealArray_set_array(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicRealArray_clear_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicRealArray_shuffle(self)

    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.DynamicRealArray_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.DynamicRealArray_load_serializable(self, *args)

DynamicRealArray_swigregister = _modshogun.DynamicRealArray_swigregister
DynamicRealArray_swigregister(DynamicRealArray)

class Hash(SGObject):
    """Proxy of C++ shogun::CHash class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hash, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hash, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Hash"""
        this = _modshogun.new_Hash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Hash
    __del__ = lambda self : None;
    def crc32(*args):
        """crc32(data, len) -> int"""
        return _modshogun.Hash_crc32(*args)

    if _newclass:crc32 = staticmethod(crc32)
    __swig_getmethods__["crc32"] = lambda x: crc32
    def MD5(*args):
        """MD5(x, l, buf)"""
        return _modshogun.Hash_MD5(*args)

    if _newclass:MD5 = staticmethod(MD5)
    __swig_getmethods__["MD5"] = lambda x: MD5
    def MurmurHash2(*args):
        """MurmurHash2(data, len, seed) -> int"""
        return _modshogun.Hash_MurmurHash2(*args)

    if _newclass:MurmurHash2 = staticmethod(MurmurHash2)
    __swig_getmethods__["MurmurHash2"] = lambda x: MurmurHash2
    def IncrementalMurmurHash2(*args):
        """IncrementalMurmurHash2(data, h) -> int"""
        return _modshogun.Hash_IncrementalMurmurHash2(*args)

    if _newclass:IncrementalMurmurHash2 = staticmethod(IncrementalMurmurHash2)
    __swig_getmethods__["IncrementalMurmurHash2"] = lambda x: IncrementalMurmurHash2
    def MurmurHashString(*args):
        """MurmurHashString(s, h) -> int"""
        return _modshogun.Hash_MurmurHashString(*args)

    if _newclass:MurmurHashString = staticmethod(MurmurHashString)
    __swig_getmethods__["MurmurHashString"] = lambda x: MurmurHashString
Hash_swigregister = _modshogun.Hash_swigregister
Hash_swigregister(Hash)

def Hash_crc32(*args):
  """Hash_crc32(data, len) -> int"""
  return _modshogun.Hash_crc32(*args)

def Hash_MD5(*args):
  """Hash_MD5(x, l, buf)"""
  return _modshogun.Hash_MD5(*args)

def Hash_MurmurHash2(*args):
  """Hash_MurmurHash2(data, len, seed) -> int"""
  return _modshogun.Hash_MurmurHash2(*args)

def Hash_IncrementalMurmurHash2(*args):
  """Hash_IncrementalMurmurHash2(data, h) -> int"""
  return _modshogun.Hash_IncrementalMurmurHash2(*args)

def Hash_MurmurHashString(*args):
  """Hash_MurmurHashString(s, h) -> int"""
  return _modshogun.Hash_MurmurHashString(*args)

class ListElement(SGObject):
    """Proxy of C++ shogun::CListElement class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ListElement
        __init__(self, p_data, p_prev=None, p_next=None) -> ListElement
        __init__(self, p_data, p_prev=None) -> ListElement
        __init__(self, p_data) -> ListElement
        """
        this = _modshogun.new_ListElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ListElement
    __del__ = lambda self : None;
    __swig_setmethods__["next"] = _modshogun.ListElement_next_set
    __swig_getmethods__["next"] = _modshogun.ListElement_next_get
    if _newclass:next = _swig_property(_modshogun.ListElement_next_get, _modshogun.ListElement_next_set)
    __swig_setmethods__["prev"] = _modshogun.ListElement_prev_set
    __swig_getmethods__["prev"] = _modshogun.ListElement_prev_get
    if _newclass:prev = _swig_property(_modshogun.ListElement_prev_get, _modshogun.ListElement_prev_set)
    __swig_setmethods__["data"] = _modshogun.ListElement_data_set
    __swig_getmethods__["data"] = _modshogun.ListElement_data_get
    if _newclass:data = _swig_property(_modshogun.ListElement_data_get, _modshogun.ListElement_data_set)
ListElement_swigregister = _modshogun.ListElement_swigregister
ListElement_swigregister(ListElement)

class List(SGObject):
    """Proxy of C++ shogun::CList class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, List, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, List, name)
    __repr__ = _swig_repr
    def __init__(self, p_delete_data=False): 
        """
        __init__(self, p_delete_data=False) -> List
        __init__(self) -> List
        """
        this = _modshogun.new_List(p_delete_data)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_List
    __del__ = lambda self : None;
    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.List_get_num_elements(self)

    def get_first_element(self, *args):
        """
        get_first_element(self) -> SGObject
        get_first_element(self, p_current) -> SGObject
        """
        return _modshogun.List_get_first_element(self, *args)

    def get_last_element(self, *args):
        """
        get_last_element(self) -> SGObject
        get_last_element(self, p_current) -> SGObject
        """
        return _modshogun.List_get_last_element(self, *args)

    def get_next_element(self, *args):
        """
        get_next_element(self) -> SGObject
        get_next_element(self, p_current) -> SGObject
        """
        return _modshogun.List_get_next_element(self, *args)

    def get_previous_element(self, *args):
        """
        get_previous_element(self) -> SGObject
        get_previous_element(self, p_current) -> SGObject
        """
        return _modshogun.List_get_previous_element(self, *args)

    def get_current_element(self, *args):
        """
        get_current_element(self) -> SGObject
        get_current_element(self, p_current) -> SGObject
        """
        return _modshogun.List_get_current_element(self, *args)

    def append_element(self, *args):
        """append_element(self, data) -> bool"""
        return _modshogun.List_append_element(self, *args)

    def append_element_at_listend(self, *args):
        """append_element_at_listend(self, data) -> bool"""
        return _modshogun.List_append_element_at_listend(self, *args)

    def insert_element(self, *args):
        """insert_element(self, data) -> bool"""
        return _modshogun.List_insert_element(self, *args)

    def delete_element(self):
        """delete_element(self) -> SGObject"""
        return _modshogun.List_delete_element(self)

    def load_serializable_post(self):
        """load_serializable_post(self)"""
        return _modshogun.List_load_serializable_post(self)

List_swigregister = _modshogun.List_swigregister
List_swigregister(List)

class Signal(SGObject):
    """Proxy of C++ shogun::CSignal class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Signal, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Signal, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Signal"""
        this = _modshogun.new_Signal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Signal
    __del__ = lambda self : None;
    def handler(*args):
        """handler(signal)"""
        return _modshogun.Signal_handler(*args)

    if _newclass:handler = staticmethod(handler)
    __swig_getmethods__["handler"] = lambda x: handler
    def set_handler():
        """set_handler() -> bool"""
        return _modshogun.Signal_set_handler()

    if _newclass:set_handler = staticmethod(set_handler)
    __swig_getmethods__["set_handler"] = lambda x: set_handler
    def unset_handler():
        """unset_handler() -> bool"""
        return _modshogun.Signal_unset_handler()

    if _newclass:unset_handler = staticmethod(unset_handler)
    __swig_getmethods__["unset_handler"] = lambda x: unset_handler
    def clear():
        """clear()"""
        return _modshogun.Signal_clear()

    if _newclass:clear = staticmethod(clear)
    __swig_getmethods__["clear"] = lambda x: clear
    def clear_cancel():
        """clear_cancel()"""
        return _modshogun.Signal_clear_cancel()

    if _newclass:clear_cancel = staticmethod(clear_cancel)
    __swig_getmethods__["clear_cancel"] = lambda x: clear_cancel
    def set_cancel(immediately=False):
        """
        set_cancel(immediately=False)
        set_cancel()
        """
        return _modshogun.Signal_set_cancel(immediately)

    if _newclass:set_cancel = staticmethod(set_cancel)
    __swig_getmethods__["set_cancel"] = lambda x: set_cancel
    def cancel_computations():
        """cancel_computations() -> bool"""
        return _modshogun.Signal_cancel_computations()

    if _newclass:cancel_computations = staticmethod(cancel_computations)
    __swig_getmethods__["cancel_computations"] = lambda x: cancel_computations
Signal_swigregister = _modshogun.Signal_swigregister
Signal_swigregister(Signal)

def Signal_handler(*args):
  """Signal_handler(signal)"""
  return _modshogun.Signal_handler(*args)

def Signal_set_handler():
  """Signal_set_handler() -> bool"""
  return _modshogun.Signal_set_handler()

def Signal_unset_handler():
  """Signal_unset_handler() -> bool"""
  return _modshogun.Signal_unset_handler()

def Signal_clear():
  """Signal_clear()"""
  return _modshogun.Signal_clear()

def Signal_clear_cancel():
  """Signal_clear_cancel()"""
  return _modshogun.Signal_clear_cancel()

def Signal_set_cancel(immediately=False):
  """
    set_cancel(immediately=False)
    Signal_set_cancel()
    """
  return _modshogun.Signal_set_cancel(immediately)

def Signal_cancel_computations():
  """Signal_cancel_computations() -> bool"""
  return _modshogun.Signal_cancel_computations()

class Time(SGObject):
    """Proxy of C++ shogun::CTime class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Time, name)
    __repr__ = _swig_repr
    def __init__(self, start=True): 
        """
        __init__(self, start=True) -> Time
        __init__(self) -> Time
        """
        this = _modshogun.new_Time(start)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Time
    __del__ = lambda self : None;
    def cur_runtime(self, verbose=False):
        """
        cur_runtime(self, verbose=False) -> clock_t
        cur_runtime(self) -> clock_t
        """
        return _modshogun.Time_cur_runtime(self, verbose)

    def cur_runtime_diff(self, verbose=False):
        """
        cur_runtime_diff(self, verbose=False) -> clock_t
        cur_runtime_diff(self) -> clock_t
        """
        return _modshogun.Time_cur_runtime_diff(self, verbose)

    def cur_runtime_diff_sec(self, verbose=False):
        """
        cur_runtime_diff_sec(self, verbose=False) -> float
        cur_runtime_diff_sec(self) -> float
        """
        return _modshogun.Time_cur_runtime_diff_sec(self, verbose)

    def start(self, verbose=False):
        """
        start(self, verbose=False) -> float
        start(self) -> float
        """
        return _modshogun.Time_start(self, verbose)

    def cur_time_diff(self, verbose=False):
        """
        cur_time_diff(self, verbose=False) -> float
        cur_time_diff(self) -> float
        """
        return _modshogun.Time_cur_time_diff(self, verbose)

    def time_diff_sec(self, verbose=False):
        """
        time_diff_sec(self, verbose=False) -> float
        time_diff_sec(self) -> float
        """
        return _modshogun.Time_time_diff_sec(self, verbose)

    def stop(self, verbose=False):
        """
        stop(self, verbose=False) -> float
        stop(self) -> float
        """
        return _modshogun.Time_stop(self, verbose)

    def get_runtime():
        """get_runtime() -> float"""
        return _modshogun.Time_get_runtime()

    if _newclass:get_runtime = staticmethod(get_runtime)
    __swig_getmethods__["get_runtime"] = lambda x: get_runtime
    def get_curtime():
        """get_curtime() -> float"""
        return _modshogun.Time_get_curtime()

    if _newclass:get_curtime = staticmethod(get_curtime)
    __swig_getmethods__["get_curtime"] = lambda x: get_curtime
Time_swigregister = _modshogun.Time_swigregister
Time_swigregister(Time)

def Time_get_runtime():
  """Time_get_runtime() -> float"""
  return _modshogun.Time_get_runtime()

def Time_get_curtime():
  """Time_get_curtime() -> float"""
  return _modshogun.Time_get_curtime()

UNCOMPRESSED = _modshogun.UNCOMPRESSED
LZO = _modshogun.LZO
GZIP = _modshogun.GZIP
BZIP2 = _modshogun.BZIP2
LZMA = _modshogun.LZMA
SNAPPY = _modshogun.SNAPPY
class CCompressor(SGObject):
    """Proxy of C++ shogun::CCompressor class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCompressor, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCompressor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CCompressor
        __init__(self, ct) -> CCompressor
        """
        this = _modshogun.new_CCompressor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CCompressor
    __del__ = lambda self : None;
    def compress(self, *args):
        """
        compress(self, uncompressed, uncompressed_size, compressed, compressed_size, level=1)
        compress(self, uncompressed, uncompressed_size, compressed, compressed_size)
        """
        return _modshogun.CCompressor_compress(self, *args)

    def decompress(self, *args):
        """decompress(self, compressed, compressed_size, uncompressed, uncompressed_size)"""
        return _modshogun.CCompressor_decompress(self, *args)

CCompressor_swigregister = _modshogun.CCompressor_swigregister
CCompressor_swigregister(CCompressor)

RNG_SEED_SIZE = _modshogun.RNG_SEED_SIZE
class Math(SGObject):
    """Proxy of C++ shogun::CMath class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Math, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Math, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Math"""
        this = _modshogun.new_Math()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Math
    __del__ = lambda self : None;
    def round(*args):
        """round(d) -> float"""
        return _modshogun.Math_round(*args)

    if _newclass:round = staticmethod(round)
    __swig_getmethods__["round"] = lambda x: round
    def floor(*args):
        """floor(d) -> float"""
        return _modshogun.Math_floor(*args)

    if _newclass:floor = staticmethod(floor)
    __swig_getmethods__["floor"] = lambda x: floor
    def ceil(*args):
        """ceil(d) -> float"""
        return _modshogun.Math_ceil(*args)

    if _newclass:ceil = staticmethod(ceil)
    __swig_getmethods__["ceil"] = lambda x: ceil
    def sqrt(*args):
        """
        sqrt(x) -> float
        sqrt(x) -> float
        sqrt(x) -> floatmax_t
        """
        return _modshogun.Math_sqrt(*args)

    if _newclass:sqrt = staticmethod(sqrt)
    __swig_getmethods__["sqrt"] = lambda x: sqrt
    def invsqrt(*args):
        """invsqrt(x) -> float"""
        return _modshogun.Math_invsqrt(*args)

    if _newclass:invsqrt = staticmethod(invsqrt)
    __swig_getmethods__["invsqrt"] = lambda x: invsqrt
    def powl(*args):
        """powl(x, n) -> floatmax_t"""
        return _modshogun.Math_powl(*args)

    if _newclass:powl = staticmethod(powl)
    __swig_getmethods__["powl"] = lambda x: powl
    def pow(*args):
        """
        pow(x, n) ->  int
        pow(x, n) -> float
        pow(x, n) -> float
        """
        return _modshogun.Math_pow(*args)

    if _newclass:pow = staticmethod(pow)
    __swig_getmethods__["pow"] = lambda x: pow
    def exp(*args):
        """exp(x) -> float"""
        return _modshogun.Math_exp(*args)

    if _newclass:exp = staticmethod(exp)
    __swig_getmethods__["exp"] = lambda x: exp
    def lgamma(*args):
        """lgamma(x) -> float"""
        return _modshogun.Math_lgamma(*args)

    if _newclass:lgamma = staticmethod(lgamma)
    __swig_getmethods__["lgamma"] = lambda x: lgamma
    def tgamma(*args):
        """tgamma(x) -> float"""
        return _modshogun.Math_tgamma(*args)

    if _newclass:tgamma = staticmethod(tgamma)
    __swig_getmethods__["tgamma"] = lambda x: tgamma
    def atan(*args):
        """atan(x) -> float"""
        return _modshogun.Math_atan(*args)

    if _newclass:atan = staticmethod(atan)
    __swig_getmethods__["atan"] = lambda x: atan
    def lgammal(*args):
        """lgammal(x) -> floatmax_t"""
        return _modshogun.Math_lgammal(*args)

    if _newclass:lgammal = staticmethod(lgammal)
    __swig_getmethods__["lgammal"] = lambda x: lgammal
    def log10(*args):
        """log10(v) -> float"""
        return _modshogun.Math_log10(*args)

    if _newclass:log10 = staticmethod(log10)
    __swig_getmethods__["log10"] = lambda x: log10
    def log2(*args):
        """log2(v) -> float"""
        return _modshogun.Math_log2(*args)

    if _newclass:log2 = staticmethod(log2)
    __swig_getmethods__["log2"] = lambda x: log2
    def log(*args):
        """log(v) -> float"""
        return _modshogun.Math_log(*args)

    if _newclass:log = staticmethod(log)
    __swig_getmethods__["log"] = lambda x: log
    def area_under_curve(*args):
        """area_under_curve(xy, len, reversed) -> float"""
        return _modshogun.Math_area_under_curve(*args)

    if _newclass:area_under_curve = staticmethod(area_under_curve)
    __swig_getmethods__["area_under_curve"] = lambda x: area_under_curve
    def factorial(*args):
        """factorial(n) -> int"""
        return _modshogun.Math_factorial(*args)

    if _newclass:factorial = staticmethod(factorial)
    __swig_getmethods__["factorial"] = lambda x: factorial
    def init_random(initseed=0):
        """
        init_random(initseed=0)
        init_random()
        """
        return _modshogun.Math_init_random(initseed)

    if _newclass:init_random = staticmethod(init_random)
    __swig_getmethods__["init_random"] = lambda x: init_random
    def random(*args):
        """
        random() -> int
        random(min_value, max_value) ->  int
        random(min_value, max_value) -> float
        random(min_value, max_value) -> float
        """
        return _modshogun.Math_random(*args)

    if _newclass:random = staticmethod(random)
    __swig_getmethods__["random"] = lambda x: random
    def normal_random(*args):
        """
        normal_random(mean, std_dev) -> float
        normal_random(mean, std_dev) -> float
        """
        return _modshogun.Math_normal_random(*args)

    if _newclass:normal_random = staticmethod(normal_random)
    __swig_getmethods__["normal_random"] = lambda x: normal_random
    def randn_float():
        """randn_float() -> float"""
        return _modshogun.Math_randn_float()

    if _newclass:randn_float = staticmethod(randn_float)
    __swig_getmethods__["randn_float"] = lambda x: randn_float
    def randn_double():
        """randn_double() -> float"""
        return _modshogun.Math_randn_double()

    if _newclass:randn_double = staticmethod(randn_double)
    __swig_getmethods__["randn_double"] = lambda x: randn_double
    def randperm(*args):
        """randperm(n) ->  int *"""
        return _modshogun.Math_randperm(*args)

    if _newclass:randperm = staticmethod(randperm)
    __swig_getmethods__["randperm"] = lambda x: randperm
    def nchoosek(*args):
        """nchoosek(n, k) -> int"""
        return _modshogun.Math_nchoosek(*args)

    if _newclass:nchoosek = staticmethod(nchoosek)
    __swig_getmethods__["nchoosek"] = lambda x: nchoosek
    def dot(*args):
        """
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> floatmax_t
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        dot(v1, v2, n) -> float
        """
        return _modshogun.Math_dot(*args)

    if _newclass:dot = staticmethod(dot)
    __swig_getmethods__["dot"] = lambda x: dot
    def mean(*args):
        """mean(vec, len) -> float"""
        return _modshogun.Math_mean(*args)

    if _newclass:mean = staticmethod(mean)
    __swig_getmethods__["mean"] = lambda x: mean
    def trace(*args):
        """trace(mat, cols, rows) -> float"""
        return _modshogun.Math_trace(*args)

    if _newclass:trace = staticmethod(trace)
    __swig_getmethods__["trace"] = lambda x: trace
    def sort(*args):
        """
        sort(a, cols, sort_col=0)
        sort(a, cols)
        sort(a, idx, N)
        """
        return _modshogun.Math_sort(*args)

    if _newclass:sort = staticmethod(sort)
    __swig_getmethods__["sort"] = lambda x: sort
    def compute_eigenvectors(*args):
        """compute_eigenvectors(matrix, n, m) -> float *"""
        return _modshogun.Math_compute_eigenvectors(*args)

    if _newclass:compute_eigenvectors = staticmethod(compute_eigenvectors)
    __swig_getmethods__["compute_eigenvectors"] = lambda x: compute_eigenvectors
    def Align(*args):
        """Align(seq1, seq2, l1, l2, gapCost) -> float"""
        return _modshogun.Math_Align(*args)

    if _newclass:Align = staticmethod(Align)
    __swig_getmethods__["Align"] = lambda x: Align
    def mutual_info(*args):
        """mutual_info(p1, p2, len) -> float"""
        return _modshogun.Math_mutual_info(*args)

    if _newclass:mutual_info = staticmethod(mutual_info)
    __swig_getmethods__["mutual_info"] = lambda x: mutual_info
    def relative_entropy(*args):
        """relative_entropy(p, q, len) -> float"""
        return _modshogun.Math_relative_entropy(*args)

    if _newclass:relative_entropy = staticmethod(relative_entropy)
    __swig_getmethods__["relative_entropy"] = lambda x: relative_entropy
    def entropy(*args):
        """entropy(p, len) -> float"""
        return _modshogun.Math_entropy(*args)

    if _newclass:entropy = staticmethod(entropy)
    __swig_getmethods__["entropy"] = lambda x: entropy
    def get_seed():
        """get_seed() -> int"""
        return _modshogun.Math_get_seed()

    if _newclass:get_seed = staticmethod(get_seed)
    __swig_getmethods__["get_seed"] = lambda x: get_seed
    def get_log_range():
        """get_log_range() -> int"""
        return _modshogun.Math_get_log_range()

    if _newclass:get_log_range = staticmethod(get_log_range)
    __swig_getmethods__["get_log_range"] = lambda x: get_log_range
    def is_finite(*args):
        """is_finite(f) -> int"""
        return _modshogun.Math_is_finite(*args)

    if _newclass:is_finite = staticmethod(is_finite)
    __swig_getmethods__["is_finite"] = lambda x: is_finite
    def is_infinity(*args):
        """is_infinity(f) -> int"""
        return _modshogun.Math_is_infinity(*args)

    if _newclass:is_infinity = staticmethod(is_infinity)
    __swig_getmethods__["is_infinity"] = lambda x: is_infinity
    def is_nan(*args):
        """is_nan(f) -> int"""
        return _modshogun.Math_is_nan(*args)

    if _newclass:is_nan = staticmethod(is_nan)
    __swig_getmethods__["is_nan"] = lambda x: is_nan
    def fishers_exact_test_for_multiple_2x3_tables(*args):
        """fishers_exact_test_for_multiple_2x3_tables(tables) -> RealVector"""
        return _modshogun.Math_fishers_exact_test_for_multiple_2x3_tables(*args)

    if _newclass:fishers_exact_test_for_multiple_2x3_tables = staticmethod(fishers_exact_test_for_multiple_2x3_tables)
    __swig_getmethods__["fishers_exact_test_for_multiple_2x3_tables"] = lambda x: fishers_exact_test_for_multiple_2x3_tables
    def fishers_exact_test_for_2x3_table(*args):
        """fishers_exact_test_for_2x3_table(table) -> float"""
        return _modshogun.Math_fishers_exact_test_for_2x3_table(*args)

    if _newclass:fishers_exact_test_for_2x3_table = staticmethod(fishers_exact_test_for_2x3_table)
    __swig_getmethods__["fishers_exact_test_for_2x3_table"] = lambda x: fishers_exact_test_for_2x3_table
    def logarithmic_sum(*args):
        """logarithmic_sum(p, q) -> float"""
        return _modshogun.Math_logarithmic_sum(*args)

    if _newclass:logarithmic_sum = staticmethod(logarithmic_sum)
    __swig_getmethods__["logarithmic_sum"] = lambda x: logarithmic_sum
Math_swigregister = _modshogun.Math_swigregister
Math_swigregister(Math)

def Math_round(*args):
  """Math_round(d) -> float"""
  return _modshogun.Math_round(*args)

def Math_floor(*args):
  """Math_floor(d) -> float"""
  return _modshogun.Math_floor(*args)

def Math_ceil(*args):
  """Math_ceil(d) -> float"""
  return _modshogun.Math_ceil(*args)

def Math_sqrt(*args):
  """
    sqrt(x) -> float
    sqrt(x) -> float
    Math_sqrt(x) -> floatmax_t
    """
  return _modshogun.Math_sqrt(*args)

def Math_invsqrt(*args):
  """Math_invsqrt(x) -> float"""
  return _modshogun.Math_invsqrt(*args)

def Math_powl(*args):
  """Math_powl(x, n) -> floatmax_t"""
  return _modshogun.Math_powl(*args)

def Math_pow(*args):
  """
    pow(x, n) ->  int
    pow(x, n) -> float
    Math_pow(x, n) -> float
    """
  return _modshogun.Math_pow(*args)

def Math_exp(*args):
  """Math_exp(x) -> float"""
  return _modshogun.Math_exp(*args)

def Math_lgamma(*args):
  """Math_lgamma(x) -> float"""
  return _modshogun.Math_lgamma(*args)

def Math_tgamma(*args):
  """Math_tgamma(x) -> float"""
  return _modshogun.Math_tgamma(*args)

def Math_atan(*args):
  """Math_atan(x) -> float"""
  return _modshogun.Math_atan(*args)

def Math_lgammal(*args):
  """Math_lgammal(x) -> floatmax_t"""
  return _modshogun.Math_lgammal(*args)

def Math_log10(*args):
  """Math_log10(v) -> float"""
  return _modshogun.Math_log10(*args)

def Math_log2(*args):
  """Math_log2(v) -> float"""
  return _modshogun.Math_log2(*args)

def Math_log(*args):
  """Math_log(v) -> float"""
  return _modshogun.Math_log(*args)

def Math_area_under_curve(*args):
  """Math_area_under_curve(xy, len, reversed) -> float"""
  return _modshogun.Math_area_under_curve(*args)

def Math_factorial(*args):
  """Math_factorial(n) -> int"""
  return _modshogun.Math_factorial(*args)

def Math_init_random(initseed=0):
  """
    init_random(initseed=0)
    Math_init_random()
    """
  return _modshogun.Math_init_random(initseed)

def Math_random(*args):
  """
    random() -> int
    random(min_value, max_value) ->  int
    random(min_value, max_value) -> float
    Math_random(min_value, max_value) -> float
    """
  return _modshogun.Math_random(*args)

def Math_normal_random(*args):
  """
    normal_random(mean, std_dev) -> float
    Math_normal_random(mean, std_dev) -> float
    """
  return _modshogun.Math_normal_random(*args)

def Math_randn_float():
  """Math_randn_float() -> float"""
  return _modshogun.Math_randn_float()

def Math_randn_double():
  """Math_randn_double() -> float"""
  return _modshogun.Math_randn_double()

def Math_randperm(*args):
  """Math_randperm(n) ->  int *"""
  return _modshogun.Math_randperm(*args)

def Math_nchoosek(*args):
  """Math_nchoosek(n, k) -> int"""
  return _modshogun.Math_nchoosek(*args)

def Math_dot(*args):
  """
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> floatmax_t
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    dot(v1, v2, n) -> float
    Math_dot(v1, v2, n) -> float
    """
  return _modshogun.Math_dot(*args)

def Math_mean(*args):
  """Math_mean(vec, len) -> float"""
  return _modshogun.Math_mean(*args)

def Math_trace(*args):
  """Math_trace(mat, cols, rows) -> float"""
  return _modshogun.Math_trace(*args)

def Math_sort(*args):
  """
    sort(a, cols, sort_col=0)
    sort(a, cols)
    Math_sort(a, idx, N)
    """
  return _modshogun.Math_sort(*args)

def Math_compute_eigenvectors(*args):
  """Math_compute_eigenvectors(matrix, n, m) -> float *"""
  return _modshogun.Math_compute_eigenvectors(*args)

def Math_Align(*args):
  """Math_Align(seq1, seq2, l1, l2, gapCost) -> float"""
  return _modshogun.Math_Align(*args)

def Math_mutual_info(*args):
  """Math_mutual_info(p1, p2, len) -> float"""
  return _modshogun.Math_mutual_info(*args)

def Math_relative_entropy(*args):
  """Math_relative_entropy(p, q, len) -> float"""
  return _modshogun.Math_relative_entropy(*args)

def Math_entropy(*args):
  """Math_entropy(p, len) -> float"""
  return _modshogun.Math_entropy(*args)

def Math_get_seed():
  """Math_get_seed() -> int"""
  return _modshogun.Math_get_seed()

def Math_get_log_range():
  """Math_get_log_range() -> int"""
  return _modshogun.Math_get_log_range()

def Math_is_finite(*args):
  """Math_is_finite(f) -> int"""
  return _modshogun.Math_is_finite(*args)

def Math_is_infinity(*args):
  """Math_is_infinity(f) -> int"""
  return _modshogun.Math_is_infinity(*args)

def Math_is_nan(*args):
  """Math_is_nan(f) -> int"""
  return _modshogun.Math_is_nan(*args)

def Math_fishers_exact_test_for_multiple_2x3_tables(*args):
  """Math_fishers_exact_test_for_multiple_2x3_tables(tables) -> RealVector"""
  return _modshogun.Math_fishers_exact_test_for_multiple_2x3_tables(*args)

def Math_fishers_exact_test_for_2x3_table(*args):
  """Math_fishers_exact_test_for_2x3_table(table) -> float"""
  return _modshogun.Math_fishers_exact_test_for_2x3_table(*args)

def Math_logarithmic_sum(*args):
  """Math_logarithmic_sum(p, q) -> float"""
  return _modshogun.Math_logarithmic_sum(*args)
Math.INFTY = _modshogun.cvar.Math_INFTY
Math.ALMOST_INFTY = _modshogun.cvar.Math_ALMOST_INFTY
Math.ALMOST_NEG_INFTY = _modshogun.cvar.Math_ALMOST_NEG_INFTY
Math.PI = _modshogun.cvar.Math_PI
Math.MACHINE_EPSILON = _modshogun.cvar.Math_MACHINE_EPSILON
Math.MAX_REAL_NUMBER = _modshogun.cvar.Math_MAX_REAL_NUMBER
Math.MIN_REAL_NUMBER = _modshogun.cvar.Math_MIN_REAL_NUMBER

F_UNKNOWN = _modshogun.F_UNKNOWN
F_BOOL = _modshogun.F_BOOL
F_CHAR = _modshogun.F_CHAR
F_BYTE = _modshogun.F_BYTE
F_SHORT = _modshogun.F_SHORT
F_WORD = _modshogun.F_WORD
F_INT = _modshogun.F_INT
F_UINT = _modshogun.F_UINT
F_LONG = _modshogun.F_LONG
F_ULONG = _modshogun.F_ULONG
F_SHORTREAL = _modshogun.F_SHORTREAL
F_DREAL = _modshogun.F_DREAL
F_LONGREAL = _modshogun.F_LONGREAL
F_ANY = _modshogun.F_ANY
C_UNKNOWN = _modshogun.C_UNKNOWN
C_SIMPLE = _modshogun.C_SIMPLE
C_SPARSE = _modshogun.C_SPARSE
C_STRING = _modshogun.C_STRING
C_COMBINED = _modshogun.C_COMBINED
C_COMBINED_DOT = _modshogun.C_COMBINED_DOT
C_WD = _modshogun.C_WD
C_SPEC = _modshogun.C_SPEC
C_WEIGHTEDSPEC = _modshogun.C_WEIGHTEDSPEC
C_POLY = _modshogun.C_POLY
C_STREAMING_SIMPLE = _modshogun.C_STREAMING_SIMPLE
C_STREAMING_SPARSE = _modshogun.C_STREAMING_SPARSE
C_STREAMING_STRING = _modshogun.C_STREAMING_STRING
C_STREAMING_VW = _modshogun.C_STREAMING_VW
C_ANY = _modshogun.C_ANY
FP_NONE = _modshogun.FP_NONE
FP_DOT = _modshogun.FP_DOT
FP_STREAMING_DOT = _modshogun.FP_STREAMING_DOT
DNA = _modshogun.DNA
RAWDNA = _modshogun.RAWDNA
RNA = _modshogun.RNA
PROTEIN = _modshogun.PROTEIN
BINARY = _modshogun.BINARY
ALPHANUM = _modshogun.ALPHANUM
CUBE = _modshogun.CUBE
RAWBYTE = _modshogun.RAWBYTE
IUPAC_NUCLEIC_ACID = _modshogun.IUPAC_NUCLEIC_ACID
IUPAC_AMINO_ACID = _modshogun.IUPAC_AMINO_ACID
NONE = _modshogun.NONE
DIGIT = _modshogun.DIGIT
DIGIT2 = _modshogun.DIGIT2
RAWDIGIT = _modshogun.RAWDIGIT
RAWDIGIT2 = _modshogun.RAWDIGIT2
UNKNOWN = _modshogun.UNKNOWN
SNP = _modshogun.SNP
RAWSNP = _modshogun.RAWSNP
class Alphabet(SGObject):
    """Proxy of C++ shogun::CAlphabet class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alphabet, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Alphabet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Alphabet
        __init__(self, alpha, len) -> Alphabet
        __init__(self, alpha) -> Alphabet
        __init__(self, alpha) -> Alphabet
        """
        this = _modshogun.new_Alphabet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Alphabet
    __del__ = lambda self : None;
    def set_alphabet(self, *args):
        """set_alphabet(self, alpha) -> bool"""
        return _modshogun.Alphabet_set_alphabet(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> shogun::EAlphabet"""
        return _modshogun.Alphabet_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) ->  int"""
        return _modshogun.Alphabet_get_num_symbols(self)

    def get_num_bits(self):
        """get_num_bits(self) ->  int"""
        return _modshogun.Alphabet_get_num_bits(self)

    def remap_to_bin(self, *args):
        """remap_to_bin(self, c) -> int"""
        return _modshogun.Alphabet_remap_to_bin(self, *args)

    def remap_to_char(self, *args):
        """remap_to_char(self, c) -> int"""
        return _modshogun.Alphabet_remap_to_char(self, *args)

    def clear_histogram(self):
        """clear_histogram(self)"""
        return _modshogun.Alphabet_clear_histogram(self)

    def add_byte_to_histogram(self, *args):
        """add_byte_to_histogram(self, p)"""
        return _modshogun.Alphabet_add_byte_to_histogram(self, *args)

    def print_histogram(self):
        """print_histogram(self)"""
        return _modshogun.Alphabet_print_histogram(self)

    def get_histogram(self):
        """get_histogram(self) -> LongIntVector"""
        return _modshogun.Alphabet_get_histogram(self)

    def check_alphabet(self, print_error=True):
        """
        check_alphabet(self, print_error=True) -> bool
        check_alphabet(self) -> bool
        """
        return _modshogun.Alphabet_check_alphabet(self, print_error)

    def is_valid(self, *args):
        """is_valid(self, c) -> bool"""
        return _modshogun.Alphabet_is_valid(self, *args)

    def check_alphabet_size(self, print_error=True):
        """
        check_alphabet_size(self, print_error=True) -> bool
        check_alphabet_size(self) -> bool
        """
        return _modshogun.Alphabet_check_alphabet_size(self, print_error)

    def get_num_symbols_in_histogram(self):
        """get_num_symbols_in_histogram(self) ->  int"""
        return _modshogun.Alphabet_get_num_symbols_in_histogram(self)

    def get_max_value_in_histogram(self):
        """get_max_value_in_histogram(self) ->  int"""
        return _modshogun.Alphabet_get_max_value_in_histogram(self)

    def get_num_bits_in_histogram(self):
        """get_num_bits_in_histogram(self) ->  int"""
        return _modshogun.Alphabet_get_num_bits_in_histogram(self)

    def get_alphabet_name(*args):
        """get_alphabet_name(alphabet) -> str const *"""
        return _modshogun.Alphabet_get_alphabet_name(*args)

    if _newclass:get_alphabet_name = staticmethod(get_alphabet_name)
    __swig_getmethods__["get_alphabet_name"] = lambda x: get_alphabet_name
    __swig_setmethods__["alphabet_names"] = _modshogun.Alphabet_alphabet_names_set
    __swig_getmethods__["alphabet_names"] = _modshogun.Alphabet_alphabet_names_get
    if _newclass:alphabet_names = _swig_property(_modshogun.Alphabet_alphabet_names_get, _modshogun.Alphabet_alphabet_names_set)
Alphabet_swigregister = _modshogun.Alphabet_swigregister
Alphabet_swigregister(Alphabet)

def Alphabet_get_alphabet_name(*args):
  """Alphabet_get_alphabet_name(alphabet) -> str const *"""
  return _modshogun.Alphabet_get_alphabet_name(*args)
Alphabet.B_A = _modshogun.cvar.Alphabet_B_A
Alphabet.B_C = _modshogun.cvar.Alphabet_B_C
Alphabet.B_G = _modshogun.cvar.Alphabet_B_G
Alphabet.B_T = _modshogun.cvar.Alphabet_B_T
Alphabet.B_0 = _modshogun.cvar.Alphabet_B_0
Alphabet.MAPTABLE_UNDEF = _modshogun.cvar.Alphabet_MAPTABLE_UNDEF

class Features(SGObject):
    """Proxy of C++ shogun::CFeatures class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Features, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Features, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def duplicate(self):
        """duplicate(self) -> Features"""
        return _modshogun.Features_duplicate(self)

    __swig_destroy__ = _modshogun.delete_Features
    __del__ = lambda self : None;
    def get_feature_type(self):
        """get_feature_type(self) -> shogun::EFeatureType"""
        return _modshogun.Features_get_feature_type(self)

    def get_feature_class(self):
        """get_feature_class(self) -> shogun::EFeatureClass"""
        return _modshogun.Features_get_feature_class(self)

    def add_preprocessor(self, *args):
        """add_preprocessor(self, p) ->  int"""
        return _modshogun.Features_add_preprocessor(self, *args)

    def del_preprocessor(self, *args):
        """del_preprocessor(self, num) -> Preprocessor"""
        return _modshogun.Features_del_preprocessor(self, *args)

    def get_preprocessor(self, *args):
        """get_preprocessor(self, num) -> Preprocessor"""
        return _modshogun.Features_get_preprocessor(self, *args)

    def set_preprocessed(self, *args):
        """set_preprocessed(self, num)"""
        return _modshogun.Features_set_preprocessed(self, *args)

    def is_preprocessed(self, *args):
        """is_preprocessed(self, num) -> bool"""
        return _modshogun.Features_is_preprocessed(self, *args)

    def get_num_preprocessed(self):
        """get_num_preprocessed(self) ->  int"""
        return _modshogun.Features_get_num_preprocessed(self)

    def get_num_preprocessors(self):
        """get_num_preprocessors(self) ->  int"""
        return _modshogun.Features_get_num_preprocessors(self)

    def clean_preprocessors(self):
        """clean_preprocessors(self)"""
        return _modshogun.Features_clean_preprocessors(self)

    def get_cache_size(self):
        """get_cache_size(self) ->  int"""
        return _modshogun.Features_get_cache_size(self)

    def get_num_vectors(self):
        """get_num_vectors(self) ->  int"""
        return _modshogun.Features_get_num_vectors(self)

    def reshape(self, *args):
        """reshape(self, num_features, num_vectors) -> bool"""
        return _modshogun.Features_reshape(self, *args)

    def get_size(self):
        """get_size(self) ->  int"""
        return _modshogun.Features_get_size(self)

    def list_feature_obj(self):
        """list_feature_obj(self)"""
        return _modshogun.Features_list_feature_obj(self)

    def load(self, *args):
        """load(self, loader)"""
        return _modshogun.Features_load(self, *args)

    def save(self, *args):
        """save(self, writer)"""
        return _modshogun.Features_save(self, *args)

    def check_feature_compatibility(self, *args):
        """check_feature_compatibility(self, f) -> bool"""
        return _modshogun.Features_check_feature_compatibility(self, *args)

    def has_property(self, *args):
        """has_property(self, p) -> bool"""
        return _modshogun.Features_has_property(self, *args)

    def set_property(self, *args):
        """set_property(self, p)"""
        return _modshogun.Features_set_property(self, *args)

    def unset_property(self, *args):
        """unset_property(self, p)"""
        return _modshogun.Features_unset_property(self, *args)

    def set_subset(self, *args):
        """set_subset(self, subset)"""
        return _modshogun.Features_set_subset(self, *args)

    def remove_subset(self):
        """remove_subset(self)"""
        return _modshogun.Features_remove_subset(self)

    def subset_changed_post(self):
        """subset_changed_post(self)"""
        return _modshogun.Features_subset_changed_post(self)

    def subset_idx_conversion(self, *args):
        """subset_idx_conversion(self, idx) -> shogun::index_t"""
        return _modshogun.Features_subset_idx_conversion(self, *args)

    def has_subset(self):
        """has_subset(self) -> bool"""
        return _modshogun.Features_has_subset(self)

    def copy_subset(self, *args):
        """copy_subset(self, indices) -> Features"""
        return _modshogun.Features_copy_subset(self, *args)

Features_swigregister = _modshogun.Features_swigregister
Features_swigregister(Features)

class DotFeatures(Features):
    """Proxy of C++ shogun::CDotFeatures class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_DotFeatures
    __del__ = lambda self : None;
    def get_dim_feature_space(self):
        """get_dim_feature_space(self) ->  int"""
        return _modshogun.DotFeatures_get_dim_feature_space(self)

    def dot(self, *args):
        """dot(self, vec_idx1, df, vec_idx2) -> float"""
        return _modshogun.DotFeatures_dot(self, *args)

    def get_nnz_features_for_vector(self, *args):
        """get_nnz_features_for_vector(self, num) ->  int"""
        return _modshogun.DotFeatures_get_nnz_features_for_vector(self, *args)

    def get_combined_feature_weight(self):
        """get_combined_feature_weight(self) -> float"""
        return _modshogun.DotFeatures_get_combined_feature_weight(self)

    def set_combined_feature_weight(self, *args):
        """set_combined_feature_weight(self, nw)"""
        return _modshogun.DotFeatures_set_combined_feature_weight(self, *args)

    def get_computed_dot_feature_matrix(self):
        """get_computed_dot_feature_matrix(self) -> RealMatrix"""
        return _modshogun.DotFeatures_get_computed_dot_feature_matrix(self)

    def get_computed_dot_feature_vector(self, *args):
        """get_computed_dot_feature_vector(self, num) -> RealVector"""
        return _modshogun.DotFeatures_get_computed_dot_feature_vector(self, *args)

    def benchmark_add_to_dense_vector(self, repeats=5):
        """
        benchmark_add_to_dense_vector(self, repeats=5)
        benchmark_add_to_dense_vector(self)
        """
        return _modshogun.DotFeatures_benchmark_add_to_dense_vector(self, repeats)

    def benchmark_dense_dot_range(self, repeats=5):
        """
        benchmark_dense_dot_range(self, repeats=5)
        benchmark_dense_dot_range(self)
        """
        return _modshogun.DotFeatures_benchmark_dense_dot_range(self, repeats)

    def get_mean(self):
        """get_mean(self) -> RealVector"""
        return _modshogun.DotFeatures_get_mean(self)

    def get_cov(self):
        """get_cov(self) -> RealMatrix"""
        return _modshogun.DotFeatures_get_cov(self)

DotFeatures_swigregister = _modshogun.DotFeatures_swigregister
DotFeatures_swigregister(DotFeatures)

class StreamingFeatures(Features):
    """Proxy of C++ shogun::CStreamingFeatures class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StreamingFeatures
    __del__ = lambda self : None;
    def set_read_functions(self):
        """set_read_functions(self)"""
        return _modshogun.StreamingFeatures_set_read_functions(self)

    def set_vector_reader(self):
        """set_vector_reader(self)"""
        return _modshogun.StreamingFeatures_set_vector_reader(self)

    def set_vector_and_label_reader(self):
        """set_vector_and_label_reader(self)"""
        return _modshogun.StreamingFeatures_set_vector_and_label_reader(self)

    def start_parser(self):
        """start_parser(self)"""
        return _modshogun.StreamingFeatures_start_parser(self)

    def end_parser(self):
        """end_parser(self)"""
        return _modshogun.StreamingFeatures_end_parser(self)

    def get_label(self):
        """get_label(self) -> float"""
        return _modshogun.StreamingFeatures_get_label(self)

    def get_next_example(self):
        """get_next_example(self) -> bool"""
        return _modshogun.StreamingFeatures_get_next_example(self)

    def release_example(self):
        """release_example(self)"""
        return _modshogun.StreamingFeatures_release_example(self)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.StreamingFeatures_get_num_features(self)

    def get_has_labels(self):
        """get_has_labels(self) -> bool"""
        return _modshogun.StreamingFeatures_get_has_labels(self)

    def is_seekable(self):
        """is_seekable(self) -> bool"""
        return _modshogun.StreamingFeatures_is_seekable(self)

    def reset_stream(self):
        """reset_stream(self)"""
        return _modshogun.StreamingFeatures_reset_stream(self)

StreamingFeatures_swigregister = _modshogun.StreamingFeatures_swigregister
StreamingFeatures_swigregister(StreamingFeatures)

class StreamingDotFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingDotFeatures class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingDotFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingDotFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StreamingDotFeatures
    __del__ = lambda self : None;
    def dot(self, *args):
        """dot(self, df) -> float"""
        return _modshogun.StreamingDotFeatures_dot(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingDotFeatures_expand_if_required(self, *args)

    def get_dim_feature_space(self):
        """get_dim_feature_space(self) ->  int"""
        return _modshogun.StreamingDotFeatures_get_dim_feature_space(self)

    def get_nnz_features_for_vector(self):
        """get_nnz_features_for_vector(self) ->  int"""
        return _modshogun.StreamingDotFeatures_get_nnz_features_for_vector(self)

StreamingDotFeatures_swigregister = _modshogun.StreamingDotFeatures_swigregister
StreamingDotFeatures_swigregister(StreamingDotFeatures)

class StreamingVwFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingVwFeatures class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingVwFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingVwFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingVwFeatures
        __init__(self, file, is_labelled, size) -> StreamingVwFeatures
        __init__(self, file, is_labelled, size) -> StreamingVwFeatures
        """
        this = _modshogun.new_StreamingVwFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingVwFeatures
    __del__ = lambda self : None;
    def get_env(self):
        """get_env(self) -> CVwEnvironment *"""
        return _modshogun.StreamingVwFeatures_get_env(self)

    def set_env(self, *args):
        """set_env(self, vw_env)"""
        return _modshogun.StreamingVwFeatures_set_env(self, *args)

    def get_example(self):
        """get_example(self) -> VwExample *"""
        return _modshogun.StreamingVwFeatures_get_example(self)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingVwFeatures_expand_if_required(self, *args)

    def real_weight(self, *args):
        """real_weight(self, w, gravity) -> float"""
        return _modshogun.StreamingVwFeatures_real_weight(self, *args)

    def dense_dot_truncated(self, *args):
        """dense_dot_truncated(self, vec2, ex, gravity) -> float"""
        return _modshogun.StreamingVwFeatures_dense_dot_truncated(self, *args)

StreamingVwFeatures_swigregister = _modshogun.StreamingVwFeatures_swigregister
StreamingVwFeatures_swigregister(StreamingVwFeatures)

class StringBoolFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringBoolFeatures
        __init__(self, alpha) -> StringBoolFeatures
        __init__(self, string_list, alpha) -> StringBoolFeatures
        __init__(self, string_list, alpha) -> StringBoolFeatures
        __init__(self, alpha) -> StringBoolFeatures
        __init__(self, orig) -> StringBoolFeatures
        __init__(self, loader, alpha=DNA) -> StringBoolFeatures
        __init__(self, loader) -> StringBoolFeatures
        """
        this = _modshogun.new_StringBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringBoolFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringBoolFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringBoolFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringBoolFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> BoolVector"""
        return _modshogun.StringBoolFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringBoolFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringBoolFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringBoolFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringBoolFeatures"""
        return _modshogun.StringBoolFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> bool"""
        return _modshogun.StringBoolFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringBoolFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringBoolFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringBoolFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringBoolFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringBoolFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringBoolFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> bool"""
        return _modshogun.StringBoolFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> bool"""
        return _modshogun.StringBoolFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> bool"""
        return _modshogun.StringBoolFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringBoolFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringBoolFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringBoolFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringBoolFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringBoolFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringBoolFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> BoolStringList"""
        return _modshogun.StringBoolFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringBoolFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringBoolFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringBoolFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringBoolFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringBoolFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringBoolFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringBoolFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringBoolFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringBoolFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringBoolFeatures_determine_maximum_string_length(self)

StringBoolFeatures_swigregister = _modshogun.StringBoolFeatures_swigregister
StringBoolFeatures_swigregister(StringBoolFeatures)

class StringCharFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringCharFeatures
        __init__(self, alpha) -> StringCharFeatures
        __init__(self, string_list, alpha) -> StringCharFeatures
        __init__(self, string_list, alpha) -> StringCharFeatures
        __init__(self, alpha) -> StringCharFeatures
        __init__(self, orig) -> StringCharFeatures
        __init__(self, loader, alpha=DNA) -> StringCharFeatures
        __init__(self, loader) -> StringCharFeatures
        """
        this = _modshogun.new_StringCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringCharFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringCharFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringCharFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringCharFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> CharVector"""
        return _modshogun.StringCharFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringCharFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringCharFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringCharFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringCharFeatures"""
        return _modshogun.StringCharFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> str"""
        return _modshogun.StringCharFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringCharFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringCharFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringCharFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringCharFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringCharFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringCharFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> str"""
        return _modshogun.StringCharFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> str"""
        return _modshogun.StringCharFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> str"""
        return _modshogun.StringCharFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringCharFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringCharFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringCharFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringCharFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringCharFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringCharFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> CharStringList"""
        return _modshogun.StringCharFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringCharFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringCharFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringCharFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringCharFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringCharFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringCharFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringCharFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringCharFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringCharFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringCharFeatures_determine_maximum_string_length(self)

StringCharFeatures_swigregister = _modshogun.StringCharFeatures_swigregister
StringCharFeatures_swigregister(StringCharFeatures)

class StringByteFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringByteFeatures
        __init__(self, alpha) -> StringByteFeatures
        __init__(self, string_list, alpha) -> StringByteFeatures
        __init__(self, string_list, alpha) -> StringByteFeatures
        __init__(self, alpha) -> StringByteFeatures
        __init__(self, orig) -> StringByteFeatures
        __init__(self, loader, alpha=DNA) -> StringByteFeatures
        __init__(self, loader) -> StringByteFeatures
        """
        this = _modshogun.new_StringByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringByteFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringByteFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringByteFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringByteFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> ByteVector"""
        return _modshogun.StringByteFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringByteFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringByteFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringByteFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringByteFeatures"""
        return _modshogun.StringByteFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> unsigned str"""
        return _modshogun.StringByteFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringByteFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringByteFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringByteFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringByteFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringByteFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringByteFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> unsigned str"""
        return _modshogun.StringByteFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> unsigned str"""
        return _modshogun.StringByteFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> unsigned str"""
        return _modshogun.StringByteFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringByteFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringByteFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringByteFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringByteFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringByteFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringByteFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> ByteStringList"""
        return _modshogun.StringByteFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringByteFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringByteFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringByteFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringByteFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringByteFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringByteFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringByteFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringByteFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringByteFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringByteFeatures_determine_maximum_string_length(self)

StringByteFeatures_swigregister = _modshogun.StringByteFeatures_swigregister
StringByteFeatures_swigregister(StringByteFeatures)

class StringWordFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringWordFeatures
        __init__(self, alpha) -> StringWordFeatures
        __init__(self, string_list, alpha) -> StringWordFeatures
        __init__(self, string_list, alpha) -> StringWordFeatures
        __init__(self, alpha) -> StringWordFeatures
        __init__(self, orig) -> StringWordFeatures
        __init__(self, loader, alpha=DNA) -> StringWordFeatures
        __init__(self, loader) -> StringWordFeatures
        """
        this = _modshogun.new_StringWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringWordFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringWordFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringWordFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringWordFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> WordVector"""
        return _modshogun.StringWordFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringWordFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringWordFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringWordFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringWordFeatures"""
        return _modshogun.StringWordFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> unsigned short"""
        return _modshogun.StringWordFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringWordFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringWordFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringWordFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringWordFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringWordFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringWordFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> unsigned short"""
        return _modshogun.StringWordFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> unsigned short"""
        return _modshogun.StringWordFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> unsigned short"""
        return _modshogun.StringWordFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringWordFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringWordFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringWordFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringWordFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringWordFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringWordFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> WordStringList"""
        return _modshogun.StringWordFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringWordFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringWordFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringWordFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringWordFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringWordFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringWordFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringWordFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringWordFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringWordFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringWordFeatures_determine_maximum_string_length(self)

StringWordFeatures_swigregister = _modshogun.StringWordFeatures_swigregister
StringWordFeatures_swigregister(StringWordFeatures)

class StringIntFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringIntFeatures
        __init__(self, alpha) -> StringIntFeatures
        __init__(self, string_list, alpha) -> StringIntFeatures
        __init__(self, string_list, alpha) -> StringIntFeatures
        __init__(self, alpha) -> StringIntFeatures
        __init__(self, orig) -> StringIntFeatures
        __init__(self, loader, alpha=DNA) -> StringIntFeatures
        __init__(self, loader) -> StringIntFeatures
        """
        this = _modshogun.new_StringIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringIntFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringIntFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringIntFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringIntFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> IntVector"""
        return _modshogun.StringIntFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringIntFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringIntFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringIntFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringIntFeatures"""
        return _modshogun.StringIntFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> int"""
        return _modshogun.StringIntFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringIntFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringIntFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringIntFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringIntFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringIntFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringIntFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> int"""
        return _modshogun.StringIntFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> int"""
        return _modshogun.StringIntFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> int"""
        return _modshogun.StringIntFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringIntFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringIntFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringIntFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringIntFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringIntFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringIntFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> IntStringList"""
        return _modshogun.StringIntFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringIntFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringIntFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringIntFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringIntFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringIntFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringIntFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringIntFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringIntFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringIntFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringIntFeatures_determine_maximum_string_length(self)

StringIntFeatures_swigregister = _modshogun.StringIntFeatures_swigregister
StringIntFeatures_swigregister(StringIntFeatures)

class StringLongFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringLongFeatures
        __init__(self, alpha) -> StringLongFeatures
        __init__(self, string_list, alpha) -> StringLongFeatures
        __init__(self, string_list, alpha) -> StringLongFeatures
        __init__(self, alpha) -> StringLongFeatures
        __init__(self, orig) -> StringLongFeatures
        __init__(self, loader, alpha=DNA) -> StringLongFeatures
        __init__(self, loader) -> StringLongFeatures
        """
        this = _modshogun.new_StringLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringLongFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringLongFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringLongFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringLongFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> LongIntVector"""
        return _modshogun.StringLongFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringLongFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringLongFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringLongFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringLongFeatures"""
        return _modshogun.StringLongFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> long"""
        return _modshogun.StringLongFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringLongFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringLongFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringLongFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringLongFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringLongFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringLongFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> long"""
        return _modshogun.StringLongFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> long"""
        return _modshogun.StringLongFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> long"""
        return _modshogun.StringLongFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringLongFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringLongFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringLongFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringLongFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringLongFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringLongFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> LongIntStringList"""
        return _modshogun.StringLongFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringLongFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringLongFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringLongFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringLongFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringLongFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringLongFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringLongFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringLongFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringLongFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringLongFeatures_determine_maximum_string_length(self)

StringLongFeatures_swigregister = _modshogun.StringLongFeatures_swigregister
StringLongFeatures_swigregister(StringLongFeatures)

class StringUlongFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringUlongFeatures
        __init__(self, alpha) -> StringUlongFeatures
        __init__(self, string_list, alpha) -> StringUlongFeatures
        __init__(self, string_list, alpha) -> StringUlongFeatures
        __init__(self, alpha) -> StringUlongFeatures
        __init__(self, orig) -> StringUlongFeatures
        __init__(self, loader, alpha=DNA) -> StringUlongFeatures
        __init__(self, loader) -> StringUlongFeatures
        """
        this = _modshogun.new_StringUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringUlongFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringUlongFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringUlongFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringUlongFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> ULongIntVector"""
        return _modshogun.StringUlongFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringUlongFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringUlongFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringUlongFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringUlongFeatures"""
        return _modshogun.StringUlongFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> unsigned long"""
        return _modshogun.StringUlongFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringUlongFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringUlongFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringUlongFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringUlongFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringUlongFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringUlongFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> unsigned long"""
        return _modshogun.StringUlongFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> unsigned long"""
        return _modshogun.StringUlongFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> unsigned long"""
        return _modshogun.StringUlongFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringUlongFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringUlongFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringUlongFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringUlongFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringUlongFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringUlongFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> ULongIntStringList"""
        return _modshogun.StringUlongFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringUlongFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringUlongFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringUlongFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringUlongFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringUlongFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringUlongFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringUlongFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringUlongFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringUlongFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringUlongFeatures_determine_maximum_string_length(self)

StringUlongFeatures_swigregister = _modshogun.StringUlongFeatures_swigregister
StringUlongFeatures_swigregister(StringUlongFeatures)

class StringShortRealFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringShortRealFeatures
        __init__(self, alpha) -> StringShortRealFeatures
        __init__(self, string_list, alpha) -> StringShortRealFeatures
        __init__(self, string_list, alpha) -> StringShortRealFeatures
        __init__(self, alpha) -> StringShortRealFeatures
        __init__(self, orig) -> StringShortRealFeatures
        __init__(self, loader, alpha=DNA) -> StringShortRealFeatures
        __init__(self, loader) -> StringShortRealFeatures
        """
        this = _modshogun.new_StringShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringShortRealFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringShortRealFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringShortRealFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringShortRealFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> ShortRealVector"""
        return _modshogun.StringShortRealFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringShortRealFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringShortRealFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringShortRealFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringShortRealFeatures"""
        return _modshogun.StringShortRealFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> float"""
        return _modshogun.StringShortRealFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringShortRealFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringShortRealFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringShortRealFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringShortRealFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringShortRealFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringShortRealFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> float"""
        return _modshogun.StringShortRealFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> float"""
        return _modshogun.StringShortRealFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> float"""
        return _modshogun.StringShortRealFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringShortRealFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringShortRealFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringShortRealFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringShortRealFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringShortRealFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringShortRealFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> ShortRealStringList"""
        return _modshogun.StringShortRealFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringShortRealFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringShortRealFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringShortRealFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringShortRealFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringShortRealFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringShortRealFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringShortRealFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringShortRealFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringShortRealFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringShortRealFeatures_determine_maximum_string_length(self)

StringShortRealFeatures_swigregister = _modshogun.StringShortRealFeatures_swigregister
StringShortRealFeatures_swigregister(StringShortRealFeatures)

class StringRealFeatures(Features):
    """Proxy of C++ shogun::CStringFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringRealFeatures
        __init__(self, alpha) -> StringRealFeatures
        __init__(self, string_list, alpha) -> StringRealFeatures
        __init__(self, string_list, alpha) -> StringRealFeatures
        __init__(self, alpha) -> StringRealFeatures
        __init__(self, orig) -> StringRealFeatures
        __init__(self, loader, alpha=DNA) -> StringRealFeatures
        __init__(self, loader) -> StringRealFeatures
        """
        this = _modshogun.new_StringRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringRealFeatures
    __del__ = lambda self : None;
    def cleanup_feature_vector(self, *args):
        """cleanup_feature_vector(self, num)"""
        return _modshogun.StringRealFeatures_cleanup_feature_vector(self, *args)

    def cleanup_feature_vectors(self, *args):
        """cleanup_feature_vectors(self, start, stop)"""
        return _modshogun.StringRealFeatures_cleanup_feature_vectors(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StringRealFeatures_get_alphabet(self)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> RealVector"""
        return _modshogun.StringRealFeatures_get_feature_vector(self, *args)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.StringRealFeatures_set_feature_vector(self, *args)

    def enable_on_the_fly_preprocessing(self):
        """enable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringRealFeatures_enable_on_the_fly_preprocessing(self)

    def disable_on_the_fly_preprocessing(self):
        """disable_on_the_fly_preprocessing(self)"""
        return _modshogun.StringRealFeatures_disable_on_the_fly_preprocessing(self)

    def get_transposed(self):
        """get_transposed(self) -> StringRealFeatures"""
        return _modshogun.StringRealFeatures_get_transposed(self)

    def get_feature(self, *args):
        """get_feature(self, vec_num, feat_num) -> float"""
        return _modshogun.StringRealFeatures_get_feature(self, *args)

    def get_vector_length(self, *args):
        """get_vector_length(self, vec_num) ->  int"""
        return _modshogun.StringRealFeatures_get_vector_length(self, *args)

    def get_max_vector_length(self):
        """get_max_vector_length(self) ->  int"""
        return _modshogun.StringRealFeatures_get_max_vector_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringRealFeatures_get_num_symbols(self)

    def get_max_num_symbols(self):
        """get_max_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringRealFeatures_get_max_num_symbols(self)

    def get_original_num_symbols(self):
        """get_original_num_symbols(self) -> floatmax_t"""
        return _modshogun.StringRealFeatures_get_original_num_symbols(self)

    def get_order(self):
        """get_order(self) ->  int"""
        return _modshogun.StringRealFeatures_get_order(self)

    def get_masked_symbols(self, *args):
        """get_masked_symbols(self, symbol, mask) -> float"""
        return _modshogun.StringRealFeatures_get_masked_symbols(self, *args)

    def shift_offset(self, *args):
        """shift_offset(self, offset, amount) -> float"""
        return _modshogun.StringRealFeatures_shift_offset(self, *args)

    def shift_symbol(self, *args):
        """shift_symbol(self, symbol, amount) -> float"""
        return _modshogun.StringRealFeatures_shift_symbol(self, *args)

    def load_ascii_file(self, *args):
        """
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        load_ascii_file(self, fname, remap_to_bin=True, ascii_alphabet=DNA)
        load_ascii_file(self, fname, remap_to_bin=True)
        load_ascii_file(self, fname)
        """
        return _modshogun.StringRealFeatures_load_ascii_file(self, *args)

    def load_fasta_file(self, *args):
        """
        load_fasta_file(self, fname, ignore_invalid=False) -> bool
        load_fasta_file(self, fname) -> bool
        """
        return _modshogun.StringRealFeatures_load_fasta_file(self, *args)

    def load_fastq_file(self, *args):
        """
        load_fastq_file(self, fname, ignore_invalid=False, bitremap_in_single_string=False) -> bool
        load_fastq_file(self, fname, ignore_invalid=False) -> bool
        load_fastq_file(self, fname) -> bool
        """
        return _modshogun.StringRealFeatures_load_fastq_file(self, *args)

    def load_from_directory(self, *args):
        """load_from_directory(self, dirname) -> bool"""
        return _modshogun.StringRealFeatures_load_from_directory(self, *args)

    def set_features(self, *args):
        """set_features(self, feats)"""
        return _modshogun.StringRealFeatures_set_features(self, *args)

    def append_features(self, *args):
        """append_features(self, sf) -> bool"""
        return _modshogun.StringRealFeatures_append_features(self, *args)

    def get_features(self):
        """get_features(self) -> RealStringList"""
        return _modshogun.StringRealFeatures_get_features(self)

    def load_compressed(self, *args):
        """load_compressed(self, src, decompress) -> bool"""
        return _modshogun.StringRealFeatures_load_compressed(self, *args)

    def save_compressed(self, *args):
        """save_compressed(self, dest, compression, level) -> bool"""
        return _modshogun.StringRealFeatures_save_compressed(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.StringRealFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_by_sliding_window(self, *args):
        """
        obtain_by_sliding_window(self, window_size, step_size, skip=0) ->  int
        obtain_by_sliding_window(self, window_size, step_size) ->  int
        """
        return _modshogun.StringRealFeatures_obtain_by_sliding_window(self, *args)

    def obtain_by_position_list(self, *args):
        """
        obtain_by_position_list(self, window_size, positions, skip=0) ->  int
        obtain_by_position_list(self, window_size, positions) ->  int
        """
        return _modshogun.StringRealFeatures_obtain_by_position_list(self, *args)

    def obtain_from_char(self, *args):
        """obtain_from_char(self, sf, start, p_order, gap, rev) -> bool"""
        return _modshogun.StringRealFeatures_obtain_from_char(self, *args)

    def have_same_length(self, *args):
        """
        have_same_length(self, len=-1) -> bool
        have_same_length(self) -> bool
        """
        return _modshogun.StringRealFeatures_have_same_length(self, *args)

    def embed_features(self, *args):
        """embed_features(self, p_order)"""
        return _modshogun.StringRealFeatures_embed_features(self, *args)

    def compute_symbol_mask_table(self, *args):
        """compute_symbol_mask_table(self, max_val)"""
        return _modshogun.StringRealFeatures_compute_symbol_mask_table(self, *args)

    def determine_maximum_string_length(self):
        """determine_maximum_string_length(self)"""
        return _modshogun.StringRealFeatures_determine_maximum_string_length(self)

StringRealFeatures_swigregister = _modshogun.StringRealFeatures_swigregister
StringRealFeatures_swigregister(StringRealFeatures)

class StreamingStringBoolFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringBoolFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringBoolFeatures
        """
        this = _modshogun.new_StreamingStringBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringBoolFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringBoolFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringBoolFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringBoolFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringBoolFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< bool >"""
        return _modshogun.StreamingStringBoolFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringBoolFeatures_get_vector_length(self)

StreamingStringBoolFeatures_swigregister = _modshogun.StreamingStringBoolFeatures_swigregister
StreamingStringBoolFeatures_swigregister(StreamingStringBoolFeatures)

class StreamingStringCharFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringCharFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringCharFeatures
        """
        this = _modshogun.new_StreamingStringCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringCharFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringCharFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringCharFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringCharFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringCharFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< str >"""
        return _modshogun.StreamingStringCharFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringCharFeatures_get_vector_length(self)

StreamingStringCharFeatures_swigregister = _modshogun.StreamingStringCharFeatures_swigregister
StreamingStringCharFeatures_swigregister(StreamingStringCharFeatures)

class StreamingStringByteFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringByteFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringByteFeatures
        """
        this = _modshogun.new_StreamingStringByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringByteFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringByteFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringByteFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringByteFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringByteFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< unsigned str >"""
        return _modshogun.StreamingStringByteFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringByteFeatures_get_vector_length(self)

StreamingStringByteFeatures_swigregister = _modshogun.StreamingStringByteFeatures_swigregister
StreamingStringByteFeatures_swigregister(StreamingStringByteFeatures)

class StreamingStringWordFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringWordFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringWordFeatures
        """
        this = _modshogun.new_StreamingStringWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringWordFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringWordFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringWordFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringWordFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringWordFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< unsigned short >"""
        return _modshogun.StreamingStringWordFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringWordFeatures_get_vector_length(self)

StreamingStringWordFeatures_swigregister = _modshogun.StreamingStringWordFeatures_swigregister
StreamingStringWordFeatures_swigregister(StreamingStringWordFeatures)

class StreamingStringIntFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringIntFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringIntFeatures
        """
        this = _modshogun.new_StreamingStringIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringIntFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringIntFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringIntFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringIntFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringIntFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< int >"""
        return _modshogun.StreamingStringIntFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringIntFeatures_get_vector_length(self)

StreamingStringIntFeatures_swigregister = _modshogun.StreamingStringIntFeatures_swigregister
StreamingStringIntFeatures_swigregister(StreamingStringIntFeatures)

class StreamingStringLongFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringLongFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringLongFeatures
        """
        this = _modshogun.new_StreamingStringLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringLongFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringLongFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringLongFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringLongFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringLongFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< long >"""
        return _modshogun.StreamingStringLongFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringLongFeatures_get_vector_length(self)

StreamingStringLongFeatures_swigregister = _modshogun.StreamingStringLongFeatures_swigregister
StreamingStringLongFeatures_swigregister(StreamingStringLongFeatures)

class StreamingStringUlongFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringUlongFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringUlongFeatures
        """
        this = _modshogun.new_StreamingStringUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringUlongFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringUlongFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringUlongFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringUlongFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringUlongFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< unsigned long >"""
        return _modshogun.StreamingStringUlongFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringUlongFeatures_get_vector_length(self)

StreamingStringUlongFeatures_swigregister = _modshogun.StreamingStringUlongFeatures_swigregister
StreamingStringUlongFeatures_swigregister(StreamingStringUlongFeatures)

class StreamingStringShortRealFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringShortRealFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringShortRealFeatures
        """
        this = _modshogun.new_StreamingStringShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringShortRealFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringShortRealFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringShortRealFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringShortRealFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringShortRealFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< float >"""
        return _modshogun.StreamingStringShortRealFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringShortRealFeatures_get_vector_length(self)

StreamingStringShortRealFeatures_swigregister = _modshogun.StreamingStringShortRealFeatures_swigregister
StreamingStringShortRealFeatures_swigregister(StreamingStringShortRealFeatures)

class StreamingStringRealFeatures(StreamingFeatures):
    """Proxy of C++ shogun::CStreamingStringFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingStringRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingStringRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingStringRealFeatures
        __init__(self, file, is_labelled, size) -> StreamingStringRealFeatures
        """
        this = _modshogun.new_StreamingStringRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingStringRealFeatures
    __del__ = lambda self : None;
    def use_alphabet(self, *args):
        """
        use_alphabet(self, alpha)
        use_alphabet(self, alpha)
        """
        return _modshogun.StreamingStringRealFeatures_use_alphabet(self, *args)

    def set_remap(self, *args):
        """
        set_remap(self, ascii_alphabet, binary_alphabet)
        set_remap(self, ascii_alphabet=DNA, binary_alphabet=RAWDNA)
        set_remap(self, ascii_alphabet=DNA)
        set_remap(self)
        """
        return _modshogun.StreamingStringRealFeatures_set_remap(self, *args)

    def get_alphabet(self):
        """get_alphabet(self) -> Alphabet"""
        return _modshogun.StreamingStringRealFeatures_get_alphabet(self)

    def get_num_symbols(self):
        """get_num_symbols(self) -> floatmax_t"""
        return _modshogun.StreamingStringRealFeatures_get_num_symbols(self)

    def get_vector(self):
        """get_vector(self) -> shogun::SGString< float >"""
        return _modshogun.StreamingStringRealFeatures_get_vector(self)

    def get_vector_length(self):
        """get_vector_length(self) ->  int"""
        return _modshogun.StreamingStringRealFeatures_get_vector_length(self)

StreamingStringRealFeatures_swigregister = _modshogun.StreamingStringRealFeatures_swigregister
StreamingStringRealFeatures_swigregister(StreamingStringRealFeatures)

class StringFileBoolFeatures(StringBoolFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [StringBoolFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringBoolFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileBoolFeatures
        __init__(self, fname, alpha) -> StringFileBoolFeatures
        """
        this = _modshogun.new_StringFileBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileBoolFeatures
    __del__ = lambda self : None;
StringFileBoolFeatures_swigregister = _modshogun.StringFileBoolFeatures_swigregister
StringFileBoolFeatures_swigregister(StringFileBoolFeatures)

class StringFileCharFeatures(StringCharFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StringCharFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileCharFeatures
        __init__(self, fname, alpha) -> StringFileCharFeatures
        """
        this = _modshogun.new_StringFileCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileCharFeatures
    __del__ = lambda self : None;
StringFileCharFeatures_swigregister = _modshogun.StringFileCharFeatures_swigregister
StringFileCharFeatures_swigregister(StringFileCharFeatures)

class StringFileByteFeatures(StringByteFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringByteFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringByteFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileByteFeatures
        __init__(self, fname, alpha) -> StringFileByteFeatures
        """
        this = _modshogun.new_StringFileByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileByteFeatures
    __del__ = lambda self : None;
StringFileByteFeatures_swigregister = _modshogun.StringFileByteFeatures_swigregister
StringFileByteFeatures_swigregister(StringFileByteFeatures)

class StringFileWordFeatures(StringWordFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringWordFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileWordFeatures
        __init__(self, fname, alpha) -> StringFileWordFeatures
        """
        this = _modshogun.new_StringFileWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileWordFeatures
    __del__ = lambda self : None;
StringFileWordFeatures_swigregister = _modshogun.StringFileWordFeatures_swigregister
StringFileWordFeatures_swigregister(StringFileWordFeatures)

class StringFileIntFeatures(StringIntFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringIntFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringIntFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileIntFeatures
        __init__(self, fname, alpha) -> StringFileIntFeatures
        """
        this = _modshogun.new_StringFileIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileIntFeatures
    __del__ = lambda self : None;
StringFileIntFeatures_swigregister = _modshogun.StringFileIntFeatures_swigregister
StringFileIntFeatures_swigregister(StringFileIntFeatures)

class StringFileLongFeatures(StringLongFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringLongFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringLongFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileLongFeatures
        __init__(self, fname, alpha) -> StringFileLongFeatures
        """
        this = _modshogun.new_StringFileLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileLongFeatures
    __del__ = lambda self : None;
StringFileLongFeatures_swigregister = _modshogun.StringFileLongFeatures_swigregister
StringFileLongFeatures_swigregister(StringFileLongFeatures)

class StringFileUlongFeatures(StringUlongFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringUlongFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringUlongFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileUlongFeatures
        __init__(self, fname, alpha) -> StringFileUlongFeatures
        """
        this = _modshogun.new_StringFileUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileUlongFeatures
    __del__ = lambda self : None;
StringFileUlongFeatures_swigregister = _modshogun.StringFileUlongFeatures_swigregister
StringFileUlongFeatures_swigregister(StringFileUlongFeatures)

class StringFileShortRealFeatures(StringShortRealFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringShortRealFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringShortRealFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileShortRealFeatures
        __init__(self, fname, alpha) -> StringFileShortRealFeatures
        """
        this = _modshogun.new_StringFileShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileShortRealFeatures
    __del__ = lambda self : None;
StringFileShortRealFeatures_swigregister = _modshogun.StringFileShortRealFeatures_swigregister
StringFileShortRealFeatures_swigregister(StringFileShortRealFeatures)

class StringFileRealFeatures(StringRealFeatures):
    """Proxy of C++ shogun::CStringFileFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringRealFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringFileRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StringRealFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringFileRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringFileRealFeatures
        __init__(self, fname, alpha) -> StringFileRealFeatures
        """
        this = _modshogun.new_StringFileRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StringFileRealFeatures
    __del__ = lambda self : None;
StringFileRealFeatures_swigregister = _modshogun.StringFileRealFeatures_swigregister
StringFileRealFeatures_swigregister(StringFileRealFeatures)

class SparseBoolFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseBoolFeatures
        __init__(self) -> SparseBoolFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseBoolFeatures
        __init__(self, src, num_feat, num_vec) -> SparseBoolFeatures
        __init__(self, sparse) -> SparseBoolFeatures
        __init__(self, dense) -> SparseBoolFeatures
        __init__(self, orig) -> SparseBoolFeatures
        __init__(self, loader) -> SparseBoolFeatures
        """
        this = _modshogun.new_SparseBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseBoolFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseBoolFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseBoolFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> bool"""
        return _modshogun.SparseBoolFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> BoolVector"""
        return _modshogun.SparseBoolFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> BoolSparseVector"""
        return _modshogun.SparseBoolFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> BoolSparseMatrix"""
        return _modshogun.SparseBoolFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseBoolFeatures"""
        return _modshogun.SparseBoolFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseBoolFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> BoolMatrix"""
        return _modshogun.SparseBoolFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseBoolFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseBoolFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseBoolFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseBoolFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseBoolFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseBoolFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseBoolFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseBoolFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseBoolFeatures_write_svmlight_file(self, *args)

SparseBoolFeatures_swigregister = _modshogun.SparseBoolFeatures_swigregister
SparseBoolFeatures_swigregister(SparseBoolFeatures)

class SparseCharFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseCharFeatures
        __init__(self) -> SparseCharFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseCharFeatures
        __init__(self, src, num_feat, num_vec) -> SparseCharFeatures
        __init__(self, sparse) -> SparseCharFeatures
        __init__(self, dense) -> SparseCharFeatures
        __init__(self, orig) -> SparseCharFeatures
        __init__(self, loader) -> SparseCharFeatures
        """
        this = _modshogun.new_SparseCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseCharFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseCharFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseCharFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> str"""
        return _modshogun.SparseCharFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> CharVector"""
        return _modshogun.SparseCharFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> CharSparseVector"""
        return _modshogun.SparseCharFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> CharSparseMatrix"""
        return _modshogun.SparseCharFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseCharFeatures"""
        return _modshogun.SparseCharFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseCharFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> CharMatrix"""
        return _modshogun.SparseCharFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseCharFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseCharFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseCharFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseCharFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseCharFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseCharFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseCharFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseCharFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseCharFeatures_write_svmlight_file(self, *args)

SparseCharFeatures_swigregister = _modshogun.SparseCharFeatures_swigregister
SparseCharFeatures_swigregister(SparseCharFeatures)

class SparseByteFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseByteFeatures
        __init__(self) -> SparseByteFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseByteFeatures
        __init__(self, src, num_feat, num_vec) -> SparseByteFeatures
        __init__(self, sparse) -> SparseByteFeatures
        __init__(self, dense) -> SparseByteFeatures
        __init__(self, orig) -> SparseByteFeatures
        __init__(self, loader) -> SparseByteFeatures
        """
        this = _modshogun.new_SparseByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseByteFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseByteFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseByteFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> unsigned str"""
        return _modshogun.SparseByteFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> ByteVector"""
        return _modshogun.SparseByteFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> ByteSparseVector"""
        return _modshogun.SparseByteFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> ByteSparseMatrix"""
        return _modshogun.SparseByteFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseByteFeatures"""
        return _modshogun.SparseByteFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseByteFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> ByteMatrix"""
        return _modshogun.SparseByteFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseByteFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseByteFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseByteFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseByteFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseByteFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseByteFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseByteFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseByteFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseByteFeatures_write_svmlight_file(self, *args)

SparseByteFeatures_swigregister = _modshogun.SparseByteFeatures_swigregister
SparseByteFeatures_swigregister(SparseByteFeatures)

class SparseWordFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseWordFeatures
        __init__(self) -> SparseWordFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseWordFeatures
        __init__(self, src, num_feat, num_vec) -> SparseWordFeatures
        __init__(self, sparse) -> SparseWordFeatures
        __init__(self, dense) -> SparseWordFeatures
        __init__(self, orig) -> SparseWordFeatures
        __init__(self, loader) -> SparseWordFeatures
        """
        this = _modshogun.new_SparseWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseWordFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseWordFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseWordFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> unsigned short"""
        return _modshogun.SparseWordFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> WordVector"""
        return _modshogun.SparseWordFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> WordSparseVector"""
        return _modshogun.SparseWordFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> WordSparseMatrix"""
        return _modshogun.SparseWordFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseWordFeatures"""
        return _modshogun.SparseWordFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseWordFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> WordMatrix"""
        return _modshogun.SparseWordFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseWordFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseWordFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseWordFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseWordFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseWordFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseWordFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseWordFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseWordFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseWordFeatures_write_svmlight_file(self, *args)

SparseWordFeatures_swigregister = _modshogun.SparseWordFeatures_swigregister
SparseWordFeatures_swigregister(SparseWordFeatures)

class SparseIntFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseIntFeatures
        __init__(self) -> SparseIntFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseIntFeatures
        __init__(self, src, num_feat, num_vec) -> SparseIntFeatures
        __init__(self, sparse) -> SparseIntFeatures
        __init__(self, dense) -> SparseIntFeatures
        __init__(self, orig) -> SparseIntFeatures
        __init__(self, loader) -> SparseIntFeatures
        """
        this = _modshogun.new_SparseIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseIntFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseIntFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseIntFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> int"""
        return _modshogun.SparseIntFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> IntVector"""
        return _modshogun.SparseIntFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> IntSparseVector"""
        return _modshogun.SparseIntFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> IntSparseMatrix"""
        return _modshogun.SparseIntFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseIntFeatures"""
        return _modshogun.SparseIntFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseIntFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> IntMatrix"""
        return _modshogun.SparseIntFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseIntFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseIntFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseIntFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseIntFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseIntFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseIntFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseIntFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseIntFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseIntFeatures_write_svmlight_file(self, *args)

SparseIntFeatures_swigregister = _modshogun.SparseIntFeatures_swigregister
SparseIntFeatures_swigregister(SparseIntFeatures)

class SparseLongFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseLongFeatures
        __init__(self) -> SparseLongFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseLongFeatures
        __init__(self, src, num_feat, num_vec) -> SparseLongFeatures
        __init__(self, sparse) -> SparseLongFeatures
        __init__(self, dense) -> SparseLongFeatures
        __init__(self, orig) -> SparseLongFeatures
        __init__(self, loader) -> SparseLongFeatures
        """
        this = _modshogun.new_SparseLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseLongFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseLongFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseLongFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> long"""
        return _modshogun.SparseLongFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> LongIntVector"""
        return _modshogun.SparseLongFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> LongIntSparseVector"""
        return _modshogun.SparseLongFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> LongIntSparseMatrix"""
        return _modshogun.SparseLongFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseLongFeatures"""
        return _modshogun.SparseLongFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseLongFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> LongIntMatrix"""
        return _modshogun.SparseLongFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseLongFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseLongFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseLongFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseLongFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseLongFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseLongFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseLongFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseLongFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseLongFeatures_write_svmlight_file(self, *args)

SparseLongFeatures_swigregister = _modshogun.SparseLongFeatures_swigregister
SparseLongFeatures_swigregister(SparseLongFeatures)

class SparseUlongFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseUlongFeatures
        __init__(self) -> SparseUlongFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseUlongFeatures
        __init__(self, src, num_feat, num_vec) -> SparseUlongFeatures
        __init__(self, sparse) -> SparseUlongFeatures
        __init__(self, dense) -> SparseUlongFeatures
        __init__(self, orig) -> SparseUlongFeatures
        __init__(self, loader) -> SparseUlongFeatures
        """
        this = _modshogun.new_SparseUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseUlongFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseUlongFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseUlongFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> unsigned long"""
        return _modshogun.SparseUlongFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> ULongIntVector"""
        return _modshogun.SparseUlongFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> ULongIntSparseVector"""
        return _modshogun.SparseUlongFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> ULongIntSparseMatrix"""
        return _modshogun.SparseUlongFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseUlongFeatures"""
        return _modshogun.SparseUlongFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseUlongFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> ULongIntMatrix"""
        return _modshogun.SparseUlongFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseUlongFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseUlongFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseUlongFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseUlongFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseUlongFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseUlongFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseUlongFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseUlongFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseUlongFeatures_write_svmlight_file(self, *args)

SparseUlongFeatures_swigregister = _modshogun.SparseUlongFeatures_swigregister
SparseUlongFeatures_swigregister(SparseUlongFeatures)

class SparseShortRealFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseShortRealFeatures
        __init__(self) -> SparseShortRealFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseShortRealFeatures
        __init__(self, src, num_feat, num_vec) -> SparseShortRealFeatures
        __init__(self, sparse) -> SparseShortRealFeatures
        __init__(self, dense) -> SparseShortRealFeatures
        __init__(self, orig) -> SparseShortRealFeatures
        __init__(self, loader) -> SparseShortRealFeatures
        """
        this = _modshogun.new_SparseShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseShortRealFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseShortRealFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseShortRealFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> float"""
        return _modshogun.SparseShortRealFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> ShortRealVector"""
        return _modshogun.SparseShortRealFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> ShortRealSparseVector"""
        return _modshogun.SparseShortRealFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> ShortRealSparseMatrix"""
        return _modshogun.SparseShortRealFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseShortRealFeatures"""
        return _modshogun.SparseShortRealFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseShortRealFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> ShortRealMatrix"""
        return _modshogun.SparseShortRealFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseShortRealFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseShortRealFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseShortRealFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseShortRealFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseShortRealFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseShortRealFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseShortRealFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseShortRealFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseShortRealFeatures_write_svmlight_file(self, *args)

SparseShortRealFeatures_swigregister = _modshogun.SparseShortRealFeatures_swigregister
SparseShortRealFeatures_swigregister(SparseShortRealFeatures)

class SparseRealFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparseFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> SparseRealFeatures
        __init__(self) -> SparseRealFeatures
        __init__(self, src, num_feat, num_vec, copy=False) -> SparseRealFeatures
        __init__(self, src, num_feat, num_vec) -> SparseRealFeatures
        __init__(self, sparse) -> SparseRealFeatures
        __init__(self, dense) -> SparseRealFeatures
        __init__(self, orig) -> SparseRealFeatures
        __init__(self, loader) -> SparseRealFeatures
        """
        this = _modshogun.new_SparseRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseRealFeatures
    __del__ = lambda self : None;
    def free_sparse_feature_matrix(self):
        """free_sparse_feature_matrix(self)"""
        return _modshogun.SparseRealFeatures_free_sparse_feature_matrix(self)

    def free_sparse_features(self):
        """free_sparse_features(self)"""
        return _modshogun.SparseRealFeatures_free_sparse_features(self)

    def get_feature(self, *args):
        """get_feature(self, num, index) -> float"""
        return _modshogun.SparseRealFeatures_get_feature(self, *args)

    def get_full_feature_vector(self, *args):
        """get_full_feature_vector(self, num) -> RealVector"""
        return _modshogun.SparseRealFeatures_get_full_feature_vector(self, *args)

    def get_sparse_feature_vector(self, *args):
        """get_sparse_feature_vector(self, num) -> RealSparseVector"""
        return _modshogun.SparseRealFeatures_get_sparse_feature_vector(self, *args)

    def get_sparse_feature_matrix(self):
        """get_sparse_feature_matrix(self) -> RealSparseMatrix"""
        return _modshogun.SparseRealFeatures_get_sparse_feature_matrix(self)

    def get_transposed(self):
        """get_transposed(self) -> SparseRealFeatures"""
        return _modshogun.SparseRealFeatures_get_transposed(self)

    def set_sparse_feature_matrix(self, *args):
        """set_sparse_feature_matrix(self, sm)"""
        return _modshogun.SparseRealFeatures_set_sparse_feature_matrix(self, *args)

    def get_full_feature_matrix(self):
        """get_full_feature_matrix(self) -> RealMatrix"""
        return _modshogun.SparseRealFeatures_get_full_feature_matrix(self)

    def set_full_feature_matrix(self, *args):
        """set_full_feature_matrix(self, full) -> bool"""
        return _modshogun.SparseRealFeatures_set_full_feature_matrix(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.SparseRealFeatures_apply_preprocessor(self, force_preprocessing)

    def obtain_from_simple(self, *args):
        """obtain_from_simple(self, sf) -> bool"""
        return _modshogun.SparseRealFeatures_obtain_from_simple(self, *args)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.SparseRealFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.SparseRealFeatures_set_num_features(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.SparseRealFeatures_get_num_nonzero_entries(self)

    def load_svmlight_file(self, *args):
        """
        load_svmlight_file(self, fname, do_sort_features=True) -> Labels
        load_svmlight_file(self, fname) -> Labels
        """
        return _modshogun.SparseRealFeatures_load_svmlight_file(self, *args)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.SparseRealFeatures_sort_features(self)

    def write_svmlight_file(self, *args):
        """write_svmlight_file(self, fname, label) -> bool"""
        return _modshogun.SparseRealFeatures_write_svmlight_file(self, *args)

SparseRealFeatures_swigregister = _modshogun.SparseRealFeatures_swigregister
SparseRealFeatures_swigregister(SparseRealFeatures)

class StreamingSparseBoolFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseBoolFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseBoolFeatures
        """
        this = _modshogun.new_StreamingSparseBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseBoolFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> bool"""
        return _modshogun.StreamingSparseBoolFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> BoolSparseVector"""
        return _modshogun.StreamingSparseBoolFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseBoolFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseBoolFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseBoolFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseBoolFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseBoolFeatures_sort_features(self)

StreamingSparseBoolFeatures_swigregister = _modshogun.StreamingSparseBoolFeatures_swigregister
StreamingSparseBoolFeatures_swigregister(StreamingSparseBoolFeatures)

class StreamingSparseCharFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseCharFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseCharFeatures
        """
        this = _modshogun.new_StreamingSparseCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseCharFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> str"""
        return _modshogun.StreamingSparseCharFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> CharSparseVector"""
        return _modshogun.StreamingSparseCharFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseCharFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseCharFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseCharFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseCharFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseCharFeatures_sort_features(self)

StreamingSparseCharFeatures_swigregister = _modshogun.StreamingSparseCharFeatures_swigregister
StreamingSparseCharFeatures_swigregister(StreamingSparseCharFeatures)

class StreamingSparseByteFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseByteFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseByteFeatures
        """
        this = _modshogun.new_StreamingSparseByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseByteFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> unsigned str"""
        return _modshogun.StreamingSparseByteFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> ByteSparseVector"""
        return _modshogun.StreamingSparseByteFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseByteFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseByteFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseByteFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseByteFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseByteFeatures_sort_features(self)

StreamingSparseByteFeatures_swigregister = _modshogun.StreamingSparseByteFeatures_swigregister
StreamingSparseByteFeatures_swigregister(StreamingSparseByteFeatures)

class StreamingSparseWordFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseWordFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseWordFeatures
        """
        this = _modshogun.new_StreamingSparseWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseWordFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> unsigned short"""
        return _modshogun.StreamingSparseWordFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> WordSparseVector"""
        return _modshogun.StreamingSparseWordFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseWordFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseWordFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseWordFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseWordFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseWordFeatures_sort_features(self)

StreamingSparseWordFeatures_swigregister = _modshogun.StreamingSparseWordFeatures_swigregister
StreamingSparseWordFeatures_swigregister(StreamingSparseWordFeatures)

class StreamingSparseIntFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseIntFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseIntFeatures
        """
        this = _modshogun.new_StreamingSparseIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseIntFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> int"""
        return _modshogun.StreamingSparseIntFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> IntSparseVector"""
        return _modshogun.StreamingSparseIntFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseIntFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseIntFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseIntFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseIntFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseIntFeatures_sort_features(self)

StreamingSparseIntFeatures_swigregister = _modshogun.StreamingSparseIntFeatures_swigregister
StreamingSparseIntFeatures_swigregister(StreamingSparseIntFeatures)

class StreamingSparseLongFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseLongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseLongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseLongFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseLongFeatures
        """
        this = _modshogun.new_StreamingSparseLongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseLongFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> long"""
        return _modshogun.StreamingSparseLongFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> LongIntSparseVector"""
        return _modshogun.StreamingSparseLongFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseLongFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseLongFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseLongFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseLongFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseLongFeatures_sort_features(self)

StreamingSparseLongFeatures_swigregister = _modshogun.StreamingSparseLongFeatures_swigregister
StreamingSparseLongFeatures_swigregister(StreamingSparseLongFeatures)

class StreamingSparseUlongFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseUlongFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseUlongFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseUlongFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseUlongFeatures
        """
        this = _modshogun.new_StreamingSparseUlongFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseUlongFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> unsigned long"""
        return _modshogun.StreamingSparseUlongFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> ULongIntSparseVector"""
        return _modshogun.StreamingSparseUlongFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseUlongFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseUlongFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseUlongFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseUlongFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseUlongFeatures_sort_features(self)

StreamingSparseUlongFeatures_swigregister = _modshogun.StreamingSparseUlongFeatures_swigregister
StreamingSparseUlongFeatures_swigregister(StreamingSparseUlongFeatures)

class StreamingSparseShortRealFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseShortRealFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseShortRealFeatures
        """
        this = _modshogun.new_StreamingSparseShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseShortRealFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> float"""
        return _modshogun.StreamingSparseShortRealFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> ShortRealSparseVector"""
        return _modshogun.StreamingSparseShortRealFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseShortRealFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseShortRealFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseShortRealFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseShortRealFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseShortRealFeatures_sort_features(self)

StreamingSparseShortRealFeatures_swigregister = _modshogun.StreamingSparseShortRealFeatures_swigregister
StreamingSparseShortRealFeatures_swigregister(StreamingSparseShortRealFeatures)

class StreamingSparseRealFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSparseFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingSparseRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingSparseRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingSparseRealFeatures
        __init__(self, file, is_labelled, size) -> StreamingSparseRealFeatures
        """
        this = _modshogun.new_StreamingSparseRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingSparseRealFeatures
    __del__ = lambda self : None;
    def get_feature(self, *args):
        """get_feature(self, index) -> float"""
        return _modshogun.StreamingSparseRealFeatures_get_feature(self, *args)

    def get_vector(self):
        """get_vector(self) -> RealSparseVector"""
        return _modshogun.StreamingSparseRealFeatures_get_vector(self)

    def set_num_features(self, *args):
        """set_num_features(self, num) ->  int"""
        return _modshogun.StreamingSparseRealFeatures_set_num_features(self, *args)

    def expand_if_required(self, *args):
        """
        expand_if_required(self, vec, len)
        expand_if_required(self, vec, len)
        """
        return _modshogun.StreamingSparseRealFeatures_expand_if_required(self, *args)

    def get_num_nonzero_entries(self):
        """get_num_nonzero_entries(self) -> int"""
        return _modshogun.StreamingSparseRealFeatures_get_num_nonzero_entries(self)

    def compute_squared(self):
        """compute_squared(self) -> float"""
        return _modshogun.StreamingSparseRealFeatures_compute_squared(self)

    def sort_features(self):
        """sort_features(self)"""
        return _modshogun.StreamingSparseRealFeatures_sort_features(self)

StreamingSparseRealFeatures_swigregister = _modshogun.StreamingSparseRealFeatures_swigregister
StreamingSparseRealFeatures_swigregister(StreamingSparseRealFeatures)

class BoolFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> BoolFeatures
        __init__(self) -> BoolFeatures
        __init__(self, orig) -> BoolFeatures
        __init__(self, matrix) -> BoolFeatures
        __init__(self, loader) -> BoolFeatures
        """
        this = _modshogun.new_BoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_BoolFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.BoolFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.BoolFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.BoolFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> BoolVector"""
        return _modshogun.BoolFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> BoolMatrix"""
        return _modshogun.BoolFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> BoolMatrix"""
        return _modshogun.BoolFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.BoolFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> BoolFeatures"""
        return _modshogun.BoolFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.BoolFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.BoolFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.BoolFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.BoolFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.BoolFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.BoolFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.BoolFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.BoolFeatures_Align_char_features(self, *args)

BoolFeatures_swigregister = _modshogun.BoolFeatures_swigregister
BoolFeatures_swigregister(BoolFeatures)

class CharFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> CharFeatures
        __init__(self) -> CharFeatures
        __init__(self, orig) -> CharFeatures
        __init__(self, matrix) -> CharFeatures
        __init__(self, loader) -> CharFeatures
        """
        this = _modshogun.new_CharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CharFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.CharFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.CharFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.CharFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> CharVector"""
        return _modshogun.CharFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> CharMatrix"""
        return _modshogun.CharFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> CharMatrix"""
        return _modshogun.CharFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.CharFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> CharFeatures"""
        return _modshogun.CharFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.CharFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.CharFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.CharFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.CharFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.CharFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.CharFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.CharFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.CharFeatures_Align_char_features(self, *args)

CharFeatures_swigregister = _modshogun.CharFeatures_swigregister
CharFeatures_swigregister(CharFeatures)

class ByteFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> ByteFeatures
        __init__(self) -> ByteFeatures
        __init__(self, orig) -> ByteFeatures
        __init__(self, matrix) -> ByteFeatures
        __init__(self, loader) -> ByteFeatures
        """
        this = _modshogun.new_ByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ByteFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.ByteFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.ByteFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.ByteFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> ByteVector"""
        return _modshogun.ByteFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> ByteMatrix"""
        return _modshogun.ByteFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> ByteMatrix"""
        return _modshogun.ByteFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.ByteFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> ByteFeatures"""
        return _modshogun.ByteFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.ByteFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.ByteFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.ByteFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.ByteFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.ByteFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.ByteFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.ByteFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.ByteFeatures_Align_char_features(self, *args)

ByteFeatures_swigregister = _modshogun.ByteFeatures_swigregister
ByteFeatures_swigregister(ByteFeatures)

class WordFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> WordFeatures
        __init__(self) -> WordFeatures
        __init__(self, orig) -> WordFeatures
        __init__(self, matrix) -> WordFeatures
        __init__(self, loader) -> WordFeatures
        """
        this = _modshogun.new_WordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WordFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.WordFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.WordFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.WordFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> WordVector"""
        return _modshogun.WordFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> WordMatrix"""
        return _modshogun.WordFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> WordMatrix"""
        return _modshogun.WordFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.WordFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> WordFeatures"""
        return _modshogun.WordFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.WordFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.WordFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.WordFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.WordFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.WordFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.WordFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.WordFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.WordFeatures_Align_char_features(self, *args)

WordFeatures_swigregister = _modshogun.WordFeatures_swigregister
WordFeatures_swigregister(WordFeatures)

class IntFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> IntFeatures
        __init__(self) -> IntFeatures
        __init__(self, orig) -> IntFeatures
        __init__(self, matrix) -> IntFeatures
        __init__(self, loader) -> IntFeatures
        """
        this = _modshogun.new_IntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_IntFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.IntFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.IntFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.IntFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> IntVector"""
        return _modshogun.IntFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> IntMatrix"""
        return _modshogun.IntFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> IntMatrix"""
        return _modshogun.IntFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.IntFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> IntFeatures"""
        return _modshogun.IntFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.IntFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.IntFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.IntFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.IntFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.IntFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.IntFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.IntFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.IntFeatures_Align_char_features(self, *args)

IntFeatures_swigregister = _modshogun.IntFeatures_swigregister
IntFeatures_swigregister(IntFeatures)

class LongIntFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> LongIntFeatures
        __init__(self) -> LongIntFeatures
        __init__(self, orig) -> LongIntFeatures
        __init__(self, matrix) -> LongIntFeatures
        __init__(self, loader) -> LongIntFeatures
        """
        this = _modshogun.new_LongIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LongIntFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.LongIntFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.LongIntFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.LongIntFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> LongIntVector"""
        return _modshogun.LongIntFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> LongIntMatrix"""
        return _modshogun.LongIntFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> LongIntMatrix"""
        return _modshogun.LongIntFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.LongIntFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> LongIntFeatures"""
        return _modshogun.LongIntFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.LongIntFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.LongIntFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.LongIntFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.LongIntFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.LongIntFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.LongIntFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.LongIntFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.LongIntFeatures_Align_char_features(self, *args)

LongIntFeatures_swigregister = _modshogun.LongIntFeatures_swigregister
LongIntFeatures_swigregister(LongIntFeatures)

class ULongIntFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ULongIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> ULongIntFeatures
        __init__(self) -> ULongIntFeatures
        __init__(self, orig) -> ULongIntFeatures
        __init__(self, matrix) -> ULongIntFeatures
        __init__(self, loader) -> ULongIntFeatures
        """
        this = _modshogun.new_ULongIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ULongIntFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.ULongIntFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.ULongIntFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.ULongIntFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> ULongIntVector"""
        return _modshogun.ULongIntFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> ULongIntMatrix"""
        return _modshogun.ULongIntFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> ULongIntMatrix"""
        return _modshogun.ULongIntFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.ULongIntFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> ULongIntFeatures"""
        return _modshogun.ULongIntFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.ULongIntFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.ULongIntFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.ULongIntFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.ULongIntFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.ULongIntFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.ULongIntFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.ULongIntFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.ULongIntFeatures_Align_char_features(self, *args)

ULongIntFeatures_swigregister = _modshogun.ULongIntFeatures_swigregister
ULongIntFeatures_swigregister(ULongIntFeatures)

class ShortRealFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> ShortRealFeatures
        __init__(self) -> ShortRealFeatures
        __init__(self, orig) -> ShortRealFeatures
        __init__(self, matrix) -> ShortRealFeatures
        __init__(self, loader) -> ShortRealFeatures
        """
        this = _modshogun.new_ShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ShortRealFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.ShortRealFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.ShortRealFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.ShortRealFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> ShortRealVector"""
        return _modshogun.ShortRealFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> ShortRealMatrix"""
        return _modshogun.ShortRealFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> ShortRealMatrix"""
        return _modshogun.ShortRealFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.ShortRealFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> ShortRealFeatures"""
        return _modshogun.ShortRealFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.ShortRealFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.ShortRealFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.ShortRealFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.ShortRealFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.ShortRealFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.ShortRealFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.ShortRealFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.ShortRealFeatures_Align_char_features(self, *args)

ShortRealFeatures_swigregister = _modshogun.ShortRealFeatures_swigregister
ShortRealFeatures_swigregister(ShortRealFeatures)

class RealFeatures(DotFeatures):
    """Proxy of C++ shogun::CSimpleFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> RealFeatures
        __init__(self) -> RealFeatures
        __init__(self, orig) -> RealFeatures
        __init__(self, matrix) -> RealFeatures
        __init__(self, loader) -> RealFeatures
        """
        this = _modshogun.new_RealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RealFeatures
    __del__ = lambda self : None;
    def free_feature_matrix(self):
        """free_feature_matrix(self)"""
        return _modshogun.RealFeatures_free_feature_matrix(self)

    def free_features(self):
        """free_features(self)"""
        return _modshogun.RealFeatures_free_features(self)

    def set_feature_vector(self, *args):
        """set_feature_vector(self, vector, num)"""
        return _modshogun.RealFeatures_set_feature_vector(self, *args)

    def get_feature_vector(self, *args):
        """get_feature_vector(self, num) -> RealVector"""
        return _modshogun.RealFeatures_get_feature_vector(self, *args)

    def get_feature_matrix(self):
        """get_feature_matrix(self) -> RealMatrix"""
        return _modshogun.RealFeatures_get_feature_matrix(self)

    def steal_feature_matrix(self):
        """steal_feature_matrix(self) -> RealMatrix"""
        return _modshogun.RealFeatures_steal_feature_matrix(self)

    def set_feature_matrix(self, *args):
        """set_feature_matrix(self, matrix)"""
        return _modshogun.RealFeatures_set_feature_matrix(self, *args)

    def get_transposed(self):
        """get_transposed(self) -> RealFeatures"""
        return _modshogun.RealFeatures_get_transposed(self)

    def copy_feature_matrix(self, *args):
        """copy_feature_matrix(self, src)"""
        return _modshogun.RealFeatures_copy_feature_matrix(self, *args)

    def obtain_from_dot(self, *args):
        """obtain_from_dot(self, df)"""
        return _modshogun.RealFeatures_obtain_from_dot(self, *args)

    def apply_preprocessor(self, force_preprocessing=False):
        """
        apply_preprocessor(self, force_preprocessing=False) -> bool
        apply_preprocessor(self) -> bool
        """
        return _modshogun.RealFeatures_apply_preprocessor(self, force_preprocessing)

    def get_num_features(self):
        """get_num_features(self) ->  int"""
        return _modshogun.RealFeatures_get_num_features(self)

    def set_num_features(self, *args):
        """set_num_features(self, num)"""
        return _modshogun.RealFeatures_set_num_features(self, *args)

    def set_num_vectors(self, *args):
        """set_num_vectors(self, num)"""
        return _modshogun.RealFeatures_set_num_vectors(self, *args)

    def initialize_cache(self):
        """initialize_cache(self)"""
        return _modshogun.RealFeatures_initialize_cache(self)

    def Align_char_features(self, *args):
        """Align_char_features(self, cf, Ref, gapCost) -> bool"""
        return _modshogun.RealFeatures_Align_char_features(self, *args)

RealFeatures_swigregister = _modshogun.RealFeatures_swigregister
RealFeatures_swigregister(RealFeatures)

class StreamingBoolFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(bool)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingBoolFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingBoolFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingBoolFeatures
        __init__(self, file, is_labelled, size) -> StreamingBoolFeatures
        __init__(self, simple_features, lab=None) -> StreamingBoolFeatures
        __init__(self, simple_features) -> StreamingBoolFeatures
        """
        this = _modshogun.new_StreamingBoolFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingBoolFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> BoolVector"""
        return _modshogun.StreamingBoolFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingBoolFeatures_dot(self, *args)

StreamingBoolFeatures_swigregister = _modshogun.StreamingBoolFeatures_swigregister
StreamingBoolFeatures_swigregister(StreamingBoolFeatures)

class StreamingCharFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingCharFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingCharFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingCharFeatures
        __init__(self, file, is_labelled, size) -> StreamingCharFeatures
        __init__(self, simple_features, lab=None) -> StreamingCharFeatures
        __init__(self, simple_features) -> StreamingCharFeatures
        """
        this = _modshogun.new_StreamingCharFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingCharFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> CharVector"""
        return _modshogun.StreamingCharFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingCharFeatures_dot(self, *args)

StreamingCharFeatures_swigregister = _modshogun.StreamingCharFeatures_swigregister
StreamingCharFeatures_swigregister(StreamingCharFeatures)

class StreamingByteFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingByteFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingByteFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingByteFeatures
        __init__(self, file, is_labelled, size) -> StreamingByteFeatures
        __init__(self, simple_features, lab=None) -> StreamingByteFeatures
        __init__(self, simple_features) -> StreamingByteFeatures
        """
        this = _modshogun.new_StreamingByteFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingByteFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> ByteVector"""
        return _modshogun.StreamingByteFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingByteFeatures_dot(self, *args)

StreamingByteFeatures_swigregister = _modshogun.StreamingByteFeatures_swigregister
StreamingByteFeatures_swigregister(StreamingByteFeatures)

class StreamingWordFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingWordFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingWordFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingWordFeatures
        __init__(self, file, is_labelled, size) -> StreamingWordFeatures
        __init__(self, simple_features, lab=None) -> StreamingWordFeatures
        __init__(self, simple_features) -> StreamingWordFeatures
        """
        this = _modshogun.new_StreamingWordFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingWordFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> WordVector"""
        return _modshogun.StreamingWordFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingWordFeatures_dot(self, *args)

StreamingWordFeatures_swigregister = _modshogun.StreamingWordFeatures_swigregister
StreamingWordFeatures_swigregister(StreamingWordFeatures)

class StreamingIntFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingIntFeatures
        __init__(self, file, is_labelled, size) -> StreamingIntFeatures
        __init__(self, simple_features, lab=None) -> StreamingIntFeatures
        __init__(self, simple_features) -> StreamingIntFeatures
        """
        this = _modshogun.new_StreamingIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingIntFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> IntVector"""
        return _modshogun.StreamingIntFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingIntFeatures_dot(self, *args)

StreamingIntFeatures_swigregister = _modshogun.StreamingIntFeatures_swigregister
StreamingIntFeatures_swigregister(StreamingIntFeatures)

class StreamingLongIntFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingLongIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingLongIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingLongIntFeatures
        __init__(self, file, is_labelled, size) -> StreamingLongIntFeatures
        __init__(self, simple_features, lab=None) -> StreamingLongIntFeatures
        __init__(self, simple_features) -> StreamingLongIntFeatures
        """
        this = _modshogun.new_StreamingLongIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingLongIntFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> LongIntVector"""
        return _modshogun.StreamingLongIntFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingLongIntFeatures_dot(self, *args)

StreamingLongIntFeatures_swigregister = _modshogun.StreamingLongIntFeatures_swigregister
StreamingLongIntFeatures_swigregister(StreamingLongIntFeatures)

class StreamingULongIntFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingULongIntFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingULongIntFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingULongIntFeatures
        __init__(self, file, is_labelled, size) -> StreamingULongIntFeatures
        __init__(self, simple_features, lab=None) -> StreamingULongIntFeatures
        __init__(self, simple_features) -> StreamingULongIntFeatures
        """
        this = _modshogun.new_StreamingULongIntFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingULongIntFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> ULongIntVector"""
        return _modshogun.StreamingULongIntFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingULongIntFeatures_dot(self, *args)

StreamingULongIntFeatures_swigregister = _modshogun.StreamingULongIntFeatures_swigregister
StreamingULongIntFeatures_swigregister(StreamingULongIntFeatures)

class StreamingShortRealFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(float32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingShortRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingShortRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingShortRealFeatures
        __init__(self, file, is_labelled, size) -> StreamingShortRealFeatures
        __init__(self, simple_features, lab=None) -> StreamingShortRealFeatures
        __init__(self, simple_features) -> StreamingShortRealFeatures
        """
        this = _modshogun.new_StreamingShortRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingShortRealFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> ShortRealVector"""
        return _modshogun.StreamingShortRealFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingShortRealFeatures_dot(self, *args)

StreamingShortRealFeatures_swigregister = _modshogun.StreamingShortRealFeatures_swigregister
StreamingShortRealFeatures_swigregister(StreamingShortRealFeatures)

class StreamingRealFeatures(StreamingDotFeatures):
    """Proxy of C++ shogun::CStreamingSimpleFeatures<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamingRealFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamingDotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamingRealFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StreamingRealFeatures
        __init__(self, file, is_labelled, size) -> StreamingRealFeatures
        __init__(self, simple_features, lab=None) -> StreamingRealFeatures
        __init__(self, simple_features) -> StreamingRealFeatures
        """
        this = _modshogun.new_StreamingRealFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StreamingRealFeatures
    __del__ = lambda self : None;
    def get_vector(self):
        """get_vector(self) -> RealVector"""
        return _modshogun.StreamingRealFeatures_get_vector(self)

    def dot(self, *args):
        """
        dot(self, vec) -> float
        dot(self, df) -> float
        """
        return _modshogun.StreamingRealFeatures_dot(self, *args)

StreamingRealFeatures_swigregister = _modshogun.StreamingRealFeatures_swigregister
StreamingRealFeatures_swigregister(StreamingRealFeatures)

class DummyFeatures(Features):
    """Proxy of C++ shogun::CDummyFeatures class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DummyFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DummyFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DummyFeatures
        __init__(self, num) -> DummyFeatures
        __init__(self, orig) -> DummyFeatures
        """
        this = _modshogun.new_DummyFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DummyFeatures
    __del__ = lambda self : None;
DummyFeatures_swigregister = _modshogun.DummyFeatures_swigregister
DummyFeatures_swigregister(DummyFeatures)

class AttributeFeatures(Features):
    """Proxy of C++ shogun::CAttributeFeatures class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_AttributeFeatures
    __del__ = lambda self : None;
    def get_attribute(self, *args):
        """get_attribute(self, attr_name) -> Features"""
        return _modshogun.AttributeFeatures_get_attribute(self, *args)

    def get_attribute_by_index(self, *args):
        """get_attribute_by_index(self, idx, attr_name, attr_obj)"""
        return _modshogun.AttributeFeatures_get_attribute_by_index(self, *args)

    def set_attribute(self, *args):
        """set_attribute(self, attr_name, attr_obj) -> bool"""
        return _modshogun.AttributeFeatures_set_attribute(self, *args)

    def del_attribute(self, *args):
        """del_attribute(self, attr_name) -> bool"""
        return _modshogun.AttributeFeatures_del_attribute(self, *args)

    def get_num_attributes(self):
        """get_num_attributes(self) ->  int"""
        return _modshogun.AttributeFeatures_get_num_attributes(self)

AttributeFeatures_swigregister = _modshogun.AttributeFeatures_swigregister
AttributeFeatures_swigregister(AttributeFeatures)

class CombinedFeatures(Features):
    """Proxy of C++ shogun::CCombinedFeatures class"""
    __swig_setmethods__ = {}
    for _s in [Features]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombinedFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [Features]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombinedFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CombinedFeatures
        __init__(self, orig) -> CombinedFeatures
        """
        this = _modshogun.new_CombinedFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CombinedFeatures
    __del__ = lambda self : None;
    def list_feature_objs(self):
        """list_feature_objs(self)"""
        return _modshogun.CombinedFeatures_list_feature_objs(self)

    def check_feature_obj_compatibility(self, *args):
        """check_feature_obj_compatibility(self, comb_feat) -> bool"""
        return _modshogun.CombinedFeatures_check_feature_obj_compatibility(self, *args)

    def get_first_feature_obj(self, *args):
        """
        get_first_feature_obj(self) -> Features
        get_first_feature_obj(self, current) -> Features
        """
        return _modshogun.CombinedFeatures_get_first_feature_obj(self, *args)

    def get_next_feature_obj(self, *args):
        """
        get_next_feature_obj(self) -> Features
        get_next_feature_obj(self, current) -> Features
        """
        return _modshogun.CombinedFeatures_get_next_feature_obj(self, *args)

    def get_last_feature_obj(self):
        """get_last_feature_obj(self) -> Features"""
        return _modshogun.CombinedFeatures_get_last_feature_obj(self)

    def insert_feature_obj(self, *args):
        """insert_feature_obj(self, obj) -> bool"""
        return _modshogun.CombinedFeatures_insert_feature_obj(self, *args)

    def append_feature_obj(self, *args):
        """append_feature_obj(self, obj) -> bool"""
        return _modshogun.CombinedFeatures_append_feature_obj(self, *args)

    def delete_feature_obj(self):
        """delete_feature_obj(self) -> bool"""
        return _modshogun.CombinedFeatures_delete_feature_obj(self)

    def get_num_feature_obj(self):
        """get_num_feature_obj(self) ->  int"""
        return _modshogun.CombinedFeatures_get_num_feature_obj(self)

CombinedFeatures_swigregister = _modshogun.CombinedFeatures_swigregister
CombinedFeatures_swigregister(CombinedFeatures)

class CombinedDotFeatures(DotFeatures):
    """Proxy of C++ shogun::CCombinedDotFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombinedDotFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombinedDotFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CombinedDotFeatures
        __init__(self, orig) -> CombinedDotFeatures
        """
        this = _modshogun.new_CombinedDotFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CombinedDotFeatures
    __del__ = lambda self : None;
    def list_feature_objs(self):
        """list_feature_objs(self)"""
        return _modshogun.CombinedDotFeatures_list_feature_objs(self)

    def get_first_feature_obj(self, *args):
        """
        get_first_feature_obj(self) -> DotFeatures
        get_first_feature_obj(self, current) -> DotFeatures
        """
        return _modshogun.CombinedDotFeatures_get_first_feature_obj(self, *args)

    def get_next_feature_obj(self, *args):
        """
        get_next_feature_obj(self) -> DotFeatures
        get_next_feature_obj(self, current) -> DotFeatures
        """
        return _modshogun.CombinedDotFeatures_get_next_feature_obj(self, *args)

    def get_last_feature_obj(self):
        """get_last_feature_obj(self) -> DotFeatures"""
        return _modshogun.CombinedDotFeatures_get_last_feature_obj(self)

    def insert_feature_obj(self, *args):
        """insert_feature_obj(self, obj) -> bool"""
        return _modshogun.CombinedDotFeatures_insert_feature_obj(self, *args)

    def append_feature_obj(self, *args):
        """append_feature_obj(self, obj) -> bool"""
        return _modshogun.CombinedDotFeatures_append_feature_obj(self, *args)

    def delete_feature_obj(self):
        """delete_feature_obj(self) -> bool"""
        return _modshogun.CombinedDotFeatures_delete_feature_obj(self)

    def get_num_feature_obj(self):
        """get_num_feature_obj(self) ->  int"""
        return _modshogun.CombinedDotFeatures_get_num_feature_obj(self)

    def get_subfeature_weights(self, *args):
        """get_subfeature_weights(self, weights, num_weights)"""
        return _modshogun.CombinedDotFeatures_get_subfeature_weights(self, *args)

    def set_subfeature_weights(self, *args):
        """set_subfeature_weights(self, weights, num_weights)"""
        return _modshogun.CombinedDotFeatures_set_subfeature_weights(self, *args)

CombinedDotFeatures_swigregister = _modshogun.CombinedDotFeatures_swigregister
CombinedDotFeatures_swigregister(CombinedDotFeatures)

class Labels(SGObject):
    """Proxy of C++ shogun::CLabels class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Labels, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Labels, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Labels
        __init__(self, num_labels) -> Labels
        __init__(self, src) -> Labels
        __init__(self, loader) -> Labels
        """
        this = _modshogun.new_Labels(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Labels
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, loader)"""
        return _modshogun.Labels_load(self, *args)

    def save(self, *args):
        """save(self, writer)"""
        return _modshogun.Labels_save(self, *args)

    def set_label(self, *args):
        """set_label(self, idx, label) -> bool"""
        return _modshogun.Labels_set_label(self, *args)

    def set_int_label(self, *args):
        """set_int_label(self, idx, label) -> bool"""
        return _modshogun.Labels_set_int_label(self, *args)

    def get_label(self, *args):
        """get_label(self, idx) -> float"""
        return _modshogun.Labels_get_label(self, *args)

    def get_int_label(self, *args):
        """get_int_label(self, idx) ->  int"""
        return _modshogun.Labels_get_int_label(self, *args)

    def is_two_class_labeling(self):
        """is_two_class_labeling(self) -> bool"""
        return _modshogun.Labels_is_two_class_labeling(self)

    def get_num_classes(self):
        """get_num_classes(self) ->  int"""
        return _modshogun.Labels_get_num_classes(self)

    def get_labels(self):
        """get_labels(self) -> numpy 1dim array of float"""
        return _modshogun.Labels_get_labels(self)

    def set_labels(self, *args):
        """set_labels(self, v)"""
        return _modshogun.Labels_set_labels(self, *args)

    def set_to_one(self):
        """set_to_one(self)"""
        return _modshogun.Labels_set_to_one(self)

    def get_int_labels(self):
        """get_int_labels(self) -> IntVector"""
        return _modshogun.Labels_get_int_labels(self)

    def get_classes(self):
        """get_classes(self) -> RealVector"""
        return _modshogun.Labels_get_classes(self)

    def set_int_labels(self, *args):
        """set_int_labels(self, labels)"""
        return _modshogun.Labels_set_int_labels(self, *args)

    def get_num_labels(self):
        """get_num_labels(self) ->  int"""
        return _modshogun.Labels_get_num_labels(self)

    def set_subset(self, *args):
        """set_subset(self, subset)"""
        return _modshogun.Labels_set_subset(self, *args)

    def remove_subset(self):
        """remove_subset(self)"""
        return _modshogun.Labels_remove_subset(self)

    def subset_idx_conversion(self, *args):
        """subset_idx_conversion(self, idx) -> shogun::index_t"""
        return _modshogun.Labels_subset_idx_conversion(self, *args)

Labels_swigregister = _modshogun.Labels_swigregister
Labels_swigregister(Labels)

class RealFileFeatures(RealFeatures):
    """Proxy of C++ shogun::CRealFileFeatures class"""
    __swig_setmethods__ = {}
    for _s in [RealFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealFileFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [RealFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealFileFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RealFileFeatures
        __init__(self, size, file) -> RealFileFeatures
        __init__(self, size, filename) -> RealFileFeatures
        __init__(self, orig) -> RealFileFeatures
        """
        this = _modshogun.new_RealFileFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RealFileFeatures
    __del__ = lambda self : None;
    def load_feature_matrix(self):
        """load_feature_matrix(self) -> float *"""
        return _modshogun.RealFileFeatures_load_feature_matrix(self)

    def get_label(self, *args):
        """get_label(self, idx) ->  int"""
        return _modshogun.RealFileFeatures_get_label(self, *args)

RealFileFeatures_swigregister = _modshogun.RealFileFeatures_swigregister
RealFileFeatures_swigregister(RealFileFeatures)

class FKFeatures(RealFeatures):
    """Proxy of C++ shogun::CFKFeatures class"""
    __swig_setmethods__ = {}
    for _s in [RealFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FKFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [RealFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FKFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FKFeatures
        __init__(self, size, p, n) -> FKFeatures
        __init__(self, orig) -> FKFeatures
        """
        this = _modshogun.new_FKFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_FKFeatures
    __del__ = lambda self : None;
    def set_models(self, *args):
        """set_models(self, p, n)"""
        return _modshogun.FKFeatures_set_models(self, *args)

    def set_a(self, *args):
        """set_a(self, a)"""
        return _modshogun.FKFeatures_set_a(self, *args)

    def get_a(self):
        """get_a(self) -> float"""
        return _modshogun.FKFeatures_get_a(self)

    def set_feature_matrix(self):
        """set_feature_matrix(self) -> float *"""
        return _modshogun.FKFeatures_set_feature_matrix(self)

    def set_opt_a(self, *args):
        """
        set_opt_a(self, a=-1) -> float
        set_opt_a(self) -> float
        """
        return _modshogun.FKFeatures_set_opt_a(self, *args)

    def get_weight_a(self):
        """get_weight_a(self) -> float"""
        return _modshogun.FKFeatures_get_weight_a(self)

FKFeatures_swigregister = _modshogun.FKFeatures_swigregister
FKFeatures_swigregister(FKFeatures)

class TOPFeatures(RealFeatures):
    """Proxy of C++ shogun::CTOPFeatures class"""
    __swig_setmethods__ = {}
    for _s in [RealFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TOPFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [RealFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TOPFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TOPFeatures
        __init__(self, size, p, n, neglin, poslin) -> TOPFeatures
        __init__(self, orig) -> TOPFeatures
        """
        this = _modshogun.new_TOPFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_TOPFeatures
    __del__ = lambda self : None;
    def set_models(self, *args):
        """set_models(self, p, n)"""
        return _modshogun.TOPFeatures_set_models(self, *args)

    def set_feature_matrix(self):
        """set_feature_matrix(self) -> float *"""
        return _modshogun.TOPFeatures_set_feature_matrix(self)

    def compute_num_features(self):
        """compute_num_features(self) ->  int"""
        return _modshogun.TOPFeatures_compute_num_features(self)

    def compute_relevant_indizes(self, *args):
        """compute_relevant_indizes(self, hmm, hmm_idx) -> bool"""
        return _modshogun.TOPFeatures_compute_relevant_indizes(self, *args)

TOPFeatures_swigregister = _modshogun.TOPFeatures_swigregister
TOPFeatures_swigregister(TOPFeatures)

class SNPFeatures(DotFeatures):
    """Proxy of C++ shogun::CSNPFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNPFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNPFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SNPFeatures
        __init__(self, str) -> SNPFeatures
        __init__(self, orig) -> SNPFeatures
        """
        this = _modshogun.new_SNPFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SNPFeatures
    __del__ = lambda self : None;
    def set_normalization_const(self, n=0):
        """
        set_normalization_const(self, n=0)
        set_normalization_const(self)
        """
        return _modshogun.SNPFeatures_set_normalization_const(self, n)

    def get_normalization_const(self):
        """get_normalization_const(self) -> float"""
        return _modshogun.SNPFeatures_get_normalization_const(self)

    def set_minor_base_string(self, *args):
        """set_minor_base_string(self, str)"""
        return _modshogun.SNPFeatures_set_minor_base_string(self, *args)

    def set_major_base_string(self, *args):
        """set_major_base_string(self, str)"""
        return _modshogun.SNPFeatures_set_major_base_string(self, *args)

    def get_minor_base_string(self):
        """get_minor_base_string(self) -> str *"""
        return _modshogun.SNPFeatures_get_minor_base_string(self)

    def get_major_base_string(self):
        """get_major_base_string(self) -> str *"""
        return _modshogun.SNPFeatures_get_major_base_string(self)

    def obtain_base_strings(self, snp=None):
        """
        obtain_base_strings(self, snp=None)
        obtain_base_strings(self)
        """
        return _modshogun.SNPFeatures_obtain_base_strings(self, snp)

    def get_histogram(self, normalize=True):
        """
        get_histogram(self, normalize=True) -> RealMatrix
        get_histogram(self) -> RealMatrix
        """
        return _modshogun.SNPFeatures_get_histogram(self, normalize)

    def get_2x3_table(*args):
        """get_2x3_table(pos, neg) -> RealMatrix"""
        return _modshogun.SNPFeatures_get_2x3_table(*args)

    if _newclass:get_2x3_table = staticmethod(get_2x3_table)
    __swig_getmethods__["get_2x3_table"] = lambda x: get_2x3_table
SNPFeatures_swigregister = _modshogun.SNPFeatures_swigregister
SNPFeatures_swigregister(SNPFeatures)

def SNPFeatures_get_2x3_table(*args):
  """SNPFeatures_get_2x3_table(pos, neg) -> RealMatrix"""
  return _modshogun.SNPFeatures_get_2x3_table(*args)

class WDFeatures(DotFeatures):
    """Proxy of C++ shogun::CWDFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WDFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WDFeatures
        __init__(self, str, order, from_order) -> WDFeatures
        __init__(self, orig) -> WDFeatures
        """
        this = _modshogun.new_WDFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WDFeatures
    __del__ = lambda self : None;
    def set_normalization_const(self, n=0):
        """
        set_normalization_const(self, n=0)
        set_normalization_const(self)
        """
        return _modshogun.WDFeatures_set_normalization_const(self, n)

    def get_normalization_const(self):
        """get_normalization_const(self) -> float"""
        return _modshogun.WDFeatures_get_normalization_const(self)

    def set_wd_weights(self, *args):
        """
        set_wd_weights(self, weights)
        set_wd_weights(self)
        """
        return _modshogun.WDFeatures_set_wd_weights(self, *args)

WDFeatures_swigregister = _modshogun.WDFeatures_swigregister
WDFeatures_swigregister(WDFeatures)

class HashedWDFeatures(DotFeatures):
    """Proxy of C++ shogun::CHashedWDFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashedWDFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashedWDFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HashedWDFeatures
        __init__(self, str, start_order, order, from_order, hash_bits=12) -> HashedWDFeatures
        __init__(self, str, start_order, order, from_order) -> HashedWDFeatures
        __init__(self, orig) -> HashedWDFeatures
        """
        this = _modshogun.new_HashedWDFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_HashedWDFeatures
    __del__ = lambda self : None;
    def set_normalization_const(self, n=0):
        """
        set_normalization_const(self, n=0)
        set_normalization_const(self)
        """
        return _modshogun.HashedWDFeatures_set_normalization_const(self, n)

    def get_normalization_const(self):
        """get_normalization_const(self) -> float"""
        return _modshogun.HashedWDFeatures_get_normalization_const(self)

HashedWDFeatures_swigregister = _modshogun.HashedWDFeatures_swigregister
HashedWDFeatures_swigregister(HashedWDFeatures)

class HashedWDFeaturesTransposed(DotFeatures):
    """Proxy of C++ shogun::CHashedWDFeaturesTransposed class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashedWDFeaturesTransposed, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HashedWDFeaturesTransposed, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HashedWDFeaturesTransposed
        __init__(self, str, start_order, order, from_order, hash_bits=12) -> HashedWDFeaturesTransposed
        __init__(self, str, start_order, order, from_order) -> HashedWDFeaturesTransposed
        __init__(self, orig) -> HashedWDFeaturesTransposed
        """
        this = _modshogun.new_HashedWDFeaturesTransposed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_HashedWDFeaturesTransposed
    __del__ = lambda self : None;
    def set_normalization_const(self, n=0):
        """
        set_normalization_const(self, n=0)
        set_normalization_const(self)
        """
        return _modshogun.HashedWDFeaturesTransposed_set_normalization_const(self, n)

    def get_normalization_const(self):
        """get_normalization_const(self) -> float"""
        return _modshogun.HashedWDFeaturesTransposed_get_normalization_const(self)

HashedWDFeaturesTransposed_swigregister = _modshogun.HashedWDFeaturesTransposed_swigregister
HashedWDFeaturesTransposed_swigregister(HashedWDFeaturesTransposed)

class PolyFeatures(DotFeatures):
    """Proxy of C++ shogun::CPolyFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyFeatures, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_PolyFeatures
    __del__ = lambda self : None;
PolyFeatures_swigregister = _modshogun.PolyFeatures_swigregister
PolyFeatures_swigregister(PolyFeatures)

class SparsePolyFeatures(DotFeatures):
    """Proxy of C++ shogun::CSparsePolyFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparsePolyFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparsePolyFeatures, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparsePolyFeatures
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> SparsePolyFeatures
        __init__(self, feat, degree, normalize, hash_bits) -> SparsePolyFeatures
        __init__(self, orig) -> SparsePolyFeatures
        """
        this = _modshogun.new_SparsePolyFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
SparsePolyFeatures_swigregister = _modshogun.SparsePolyFeatures_swigregister
SparsePolyFeatures_swigregister(SparsePolyFeatures)

class LBPPyrDotFeatures(DotFeatures):
    """Proxy of C++ shogun::CLBPPyrDotFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LBPPyrDotFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LBPPyrDotFeatures, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_LBPPyrDotFeatures
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(self) -> LBPPyrDotFeatures
        __init__(self, images, num_pyramids) -> LBPPyrDotFeatures
        __init__(self, orig) -> LBPPyrDotFeatures
        """
        this = _modshogun.new_LBPPyrDotFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
LBPPyrDotFeatures_swigregister = _modshogun.LBPPyrDotFeatures_swigregister
LBPPyrDotFeatures_swigregister(LBPPyrDotFeatures)

class ExplicitSpecFeatures(DotFeatures):
    """Proxy of C++ shogun::CExplicitSpecFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitSpecFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitSpecFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ExplicitSpecFeatures
        __init__(self, str, normalize=True) -> ExplicitSpecFeatures
        __init__(self, str) -> ExplicitSpecFeatures
        __init__(self, orig) -> ExplicitSpecFeatures
        """
        this = _modshogun.new_ExplicitSpecFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ExplicitSpecFeatures
    __del__ = lambda self : None;
ExplicitSpecFeatures_swigregister = _modshogun.ExplicitSpecFeatures_swigregister
ExplicitSpecFeatures_swigregister(ExplicitSpecFeatures)

class ImplicitWeightedSpecFeatures(DotFeatures):
    """Proxy of C++ shogun::CImplicitWeightedSpecFeatures class"""
    __swig_setmethods__ = {}
    for _s in [DotFeatures]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImplicitWeightedSpecFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [DotFeatures]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImplicitWeightedSpecFeatures, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImplicitWeightedSpecFeatures
        __init__(self, str, normalize=True) -> ImplicitWeightedSpecFeatures
        __init__(self, str) -> ImplicitWeightedSpecFeatures
        __init__(self, orig) -> ImplicitWeightedSpecFeatures
        """
        this = _modshogun.new_ImplicitWeightedSpecFeatures(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ImplicitWeightedSpecFeatures
    __del__ = lambda self : None;
    def set_wd_weights(self):
        """set_wd_weights(self) -> bool"""
        return _modshogun.ImplicitWeightedSpecFeatures_set_wd_weights(self)

    def set_weights(self, *args):
        """set_weights(self, w, d) -> bool"""
        return _modshogun.ImplicitWeightedSpecFeatures_set_weights(self, *args)

ImplicitWeightedSpecFeatures_swigregister = _modshogun.ImplicitWeightedSpecFeatures_swigregister
ImplicitWeightedSpecFeatures_swigregister(ImplicitWeightedSpecFeatures)

class CConverter(SGObject):
    """Proxy of C++ shogun::CConverter class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CConverter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_CConverter
    __del__ = lambda self : None;
    def apply(self, *args):
        """apply(self, features) -> Features"""
        return _modshogun.CConverter_apply(self, *args)

CConverter_swigregister = _modshogun.CConverter_swigregister
CConverter_swigregister(CConverter)

class EmbeddingConverter(CConverter):
    """Proxy of C++ shogun::CEmbeddingConverter class"""
    __swig_setmethods__ = {}
    for _s in [CConverter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmbeddingConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [CConverter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmbeddingConverter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_EmbeddingConverter
    __del__ = lambda self : None;
    def embed(self, *args):
        """embed(self, features) -> RealFeatures"""
        return _modshogun.EmbeddingConverter_embed(self, *args)

    def set_target_dim(self, *args):
        """set_target_dim(self, dim)"""
        return _modshogun.EmbeddingConverter_set_target_dim(self, *args)

    def get_target_dim(self):
        """get_target_dim(self) ->  int"""
        return _modshogun.EmbeddingConverter_get_target_dim(self)

    def set_distance(self, *args):
        """set_distance(self, distance)"""
        return _modshogun.EmbeddingConverter_set_distance(self, *args)

    def get_distance(self):
        """get_distance(self) -> Distance"""
        return _modshogun.EmbeddingConverter_get_distance(self)

    def set_kernel(self, *args):
        """set_kernel(self, kernel)"""
        return _modshogun.EmbeddingConverter_set_kernel(self, *args)

    def get_kernel(self):
        """get_kernel(self) -> Kernel"""
        return _modshogun.EmbeddingConverter_get_kernel(self)

EmbeddingConverter_swigregister = _modshogun.EmbeddingConverter_swigregister
EmbeddingConverter_swigregister(EmbeddingConverter)

P_UNKNOWN = _modshogun.P_UNKNOWN
P_NORMONE = _modshogun.P_NORMONE
P_LOGPLUSONE = _modshogun.P_LOGPLUSONE
P_SORTWORDSTRING = _modshogun.P_SORTWORDSTRING
P_SORTULONGSTRING = _modshogun.P_SORTULONGSTRING
P_SORTWORD = _modshogun.P_SORTWORD
P_PRUNEVARSUBMEAN = _modshogun.P_PRUNEVARSUBMEAN
P_DECOMPRESSSTRING = _modshogun.P_DECOMPRESSSTRING
P_DECOMPRESSCHARSTRING = _modshogun.P_DECOMPRESSCHARSTRING
P_DECOMPRESSBYTESTRING = _modshogun.P_DECOMPRESSBYTESTRING
P_DECOMPRESSWORDSTRING = _modshogun.P_DECOMPRESSWORDSTRING
P_DECOMPRESSULONGSTRING = _modshogun.P_DECOMPRESSULONGSTRING
P_RANDOMFOURIERGAUSS = _modshogun.P_RANDOMFOURIERGAUSS
P_PCA = _modshogun.P_PCA
P_KERNELPCA = _modshogun.P_KERNELPCA
P_NORMDERIVATIVELEM3 = _modshogun.P_NORMDERIVATIVELEM3
P_DIMENSIONREDUCTIONPREPROCESSOR = _modshogun.P_DIMENSIONREDUCTIONPREPROCESSOR
P_MULTIDIMENSIONALSCALING = _modshogun.P_MULTIDIMENSIONALSCALING
P_LOCALLYLINEAREMBEDDING = _modshogun.P_LOCALLYLINEAREMBEDDING
P_ISOMAP = _modshogun.P_ISOMAP
P_HESSIANLOCALLYLINEAREMBEDDING = _modshogun.P_HESSIANLOCALLYLINEAREMBEDDING
P_LOCALTANGENTSPACEALIGNMENT = _modshogun.P_LOCALTANGENTSPACEALIGNMENT
P_LAPLACIANEIGENMAPS = _modshogun.P_LAPLACIANEIGENMAPS
P_KERNELLOCALLYLINEAREMBEDDING = _modshogun.P_KERNELLOCALLYLINEAREMBEDDING
P_DIFFUSIONMAPS = _modshogun.P_DIFFUSIONMAPS
P_KERNELLOCALTANGENTSPACEALIGNMENT = _modshogun.P_KERNELLOCALTANGENTSPACEALIGNMENT
class Preprocessor(SGObject):
    """Proxy of C++ shogun::CPreprocessor class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Preprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Preprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_Preprocessor
    __del__ = lambda self : None;
    def init(self, *args):
        """init(self, features) -> bool"""
        return _modshogun.Preprocessor_init(self, *args)

    def get_feature_type(self):
        """get_feature_type(self) -> shogun::EFeatureType"""
        return _modshogun.Preprocessor_get_feature_type(self)

    def get_feature_class(self):
        """get_feature_class(self) -> shogun::EFeatureClass"""
        return _modshogun.Preprocessor_get_feature_class(self)

    def get_type(self):
        """get_type(self) -> shogun::EPreprocessorType"""
        return _modshogun.Preprocessor_get_type(self)

Preprocessor_swigregister = _modshogun.Preprocessor_swigregister
Preprocessor_swigregister(Preprocessor)

class RealPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CSimplePreprocessor<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_feature_matrix(self, *args):
        """apply_to_feature_matrix(self, features) -> RealMatrix"""
        return _modshogun.RealPreprocessor_apply_to_feature_matrix(self, *args)

    def apply_to_feature_vector(self, *args):
        """apply_to_feature_vector(self, vector) -> RealVector"""
        return _modshogun.RealPreprocessor_apply_to_feature_vector(self, *args)

    __swig_destroy__ = _modshogun.delete_RealPreprocessor
    __del__ = lambda self : None;
RealPreprocessor_swigregister = _modshogun.RealPreprocessor_swigregister
RealPreprocessor_swigregister(RealPreprocessor)

class UlongPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CSimplePreprocessor<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UlongPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UlongPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_feature_matrix(self, *args):
        """apply_to_feature_matrix(self, features) -> ULongIntMatrix"""
        return _modshogun.UlongPreprocessor_apply_to_feature_matrix(self, *args)

    def apply_to_feature_vector(self, *args):
        """apply_to_feature_vector(self, vector) -> ULongIntVector"""
        return _modshogun.UlongPreprocessor_apply_to_feature_vector(self, *args)

    __swig_destroy__ = _modshogun.delete_UlongPreprocessor
    __del__ = lambda self : None;
UlongPreprocessor_swigregister = _modshogun.UlongPreprocessor_swigregister
UlongPreprocessor_swigregister(UlongPreprocessor)

class WordPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CSimplePreprocessor<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WordPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WordPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_feature_matrix(self, *args):
        """apply_to_feature_matrix(self, features) -> WordMatrix"""
        return _modshogun.WordPreprocessor_apply_to_feature_matrix(self, *args)

    def apply_to_feature_vector(self, *args):
        """apply_to_feature_vector(self, vector) -> WordVector"""
        return _modshogun.WordPreprocessor_apply_to_feature_vector(self, *args)

    __swig_destroy__ = _modshogun.delete_WordPreprocessor
    __del__ = lambda self : None;
WordPreprocessor_swigregister = _modshogun.WordPreprocessor_swigregister
WordPreprocessor_swigregister(WordPreprocessor)

class BytePreprocessor(Preprocessor):
    """Proxy of C++ shogun::CSimplePreprocessor<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BytePreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BytePreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_feature_matrix(self, *args):
        """apply_to_feature_matrix(self, features) -> ByteMatrix"""
        return _modshogun.BytePreprocessor_apply_to_feature_matrix(self, *args)

    def apply_to_feature_vector(self, *args):
        """apply_to_feature_vector(self, vector) -> ByteVector"""
        return _modshogun.BytePreprocessor_apply_to_feature_vector(self, *args)

    __swig_destroy__ = _modshogun.delete_BytePreprocessor
    __del__ = lambda self : None;
BytePreprocessor_swigregister = _modshogun.BytePreprocessor_swigregister
BytePreprocessor_swigregister(BytePreprocessor)

class CharPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CSimplePreprocessor<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CharPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_feature_matrix(self, *args):
        """apply_to_feature_matrix(self, features) -> CharMatrix"""
        return _modshogun.CharPreprocessor_apply_to_feature_matrix(self, *args)

    def apply_to_feature_vector(self, *args):
        """apply_to_feature_vector(self, vector) -> CharVector"""
        return _modshogun.CharPreprocessor_apply_to_feature_vector(self, *args)

    __swig_destroy__ = _modshogun.delete_CharPreprocessor
    __del__ = lambda self : None;
CharPreprocessor_swigregister = _modshogun.CharPreprocessor_swigregister
CharPreprocessor_swigregister(CharPreprocessor)

class DimensionReductionPreprocessor(RealPreprocessor):
    """Proxy of C++ shogun::CDimensionReductionPreprocessor class"""
    __swig_setmethods__ = {}
    for _s in [RealPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionReductionPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [RealPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionReductionPreprocessor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DimensionReductionPreprocessor
        __init__(self, converter) -> DimensionReductionPreprocessor
        """
        this = _modshogun.new_DimensionReductionPreprocessor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DimensionReductionPreprocessor
    __del__ = lambda self : None;
    def set_target_dim(self, *args):
        """set_target_dim(self, dim)"""
        return _modshogun.DimensionReductionPreprocessor_set_target_dim(self, *args)

    def get_target_dim(self):
        """get_target_dim(self) ->  int"""
        return _modshogun.DimensionReductionPreprocessor_get_target_dim(self)

    def set_distance(self, *args):
        """set_distance(self, distance)"""
        return _modshogun.DimensionReductionPreprocessor_set_distance(self, *args)

    def get_distance(self):
        """get_distance(self) -> Distance"""
        return _modshogun.DimensionReductionPreprocessor_get_distance(self)

    def set_kernel(self, *args):
        """set_kernel(self, kernel)"""
        return _modshogun.DimensionReductionPreprocessor_set_kernel(self, *args)

    def get_kernel(self):
        """get_kernel(self) -> Kernel"""
        return _modshogun.DimensionReductionPreprocessor_get_kernel(self)

DimensionReductionPreprocessor_swigregister = _modshogun.DimensionReductionPreprocessor_swigregister
DimensionReductionPreprocessor_swigregister(DimensionReductionPreprocessor)

class StringUlongPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CStringPreprocessor<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUlongPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringUlongPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_string_features(self, *args):
        """apply_to_string_features(self, f) -> bool"""
        return _modshogun.StringUlongPreprocessor_apply_to_string_features(self, *args)

    def apply_to_string(self, *args):
        """apply_to_string(self, f, len) -> unsigned long *"""
        return _modshogun.StringUlongPreprocessor_apply_to_string(self, *args)

    __swig_destroy__ = _modshogun.delete_StringUlongPreprocessor
    __del__ = lambda self : None;
StringUlongPreprocessor_swigregister = _modshogun.StringUlongPreprocessor_swigregister
StringUlongPreprocessor_swigregister(StringUlongPreprocessor)

class StringWordPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CStringPreprocessor<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringWordPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringWordPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_string_features(self, *args):
        """apply_to_string_features(self, f) -> bool"""
        return _modshogun.StringWordPreprocessor_apply_to_string_features(self, *args)

    def apply_to_string(self, *args):
        """apply_to_string(self, f, len) -> unsigned short *"""
        return _modshogun.StringWordPreprocessor_apply_to_string(self, *args)

    __swig_destroy__ = _modshogun.delete_StringWordPreprocessor
    __del__ = lambda self : None;
StringWordPreprocessor_swigregister = _modshogun.StringWordPreprocessor_swigregister
StringWordPreprocessor_swigregister(StringWordPreprocessor)

class StringBytePreprocessor(Preprocessor):
    """Proxy of C++ shogun::CStringPreprocessor<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringBytePreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringBytePreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_string_features(self, *args):
        """apply_to_string_features(self, f) -> bool"""
        return _modshogun.StringBytePreprocessor_apply_to_string_features(self, *args)

    def apply_to_string(self, *args):
        """apply_to_string(self, f, len) -> unsigned str *"""
        return _modshogun.StringBytePreprocessor_apply_to_string(self, *args)

    __swig_destroy__ = _modshogun.delete_StringBytePreprocessor
    __del__ = lambda self : None;
StringBytePreprocessor_swigregister = _modshogun.StringBytePreprocessor_swigregister
StringBytePreprocessor_swigregister(StringBytePreprocessor)

class StringCharPreprocessor(Preprocessor):
    """Proxy of C++ shogun::CStringPreprocessor<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Preprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringCharPreprocessor, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringCharPreprocessor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def apply_to_string_features(self, *args):
        """apply_to_string_features(self, f) -> bool"""
        return _modshogun.StringCharPreprocessor_apply_to_string_features(self, *args)

    def apply_to_string(self, *args):
        """apply_to_string(self, f, len) -> str *"""
        return _modshogun.StringCharPreprocessor_apply_to_string(self, *args)

    __swig_destroy__ = _modshogun.delete_StringCharPreprocessor
    __del__ = lambda self : None;
StringCharPreprocessor_swigregister = _modshogun.StringCharPreprocessor_swigregister
StringCharPreprocessor_swigregister(StringCharPreprocessor)

class DecompressUlongString(StringUlongPreprocessor):
    """Proxy of C++ shogun::CDecompressString<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringUlongPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompressUlongString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringUlongPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecompressUlongString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DecompressUlongString
        __init__(self, ct) -> DecompressUlongString
        """
        this = _modshogun.new_DecompressUlongString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DecompressUlongString
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.DecompressUlongString_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.DecompressUlongString_save(self, *args)

DecompressUlongString_swigregister = _modshogun.DecompressUlongString_swigregister
DecompressUlongString_swigregister(DecompressUlongString)

class DecompressWordString(StringWordPreprocessor):
    """Proxy of C++ shogun::CDecompressString<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringWordPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompressWordString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecompressWordString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DecompressWordString
        __init__(self, ct) -> DecompressWordString
        """
        this = _modshogun.new_DecompressWordString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DecompressWordString
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.DecompressWordString_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.DecompressWordString_save(self, *args)

DecompressWordString_swigregister = _modshogun.DecompressWordString_swigregister
DecompressWordString_swigregister(DecompressWordString)

class DecompressByteString(StringBytePreprocessor):
    """Proxy of C++ shogun::CDecompressString<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [StringBytePreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompressByteString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringBytePreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecompressByteString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DecompressByteString
        __init__(self, ct) -> DecompressByteString
        """
        this = _modshogun.new_DecompressByteString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DecompressByteString
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.DecompressByteString_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.DecompressByteString_save(self, *args)

DecompressByteString_swigregister = _modshogun.DecompressByteString_swigregister
DecompressByteString_swigregister(DecompressByteString)

class DecompressCharString(StringCharPreprocessor):
    """Proxy of C++ shogun::CDecompressString<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [StringCharPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecompressCharString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecompressCharString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DecompressCharString
        __init__(self, ct) -> DecompressCharString
        """
        this = _modshogun.new_DecompressCharString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DecompressCharString
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.DecompressCharString_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.DecompressCharString_save(self, *args)

DecompressCharString_swigregister = _modshogun.DecompressCharString_swigregister
DecompressCharString_swigregister(DecompressCharString)

class NormOne(RealPreprocessor):
    """Proxy of C++ shogun::CNormOne class"""
    __swig_setmethods__ = {}
    for _s in [RealPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormOne, name, value)
    __swig_getmethods__ = {}
    for _s in [RealPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormOne, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> NormOne"""
        this = _modshogun.new_NormOne()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_NormOne
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.NormOne_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.NormOne_save(self, *args)

NormOne_swigregister = _modshogun.NormOne_swigregister
NormOne_swigregister(NormOne)

class LogPlusOne(RealPreprocessor):
    """Proxy of C++ shogun::CLogPlusOne class"""
    __swig_setmethods__ = {}
    for _s in [RealPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogPlusOne, name, value)
    __swig_getmethods__ = {}
    for _s in [RealPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogPlusOne, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> LogPlusOne"""
        this = _modshogun.new_LogPlusOne()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LogPlusOne
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.LogPlusOne_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.LogPlusOne_save(self, *args)

LogPlusOne_swigregister = _modshogun.LogPlusOne_swigregister
LogPlusOne_swigregister(LogPlusOne)

class PruneVarSubMean(RealPreprocessor):
    """Proxy of C++ shogun::CPruneVarSubMean class"""
    __swig_setmethods__ = {}
    for _s in [RealPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PruneVarSubMean, name, value)
    __swig_getmethods__ = {}
    for _s in [RealPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PruneVarSubMean, name)
    __repr__ = _swig_repr
    def __init__(self, divide=True): 
        """
        __init__(self, divide=True) -> PruneVarSubMean
        __init__(self) -> PruneVarSubMean
        """
        this = _modshogun.new_PruneVarSubMean(divide)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PruneVarSubMean
    __del__ = lambda self : None;
PruneVarSubMean_swigregister = _modshogun.PruneVarSubMean_swigregister
PruneVarSubMean_swigregister(PruneVarSubMean)

class RandomFourierGaussPreproc(RealPreprocessor):
    """Proxy of C++ shogun::CRandomFourierGaussPreproc class"""
    __swig_setmethods__ = {}
    for _s in [RealPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomFourierGaussPreproc, name, value)
    __swig_getmethods__ = {}
    for _s in [RealPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomFourierGaussPreproc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RandomFourierGaussPreproc
        __init__(self, pr) -> RandomFourierGaussPreproc
        """
        this = _modshogun.new_RandomFourierGaussPreproc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RandomFourierGaussPreproc
    __del__ = lambda self : None;
    def set_kernelwidth(self, *args):
        """set_kernelwidth(self, width)"""
        return _modshogun.RandomFourierGaussPreproc_set_kernelwidth(self, *args)

    def get_kernelwidth(self):
        """get_kernelwidth(self) -> float"""
        return _modshogun.RandomFourierGaussPreproc_get_kernelwidth(self)

    def get_randomcoefficients(self, *args):
        """
        get_randomcoefficients(self, randomcoeff_additive2, randomcoeff_multiplicative2, dim_feature_space2, dim_input_space2, 
            kernelwidth2)
        """
        return _modshogun.RandomFourierGaussPreproc_get_randomcoefficients(self, *args)

    def set_randomcoefficients(self, *args):
        """
        set_randomcoefficients(self, randomcoeff_additive2, randomcoeff_multiplicative2, dim_feature_space2, dim_input_space2, 
            kernelwidth2)
        """
        return _modshogun.RandomFourierGaussPreproc_set_randomcoefficients(self, *args)

    def set_dim_input_space(self, *args):
        """set_dim_input_space(self, dim)"""
        return _modshogun.RandomFourierGaussPreproc_set_dim_input_space(self, *args)

    def set_dim_feature_space(self, *args):
        """set_dim_feature_space(self, dim)"""
        return _modshogun.RandomFourierGaussPreproc_set_dim_feature_space(self, *args)

    def init_randomcoefficients(self):
        """init_randomcoefficients(self) -> bool"""
        return _modshogun.RandomFourierGaussPreproc_init_randomcoefficients(self)

    def get_dim_input_space(self):
        """get_dim_input_space(self) ->  int"""
        return _modshogun.RandomFourierGaussPreproc_get_dim_input_space(self)

    def get_dim_feature_space(self):
        """get_dim_feature_space(self) ->  int"""
        return _modshogun.RandomFourierGaussPreproc_get_dim_feature_space(self)

RandomFourierGaussPreproc_swigregister = _modshogun.RandomFourierGaussPreproc_swigregister
RandomFourierGaussPreproc_swigregister(RandomFourierGaussPreproc)

class SortUlongString(StringUlongPreprocessor):
    """Proxy of C++ shogun::CSortUlongString class"""
    __swig_setmethods__ = {}
    for _s in [StringUlongPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SortUlongString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringUlongPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SortUlongString, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SortUlongString"""
        this = _modshogun.new_SortUlongString()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SortUlongString
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.SortUlongString_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.SortUlongString_save(self, *args)

SortUlongString_swigregister = _modshogun.SortUlongString_swigregister
SortUlongString_swigregister(SortUlongString)

class SortWordString(StringWordPreprocessor):
    """Proxy of C++ shogun::CSortWordString class"""
    __swig_setmethods__ = {}
    for _s in [StringWordPreprocessor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SortWordString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordPreprocessor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SortWordString, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SortWordString"""
        this = _modshogun.new_SortWordString()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SortWordString
    __del__ = lambda self : None;
    def load(self, *args):
        """load(self, f) -> bool"""
        return _modshogun.SortWordString_load(self, *args)

    def save(self, *args):
        """save(self, f) -> bool"""
        return _modshogun.SortWordString_save(self, *args)

SortWordString_swigregister = _modshogun.SortWordString_swigregister
SortWordString_swigregister(SortWordString)

ED_MINIMIZE = _modshogun.ED_MINIMIZE
ED_MAXIMIZE = _modshogun.ED_MAXIMIZE
class Evaluation(SGObject):
    """Proxy of C++ shogun::CEvaluation class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Evaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Evaluation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_Evaluation
    __del__ = lambda self : None;
    def evaluate(self, *args):
        """evaluate(self, predicted, ground_truth) -> float"""
        return _modshogun.Evaluation_evaluate(self, *args)

    def get_evaluation_direction(self):
        """get_evaluation_direction(self) -> shogun::EEvaluationDirection"""
        return _modshogun.Evaluation_get_evaluation_direction(self)

Evaluation_swigregister = _modshogun.Evaluation_swigregister
Evaluation_swigregister(Evaluation)

class BinaryClassEvaluation(Evaluation):
    """Proxy of C++ shogun::CBinaryClassEvaluation class"""
    __swig_setmethods__ = {}
    for _s in [Evaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryClassEvaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [Evaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryClassEvaluation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_BinaryClassEvaluation
    __del__ = lambda self : None;
BinaryClassEvaluation_swigregister = _modshogun.BinaryClassEvaluation_swigregister
BinaryClassEvaluation_swigregister(BinaryClassEvaluation)

ACCURACY = _modshogun.ACCURACY
ERROR_RATE = _modshogun.ERROR_RATE
BAL = _modshogun.BAL
WRACC = _modshogun.WRACC
F1 = _modshogun.F1
CROSS_CORRELATION = _modshogun.CROSS_CORRELATION
RECALL = _modshogun.RECALL
PRECISION = _modshogun.PRECISION
SPECIFICITY = _modshogun.SPECIFICITY
class ContingencyTableEvaluation(BinaryClassEvaluation):
    """Proxy of C++ shogun::CContingencyTableEvaluation class"""
    __swig_setmethods__ = {}
    for _s in [BinaryClassEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContingencyTableEvaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryClassEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContingencyTableEvaluation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ContingencyTableEvaluation
        __init__(self, type) -> ContingencyTableEvaluation
        """
        this = _modshogun.new_ContingencyTableEvaluation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ContingencyTableEvaluation
    __del__ = lambda self : None;
    def get_accuracy(self):
        """get_accuracy(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_accuracy(self)

    def get_error_rate(self):
        """get_error_rate(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_error_rate(self)

    def get_BAL(self):
        """get_BAL(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_BAL(self)

    def get_WRACC(self):
        """get_WRACC(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_WRACC(self)

    def get_F1(self):
        """get_F1(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_F1(self)

    def get_cross_correlation(self):
        """get_cross_correlation(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_cross_correlation(self)

    def get_recall(self):
        """get_recall(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_recall(self)

    def get_precision(self):
        """get_precision(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_precision(self)

    def get_specificity(self):
        """get_specificity(self) -> float"""
        return _modshogun.ContingencyTableEvaluation_get_specificity(self)

ContingencyTableEvaluation_swigregister = _modshogun.ContingencyTableEvaluation_swigregister
ContingencyTableEvaluation_swigregister(ContingencyTableEvaluation)

class AccuracyMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CAccuracyMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccuracyMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccuracyMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> AccuracyMeasure"""
        this = _modshogun.new_AccuracyMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_AccuracyMeasure
    __del__ = lambda self : None;
AccuracyMeasure_swigregister = _modshogun.AccuracyMeasure_swigregister
AccuracyMeasure_swigregister(AccuracyMeasure)

class ErrorRateMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CErrorRateMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorRateMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorRateMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ErrorRateMeasure"""
        this = _modshogun.new_ErrorRateMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ErrorRateMeasure
    __del__ = lambda self : None;
ErrorRateMeasure_swigregister = _modshogun.ErrorRateMeasure_swigregister
ErrorRateMeasure_swigregister(ErrorRateMeasure)

class BALMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CBALMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BALMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BALMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> BALMeasure"""
        this = _modshogun.new_BALMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_BALMeasure
    __del__ = lambda self : None;
BALMeasure_swigregister = _modshogun.BALMeasure_swigregister
BALMeasure_swigregister(BALMeasure)

class WRACCMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CWRACCMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WRACCMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WRACCMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> WRACCMeasure"""
        this = _modshogun.new_WRACCMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WRACCMeasure
    __del__ = lambda self : None;
WRACCMeasure_swigregister = _modshogun.WRACCMeasure_swigregister
WRACCMeasure_swigregister(WRACCMeasure)

class F1Measure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CF1Measure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, F1Measure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, F1Measure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> F1Measure"""
        this = _modshogun.new_F1Measure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_F1Measure
    __del__ = lambda self : None;
F1Measure_swigregister = _modshogun.F1Measure_swigregister
F1Measure_swigregister(F1Measure)

class CrossCorrelationMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CCrossCorrelationMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossCorrelationMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossCorrelationMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CrossCorrelationMeasure"""
        this = _modshogun.new_CrossCorrelationMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CrossCorrelationMeasure
    __del__ = lambda self : None;
CrossCorrelationMeasure_swigregister = _modshogun.CrossCorrelationMeasure_swigregister
CrossCorrelationMeasure_swigregister(CrossCorrelationMeasure)

class RecallMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CRecallMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecallMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecallMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> RecallMeasure"""
        this = _modshogun.new_RecallMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RecallMeasure
    __del__ = lambda self : None;
RecallMeasure_swigregister = _modshogun.RecallMeasure_swigregister
RecallMeasure_swigregister(RecallMeasure)

class PrecisionMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CPrecisionMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrecisionMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrecisionMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PrecisionMeasure"""
        this = _modshogun.new_PrecisionMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PrecisionMeasure
    __del__ = lambda self : None;
PrecisionMeasure_swigregister = _modshogun.PrecisionMeasure_swigregister
PrecisionMeasure_swigregister(PrecisionMeasure)

class SpecificityMeasure(ContingencyTableEvaluation):
    """Proxy of C++ shogun::CSpecificityMeasure class"""
    __swig_setmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecificityMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [ContingencyTableEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecificityMeasure, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SpecificityMeasure"""
        this = _modshogun.new_SpecificityMeasure()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SpecificityMeasure
    __del__ = lambda self : None;
SpecificityMeasure_swigregister = _modshogun.SpecificityMeasure_swigregister
SpecificityMeasure_swigregister(SpecificityMeasure)

class MulticlassAccuracy(Evaluation):
    """Proxy of C++ shogun::CMulticlassAccuracy class"""
    __swig_setmethods__ = {}
    for _s in [Evaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MulticlassAccuracy, name, value)
    __swig_getmethods__ = {}
    for _s in [Evaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MulticlassAccuracy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> MulticlassAccuracy"""
        this = _modshogun.new_MulticlassAccuracy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MulticlassAccuracy
    __del__ = lambda self : None;
MulticlassAccuracy_swigregister = _modshogun.MulticlassAccuracy_swigregister
MulticlassAccuracy_swigregister(MulticlassAccuracy)

class MeanAbsoluteError(Evaluation):
    """Proxy of C++ shogun::CMeanAbsoluteError class"""
    __swig_setmethods__ = {}
    for _s in [Evaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeanAbsoluteError, name, value)
    __swig_getmethods__ = {}
    for _s in [Evaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeanAbsoluteError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> MeanAbsoluteError"""
        this = _modshogun.new_MeanAbsoluteError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MeanAbsoluteError
    __del__ = lambda self : None;
MeanAbsoluteError_swigregister = _modshogun.MeanAbsoluteError_swigregister
MeanAbsoluteError_swigregister(MeanAbsoluteError)

class MeanSquaredError(Evaluation):
    """Proxy of C++ shogun::CMeanSquaredError class"""
    __swig_setmethods__ = {}
    for _s in [Evaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeanSquaredError, name, value)
    __swig_getmethods__ = {}
    for _s in [Evaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeanSquaredError, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> MeanSquaredError"""
        this = _modshogun.new_MeanSquaredError()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MeanSquaredError
    __del__ = lambda self : None;
MeanSquaredError_swigregister = _modshogun.MeanSquaredError_swigregister
MeanSquaredError_swigregister(MeanSquaredError)

class ROCEvaluation(BinaryClassEvaluation):
    """Proxy of C++ shogun::CROCEvaluation class"""
    __swig_setmethods__ = {}
    for _s in [BinaryClassEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ROCEvaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryClassEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ROCEvaluation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ROCEvaluation"""
        this = _modshogun.new_ROCEvaluation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ROCEvaluation
    __del__ = lambda self : None;
    def get_auROC(self):
        """get_auROC(self) -> float"""
        return _modshogun.ROCEvaluation_get_auROC(self)

    def get_ROC(self):
        """get_ROC(self) -> RealMatrix"""
        return _modshogun.ROCEvaluation_get_ROC(self)

    def get_thresholds(self):
        """get_thresholds(self) -> RealVector"""
        return _modshogun.ROCEvaluation_get_thresholds(self)

ROCEvaluation_swigregister = _modshogun.ROCEvaluation_swigregister
ROCEvaluation_swigregister(ROCEvaluation)

class PRCEvaluation(BinaryClassEvaluation):
    """Proxy of C++ shogun::CPRCEvaluation class"""
    __swig_setmethods__ = {}
    for _s in [BinaryClassEvaluation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PRCEvaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryClassEvaluation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PRCEvaluation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PRCEvaluation"""
        this = _modshogun.new_PRCEvaluation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PRCEvaluation
    __del__ = lambda self : None;
    def get_auPRC(self):
        """get_auPRC(self) -> float"""
        return _modshogun.PRCEvaluation_get_auPRC(self)

    def get_PRC(self):
        """get_PRC(self) -> RealMatrix"""
        return _modshogun.PRCEvaluation_get_PRC(self)

    def get_thresholds(self):
        """get_thresholds(self) -> RealVector"""
        return _modshogun.PRCEvaluation_get_thresholds(self)

PRCEvaluation_swigregister = _modshogun.PRCEvaluation_swigregister
PRCEvaluation_swigregister(PRCEvaluation)

class CrossValidationResult(_object):
    """Proxy of C++ shogun::CrossValidationResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossValidationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossValidationResult, name)
    __repr__ = _swig_repr
    def print_result(self):
        """print_result(self)"""
        return _modshogun.CrossValidationResult_print_result(self)

    __swig_setmethods__["mean"] = _modshogun.CrossValidationResult_mean_set
    __swig_getmethods__["mean"] = _modshogun.CrossValidationResult_mean_get
    if _newclass:mean = _swig_property(_modshogun.CrossValidationResult_mean_get, _modshogun.CrossValidationResult_mean_set)
    __swig_setmethods__["has_conf_int"] = _modshogun.CrossValidationResult_has_conf_int_set
    __swig_getmethods__["has_conf_int"] = _modshogun.CrossValidationResult_has_conf_int_get
    if _newclass:has_conf_int = _swig_property(_modshogun.CrossValidationResult_has_conf_int_get, _modshogun.CrossValidationResult_has_conf_int_set)
    __swig_setmethods__["conf_int_low"] = _modshogun.CrossValidationResult_conf_int_low_set
    __swig_getmethods__["conf_int_low"] = _modshogun.CrossValidationResult_conf_int_low_get
    if _newclass:conf_int_low = _swig_property(_modshogun.CrossValidationResult_conf_int_low_get, _modshogun.CrossValidationResult_conf_int_low_set)
    __swig_setmethods__["conf_int_up"] = _modshogun.CrossValidationResult_conf_int_up_set
    __swig_getmethods__["conf_int_up"] = _modshogun.CrossValidationResult_conf_int_up_get
    if _newclass:conf_int_up = _swig_property(_modshogun.CrossValidationResult_conf_int_up_get, _modshogun.CrossValidationResult_conf_int_up_set)
    __swig_setmethods__["conf_int_alpha"] = _modshogun.CrossValidationResult_conf_int_alpha_set
    __swig_getmethods__["conf_int_alpha"] = _modshogun.CrossValidationResult_conf_int_alpha_get
    if _newclass:conf_int_alpha = _swig_property(_modshogun.CrossValidationResult_conf_int_alpha_get, _modshogun.CrossValidationResult_conf_int_alpha_set)
    def save_serializable(self, *args):
        """
        save_serializable(self, file, prefix="") -> bool
        save_serializable(self, file) -> bool
        """
        return _modshogun.CrossValidationResult_save_serializable(self, *args)

    def load_serializable(self, *args):
        """
        load_serializable(self, file, prefix="") -> bool
        load_serializable(self, file) -> bool
        """
        return _modshogun.CrossValidationResult_load_serializable(self, *args)

    def __init__(self): 
        """__init__(self) -> CrossValidationResult"""
        this = _modshogun.new_CrossValidationResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CrossValidationResult
    __del__ = lambda self : None;
CrossValidationResult_swigregister = _modshogun.CrossValidationResult_swigregister
CrossValidationResult_swigregister(CrossValidationResult)

class CrossValidation(SGObject):
    """Proxy of C++ shogun::CCrossValidation class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossValidation, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossValidation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CrossValidation
        __init__(self, machine, features, labels, splitting_strategy, evaluation_criterium) -> CrossValidation
        """
        this = _modshogun.new_CrossValidation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CrossValidation
    __del__ = lambda self : None;
    def get_evaluation_direction(self):
        """get_evaluation_direction(self) -> shogun::EEvaluationDirection"""
        return _modshogun.CrossValidation_get_evaluation_direction(self)

    def evaluate(self):
        """evaluate(self) -> CrossValidationResult"""
        return _modshogun.CrossValidation_evaluate(self)

    def get_machine(self):
        """get_machine(self) -> Machine"""
        return _modshogun.CrossValidation_get_machine(self)

    def set_num_runs(self, *args):
        """set_num_runs(self, num_runs)"""
        return _modshogun.CrossValidation_set_num_runs(self, *args)

    def set_conf_int_alpha(self, *args):
        """set_conf_int_alpha(self, m_conf_int_alpha)"""
        return _modshogun.CrossValidation_set_conf_int_alpha(self, *args)

CrossValidation_swigregister = _modshogun.CrossValidation_swigregister
CrossValidation_swigregister(CrossValidation)

class SplittingStrategy(SGObject):
    """Proxy of C++ shogun::CSplittingStrategy class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplittingStrategy, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SplittingStrategy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SplittingStrategy
    __del__ = lambda self : None;
    def generate_subset_indices(self, *args):
        """generate_subset_indices(self, subset_idx) -> IntVector"""
        return _modshogun.SplittingStrategy_generate_subset_indices(self, *args)

    def generate_subset_inverse(self, *args):
        """generate_subset_inverse(self, subset_idx) -> IntVector"""
        return _modshogun.SplittingStrategy_generate_subset_inverse(self, *args)

    def get_num_subsets(self):
        """get_num_subsets(self) -> shogun::index_t"""
        return _modshogun.SplittingStrategy_get_num_subsets(self)

SplittingStrategy_swigregister = _modshogun.SplittingStrategy_swigregister
SplittingStrategy_swigregister(SplittingStrategy)

class StratifiedCrossValidationSplitting(SplittingStrategy):
    """Proxy of C++ shogun::CStratifiedCrossValidationSplitting class"""
    __swig_setmethods__ = {}
    for _s in [SplittingStrategy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StratifiedCrossValidationSplitting, name, value)
    __swig_getmethods__ = {}
    for _s in [SplittingStrategy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StratifiedCrossValidationSplitting, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StratifiedCrossValidationSplitting
        __init__(self, labels, num_subsets) -> StratifiedCrossValidationSplitting
        """
        this = _modshogun.new_StratifiedCrossValidationSplitting(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_StratifiedCrossValidationSplitting
    __del__ = lambda self : None;
StratifiedCrossValidationSplitting_swigregister = _modshogun.StratifiedCrossValidationSplitting_swigregister
StratifiedCrossValidationSplitting_swigregister(StratifiedCrossValidationSplitting)

D_UNKNOWN = _modshogun.D_UNKNOWN
D_MINKOWSKI = _modshogun.D_MINKOWSKI
D_MANHATTAN = _modshogun.D_MANHATTAN
D_CANBERRA = _modshogun.D_CANBERRA
D_CHEBYSHEW = _modshogun.D_CHEBYSHEW
D_GEODESIC = _modshogun.D_GEODESIC
D_JENSEN = _modshogun.D_JENSEN
D_MANHATTANWORD = _modshogun.D_MANHATTANWORD
D_HAMMINGWORD = _modshogun.D_HAMMINGWORD
D_CANBERRAWORD = _modshogun.D_CANBERRAWORD
D_SPARSEEUCLIDIAN = _modshogun.D_SPARSEEUCLIDIAN
D_EUCLIDIAN = _modshogun.D_EUCLIDIAN
D_CHISQUARE = _modshogun.D_CHISQUARE
D_TANIMOTO = _modshogun.D_TANIMOTO
D_COSINE = _modshogun.D_COSINE
D_BRAYCURTIS = _modshogun.D_BRAYCURTIS
D_CUSTOM = _modshogun.D_CUSTOM
D_ATTENUATEDEUCLIDIAN = _modshogun.D_ATTENUATEDEUCLIDIAN
class Distance(SGObject):
    """Proxy of C++ shogun::CDistance class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distance, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_Distance
    __del__ = lambda self : None;
    def distance(self, *args):
        """distance(self, idx_a, idx_b) -> float"""
        return _modshogun.Distance_distance(self, *args)

    def get_distance_matrix(self):
        """get_distance_matrix(self) -> numpy 2dim array of float"""
        return _modshogun.Distance_get_distance_matrix(self)

    def get_distance_matrix_real(self, *args):
        """get_distance_matrix_real(self, m, n, target) -> float *"""
        return _modshogun.Distance_get_distance_matrix_real(self, *args)

    def get_distance_matrix_shortreal(self, *args):
        """get_distance_matrix_shortreal(self, m, n, target) -> float *"""
        return _modshogun.Distance_get_distance_matrix_shortreal(self, *args)

    def init(self, *args):
        """init(self, lhs, rhs) -> bool"""
        return _modshogun.Distance_init(self, *args)

    def load(self, *args):
        """load(self, loader)"""
        return _modshogun.Distance_load(self, *args)

    def save(self, *args):
        """save(self, writer)"""
        return _modshogun.Distance_save(self, *args)

    def get_lhs(self):
        """get_lhs(self) -> Features"""
        return _modshogun.Distance_get_lhs(self)

    def get_rhs(self):
        """get_rhs(self) -> Features"""
        return _modshogun.Distance_get_rhs(self)

    def replace_rhs(self, *args):
        """replace_rhs(self, rhs) -> Features"""
        return _modshogun.Distance_replace_rhs(self, *args)

    def remove_lhs_and_rhs(self):
        """remove_lhs_and_rhs(self)"""
        return _modshogun.Distance_remove_lhs_and_rhs(self)

    def remove_lhs(self):
        """remove_lhs(self)"""
        return _modshogun.Distance_remove_lhs(self)

    def remove_rhs(self):
        """remove_rhs(self)"""
        return _modshogun.Distance_remove_rhs(self)

    def get_distance_type(self):
        """get_distance_type(self) -> shogun::EDistanceType"""
        return _modshogun.Distance_get_distance_type(self)

    def get_feature_type(self):
        """get_feature_type(self) -> shogun::EFeatureType"""
        return _modshogun.Distance_get_feature_type(self)

    def get_feature_class(self):
        """get_feature_class(self) -> shogun::EFeatureClass"""
        return _modshogun.Distance_get_feature_class(self)

    def get_precompute_matrix(self):
        """get_precompute_matrix(self) -> bool"""
        return _modshogun.Distance_get_precompute_matrix(self)

    def set_precompute_matrix(self, *args):
        """set_precompute_matrix(self, flag)"""
        return _modshogun.Distance_set_precompute_matrix(self, *args)

    def get_num_vec_lhs(self):
        """get_num_vec_lhs(self) ->  int"""
        return _modshogun.Distance_get_num_vec_lhs(self)

    def get_num_vec_rhs(self):
        """get_num_vec_rhs(self) ->  int"""
        return _modshogun.Distance_get_num_vec_rhs(self)

    def has_features(self):
        """has_features(self) -> bool"""
        return _modshogun.Distance_has_features(self)

    def lhs_equals_rhs(self):
        """lhs_equals_rhs(self) -> bool"""
        return _modshogun.Distance_lhs_equals_rhs(self)

Distance_swigregister = _modshogun.Distance_swigregister
Distance_swigregister(Distance)

class CustomDistance(Distance):
    """Proxy of C++ shogun::CCustomDistance class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CustomDistance
        __init__(self, d) -> CustomDistance
        __init__(self, distance_matrix) -> CustomDistance
        __init__(self, dm, rows, cols) -> CustomDistance
        __init__(self, dm, rows, cols) -> CustomDistance
        """
        this = _modshogun.new_CustomDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CustomDistance
    __del__ = lambda self : None;
    def dummy_init(self, *args):
        """dummy_init(self, rows, cols) -> bool"""
        return _modshogun.CustomDistance_dummy_init(self, *args)

    def set_triangle_distance_matrix_from_triangle(self, *args):
        """
        set_triangle_distance_matrix_from_triangle(self, dm, len) -> bool
        set_triangle_distance_matrix_from_triangle(self, dm, len) -> bool
        """
        return _modshogun.CustomDistance_set_triangle_distance_matrix_from_triangle(self, *args)

    def set_triangle_distance_matrix_from_full(self, *args):
        """
        set_triangle_distance_matrix_from_full(self, dm, rows, cols) -> bool
        set_triangle_distance_matrix_from_full(self, dm, rows, cols) -> bool
        """
        return _modshogun.CustomDistance_set_triangle_distance_matrix_from_full(self, *args)

    def set_full_distance_matrix_from_full(self, *args):
        """
        set_full_distance_matrix_from_full(self, dm, rows, cols) -> bool
        set_full_distance_matrix_from_full(self, dm, rows, cols) -> bool
        """
        return _modshogun.CustomDistance_set_full_distance_matrix_from_full(self, *args)

    def get_num_vec_lhs(self):
        """get_num_vec_lhs(self) ->  int"""
        return _modshogun.CustomDistance_get_num_vec_lhs(self)

    def get_num_vec_rhs(self):
        """get_num_vec_rhs(self) ->  int"""
        return _modshogun.CustomDistance_get_num_vec_rhs(self)

    def has_features(self):
        """has_features(self) -> bool"""
        return _modshogun.CustomDistance_has_features(self)

CustomDistance_swigregister = _modshogun.CustomDistance_swigregister
CustomDistance_swigregister(CustomDistance)

class KernelDistance(Distance):
    """Proxy of C++ shogun::CKernelDistance class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> KernelDistance
        __init__(self, width, k) -> KernelDistance
        __init__(self, l, r, width, k) -> KernelDistance
        """
        this = _modshogun.new_KernelDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_KernelDistance
    __del__ = lambda self : None;
KernelDistance_swigregister = _modshogun.KernelDistance_swigregister
KernelDistance_swigregister(KernelDistance)

class SimpleCharDistance(Distance):
    """Proxy of C++ shogun::CSimpleDistance<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleCharDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleCharDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SimpleCharDistance
    __del__ = lambda self : None;
SimpleCharDistance_swigregister = _modshogun.SimpleCharDistance_swigregister
SimpleCharDistance_swigregister(SimpleCharDistance)

class SimpleWordDistance(Distance):
    """Proxy of C++ shogun::CSimpleDistance<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleWordDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SimpleWordDistance
    __del__ = lambda self : None;
SimpleWordDistance_swigregister = _modshogun.SimpleWordDistance_swigregister
SimpleWordDistance_swigregister(SimpleWordDistance)

class SimpleIntDistance(Distance):
    """Proxy of C++ shogun::CSimpleDistance<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleIntDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleIntDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SimpleIntDistance
    __del__ = lambda self : None;
SimpleIntDistance_swigregister = _modshogun.SimpleIntDistance_swigregister
SimpleIntDistance_swigregister(SimpleIntDistance)

class SimpleRealDistance(Distance):
    """Proxy of C++ shogun::CSimpleDistance<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleRealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleRealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SimpleRealDistance
    __del__ = lambda self : None;
SimpleRealDistance_swigregister = _modshogun.SimpleRealDistance_swigregister
SimpleRealDistance_swigregister(SimpleRealDistance)

class SparseCharDistance(Distance):
    """Proxy of C++ shogun::CSparseDistance<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseCharDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseCharDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparseCharDistance
    __del__ = lambda self : None;
SparseCharDistance_swigregister = _modshogun.SparseCharDistance_swigregister
SparseCharDistance_swigregister(SparseCharDistance)

class SparseWordDistance(Distance):
    """Proxy of C++ shogun::CSparseDistance<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseWordDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparseWordDistance
    __del__ = lambda self : None;
SparseWordDistance_swigregister = _modshogun.SparseWordDistance_swigregister
SparseWordDistance_swigregister(SparseWordDistance)

class SparseIntDistance(Distance):
    """Proxy of C++ shogun::CSparseDistance<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseIntDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseIntDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparseIntDistance
    __del__ = lambda self : None;
SparseIntDistance_swigregister = _modshogun.SparseIntDistance_swigregister
SparseIntDistance_swigregister(SparseIntDistance)

class SparseRealDistance(Distance):
    """Proxy of C++ shogun::CSparseDistance<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseRealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseRealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparseRealDistance
    __del__ = lambda self : None;
SparseRealDistance_swigregister = _modshogun.SparseRealDistance_swigregister
SparseRealDistance_swigregister(SparseRealDistance)

class StringCharDistance(Distance):
    """Proxy of C++ shogun::CStringDistance<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringCharDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringCharDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringCharDistance
    __del__ = lambda self : None;
StringCharDistance_swigregister = _modshogun.StringCharDistance_swigregister
StringCharDistance_swigregister(StringCharDistance)

class StringWordDistance(Distance):
    """Proxy of C++ shogun::CStringDistance<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringWordDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringWordDistance
    __del__ = lambda self : None;
StringWordDistance_swigregister = _modshogun.StringWordDistance_swigregister
StringWordDistance_swigregister(StringWordDistance)

class StringIntDistance(Distance):
    """Proxy of C++ shogun::CStringDistance<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringIntDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringIntDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringIntDistance
    __del__ = lambda self : None;
StringIntDistance_swigregister = _modshogun.StringIntDistance_swigregister
StringIntDistance_swigregister(StringIntDistance)

class StringUlongDistance(Distance):
    """Proxy of C++ shogun::CStringDistance<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUlongDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringUlongDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringUlongDistance
    __del__ = lambda self : None;
StringUlongDistance_swigregister = _modshogun.StringUlongDistance_swigregister
StringUlongDistance_swigregister(StringUlongDistance)

class StringRealDistance(Distance):
    """Proxy of C++ shogun::CStringDistance<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Distance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringRealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [Distance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringRealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringRealDistance
    __del__ = lambda self : None;
StringRealDistance_swigregister = _modshogun.StringRealDistance_swigregister
StringRealDistance_swigregister(StringRealDistance)

class RealDistance(SimpleRealDistance):
    """Proxy of C++ shogun::CRealDistance class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RealDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RealDistance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_RealDistance
    __del__ = lambda self : None;
RealDistance_swigregister = _modshogun.RealDistance_swigregister
RealDistance_swigregister(RealDistance)

class CanberraMetric(SimpleRealDistance):
    """Proxy of C++ shogun::CCanberraMetric class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanberraMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CanberraMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CanberraMetric
        __init__(self, l, r) -> CanberraMetric
        """
        this = _modshogun.new_CanberraMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CanberraMetric
    __del__ = lambda self : None;
CanberraMetric_swigregister = _modshogun.CanberraMetric_swigregister
CanberraMetric_swigregister(CanberraMetric)

class ChebyshewMetric(SimpleRealDistance):
    """Proxy of C++ shogun::CChebyshewMetric class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshewMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshewMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ChebyshewMetric
        __init__(self, l, r) -> ChebyshewMetric
        """
        this = _modshogun.new_ChebyshewMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ChebyshewMetric
    __del__ = lambda self : None;
ChebyshewMetric_swigregister = _modshogun.ChebyshewMetric_swigregister
ChebyshewMetric_swigregister(ChebyshewMetric)

class GeodesicMetric(SimpleRealDistance):
    """Proxy of C++ shogun::CGeodesicMetric class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeodesicMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeodesicMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GeodesicMetric
        __init__(self, l, r) -> GeodesicMetric
        """
        this = _modshogun.new_GeodesicMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GeodesicMetric
    __del__ = lambda self : None;
GeodesicMetric_swigregister = _modshogun.GeodesicMetric_swigregister
GeodesicMetric_swigregister(GeodesicMetric)

class JensenMetric(SimpleRealDistance):
    """Proxy of C++ shogun::CJensenMetric class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JensenMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JensenMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> JensenMetric
        __init__(self, l, r) -> JensenMetric
        """
        this = _modshogun.new_JensenMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_JensenMetric
    __del__ = lambda self : None;
JensenMetric_swigregister = _modshogun.JensenMetric_swigregister
JensenMetric_swigregister(JensenMetric)

class ManhattanMetric(SimpleRealDistance):
    """Proxy of C++ shogun::CManhattanMetric class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManhattanMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ManhattanMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ManhattanMetric
        __init__(self, l, r) -> ManhattanMetric
        """
        this = _modshogun.new_ManhattanMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ManhattanMetric
    __del__ = lambda self : None;
ManhattanMetric_swigregister = _modshogun.ManhattanMetric_swigregister
ManhattanMetric_swigregister(ManhattanMetric)

class MinkowskiMetric(SimpleRealDistance):
    """Proxy of C++ shogun::CMinkowskiMetric class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinkowskiMetric, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinkowskiMetric, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MinkowskiMetric
        __init__(self, k) -> MinkowskiMetric
        __init__(self, l, r, k) -> MinkowskiMetric
        """
        this = _modshogun.new_MinkowskiMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MinkowskiMetric
    __del__ = lambda self : None;
MinkowskiMetric_swigregister = _modshogun.MinkowskiMetric_swigregister
MinkowskiMetric_swigregister(MinkowskiMetric)

class HammingWordDistance(StringWordDistance):
    """Proxy of C++ shogun::CHammingWordDistance class"""
    __swig_setmethods__ = {}
    for _s in [StringWordDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HammingWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HammingWordDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HammingWordDistance
        __init__(self, use_sign) -> HammingWordDistance
        __init__(self, l, r, use_sign) -> HammingWordDistance
        """
        this = _modshogun.new_HammingWordDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_HammingWordDistance
    __del__ = lambda self : None;
HammingWordDistance_swigregister = _modshogun.HammingWordDistance_swigregister
HammingWordDistance_swigregister(HammingWordDistance)

class ManhattanWordDistance(StringWordDistance):
    """Proxy of C++ shogun::CManhattanWordDistance class"""
    __swig_setmethods__ = {}
    for _s in [StringWordDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManhattanWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ManhattanWordDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ManhattanWordDistance
        __init__(self, l, r) -> ManhattanWordDistance
        """
        this = _modshogun.new_ManhattanWordDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ManhattanWordDistance
    __del__ = lambda self : None;
ManhattanWordDistance_swigregister = _modshogun.ManhattanWordDistance_swigregister
ManhattanWordDistance_swigregister(ManhattanWordDistance)

class CanberraWordDistance(StringWordDistance):
    """Proxy of C++ shogun::CCanberraWordDistance class"""
    __swig_setmethods__ = {}
    for _s in [StringWordDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CanberraWordDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CanberraWordDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CanberraWordDistance
        __init__(self, l, r) -> CanberraWordDistance
        """
        this = _modshogun.new_CanberraWordDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CanberraWordDistance
    __del__ = lambda self : None;
CanberraWordDistance_swigregister = _modshogun.CanberraWordDistance_swigregister
CanberraWordDistance_swigregister(CanberraWordDistance)

class EuclidianDistance(RealDistance):
    """Proxy of C++ shogun::CEuclidianDistance class"""
    __swig_setmethods__ = {}
    for _s in [RealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EuclidianDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [RealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EuclidianDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> EuclidianDistance
        __init__(self, l, r) -> EuclidianDistance
        """
        this = _modshogun.new_EuclidianDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_EuclidianDistance
    __del__ = lambda self : None;
    def get_disable_sqrt(self):
        """get_disable_sqrt(self) -> bool"""
        return _modshogun.EuclidianDistance_get_disable_sqrt(self)

    def set_disable_sqrt(self, *args):
        """set_disable_sqrt(self, state)"""
        return _modshogun.EuclidianDistance_set_disable_sqrt(self, *args)

EuclidianDistance_swigregister = _modshogun.EuclidianDistance_swigregister
EuclidianDistance_swigregister(EuclidianDistance)

class SparseEuclidianDistance(SparseRealDistance):
    """Proxy of C++ shogun::CSparseEuclidianDistance class"""
    __swig_setmethods__ = {}
    for _s in [SparseRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseEuclidianDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SparseRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseEuclidianDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SparseEuclidianDistance
        __init__(self, l, r) -> SparseEuclidianDistance
        """
        this = _modshogun.new_SparseEuclidianDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseEuclidianDistance
    __del__ = lambda self : None;
SparseEuclidianDistance_swigregister = _modshogun.SparseEuclidianDistance_swigregister
SparseEuclidianDistance_swigregister(SparseEuclidianDistance)

class BrayCurtisDistance(SimpleRealDistance):
    """Proxy of C++ shogun::CBrayCurtisDistance class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrayCurtisDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrayCurtisDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BrayCurtisDistance
        __init__(self, l, r) -> BrayCurtisDistance
        """
        this = _modshogun.new_BrayCurtisDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_BrayCurtisDistance
    __del__ = lambda self : None;
BrayCurtisDistance_swigregister = _modshogun.BrayCurtisDistance_swigregister
BrayCurtisDistance_swigregister(BrayCurtisDistance)

class ChiSquareDistance(SimpleRealDistance):
    """Proxy of C++ shogun::CChiSquareDistance class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChiSquareDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChiSquareDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ChiSquareDistance
        __init__(self, l, r) -> ChiSquareDistance
        """
        this = _modshogun.new_ChiSquareDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ChiSquareDistance
    __del__ = lambda self : None;
ChiSquareDistance_swigregister = _modshogun.ChiSquareDistance_swigregister
ChiSquareDistance_swigregister(ChiSquareDistance)

class CosineDistance(SimpleRealDistance):
    """Proxy of C++ shogun::CCosineDistance class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosineDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CosineDistance
        __init__(self, l, r) -> CosineDistance
        """
        this = _modshogun.new_CosineDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CosineDistance
    __del__ = lambda self : None;
CosineDistance_swigregister = _modshogun.CosineDistance_swigregister
CosineDistance_swigregister(CosineDistance)

class TanimotoDistance(SimpleRealDistance):
    """Proxy of C++ shogun::CTanimotoDistance class"""
    __swig_setmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TanimotoDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [SimpleRealDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TanimotoDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TanimotoDistance
        __init__(self, l, r) -> TanimotoDistance
        """
        this = _modshogun.new_TanimotoDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_TanimotoDistance
    __del__ = lambda self : None;
TanimotoDistance_swigregister = _modshogun.TanimotoDistance_swigregister
TanimotoDistance_swigregister(TanimotoDistance)

FASTBUTMEMHUNGRY = _modshogun.FASTBUTMEMHUNGRY
SLOWBUTMEMEFFICIENT = _modshogun.SLOWBUTMEMEFFICIENT
K_UNKNOWN = _modshogun.K_UNKNOWN
K_LINEAR = _modshogun.K_LINEAR
K_POLY = _modshogun.K_POLY
K_GAUSSIAN = _modshogun.K_GAUSSIAN
K_GAUSSIANSHIFT = _modshogun.K_GAUSSIANSHIFT
K_GAUSSIANMATCH = _modshogun.K_GAUSSIANMATCH
K_HISTOGRAM = _modshogun.K_HISTOGRAM
K_SALZBERG = _modshogun.K_SALZBERG
K_LOCALITYIMPROVED = _modshogun.K_LOCALITYIMPROVED
K_SIMPLELOCALITYIMPROVED = _modshogun.K_SIMPLELOCALITYIMPROVED
K_FIXEDDEGREE = _modshogun.K_FIXEDDEGREE
K_WEIGHTEDDEGREE = _modshogun.K_WEIGHTEDDEGREE
K_WEIGHTEDDEGREEPOS = _modshogun.K_WEIGHTEDDEGREEPOS
K_WEIGHTEDDEGREERBF = _modshogun.K_WEIGHTEDDEGREERBF
K_WEIGHTEDCOMMWORDSTRING = _modshogun.K_WEIGHTEDCOMMWORDSTRING
K_POLYMATCH = _modshogun.K_POLYMATCH
K_ALIGNMENT = _modshogun.K_ALIGNMENT
K_COMMWORDSTRING = _modshogun.K_COMMWORDSTRING
K_COMMULONGSTRING = _modshogun.K_COMMULONGSTRING
K_SPECTRUMRBF = _modshogun.K_SPECTRUMRBF
K_SPECTRUMMISMATCHRBF = _modshogun.K_SPECTRUMMISMATCHRBF
K_COMBINED = _modshogun.K_COMBINED
K_AUC = _modshogun.K_AUC
K_CUSTOM = _modshogun.K_CUSTOM
K_SIGMOID = _modshogun.K_SIGMOID
K_CHI2 = _modshogun.K_CHI2
K_DIAG = _modshogun.K_DIAG
K_CONST = _modshogun.K_CONST
K_DISTANCE = _modshogun.K_DISTANCE
K_LOCALALIGNMENT = _modshogun.K_LOCALALIGNMENT
K_PYRAMIDCHI2 = _modshogun.K_PYRAMIDCHI2
K_OLIGO = _modshogun.K_OLIGO
K_MATCHWORD = _modshogun.K_MATCHWORD
K_TPPK = _modshogun.K_TPPK
K_REGULATORYMODULES = _modshogun.K_REGULATORYMODULES
K_SPARSESPATIALSAMPLE = _modshogun.K_SPARSESPATIALSAMPLE
K_HISTOGRAMINTERSECTION = _modshogun.K_HISTOGRAMINTERSECTION
K_WAVELET = _modshogun.K_WAVELET
K_WAVE = _modshogun.K_WAVE
K_CAUCHY = _modshogun.K_CAUCHY
K_TSTUDENT = _modshogun.K_TSTUDENT
K_RATIONAL_QUADRATIC = _modshogun.K_RATIONAL_QUADRATIC
K_MULTIQUADRIC = _modshogun.K_MULTIQUADRIC
K_EXPONENTIAL = _modshogun.K_EXPONENTIAL
K_SPHERICAL = _modshogun.K_SPHERICAL
K_SPLINE = _modshogun.K_SPLINE
K_ANOVA = _modshogun.K_ANOVA
K_POWER = _modshogun.K_POWER
K_LOG = _modshogun.K_LOG
K_CIRCULAR = _modshogun.K_CIRCULAR
K_INVERSEMULTIQUADRIC = _modshogun.K_INVERSEMULTIQUADRIC
K_DISTANTSEGMENTS = _modshogun.K_DISTANTSEGMENTS
K_BESSEL = _modshogun.K_BESSEL
KP_NONE = _modshogun.KP_NONE
KP_LINADD = _modshogun.KP_LINADD
KP_KERNCOMBINATION = _modshogun.KP_KERNCOMBINATION
KP_BATCHEVALUATION = _modshogun.KP_BATCHEVALUATION
class Kernel(SGObject):
    """Proxy of C++ shogun::CKernel class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_Kernel
    __del__ = lambda self : None;
    def kernel(self, *args):
        """kernel(self, idx_a, idx_b) -> float"""
        return _modshogun.Kernel_kernel(self, *args)

    def get_kernel_matrix(self):
        """get_kernel_matrix(self) -> numpy 2dim array of float"""
        return _modshogun.Kernel_get_kernel_matrix(self)

    def get_kernel_col(self, *args):
        """get_kernel_col(self, j) -> RealVector"""
        return _modshogun.Kernel_get_kernel_col(self, *args)

    def init(self, *args):
        """init(self, lhs, rhs) -> bool"""
        return _modshogun.Kernel_init(self, *args)

    def set_normalizer(self, *args):
        """set_normalizer(self, normalizer) -> bool"""
        return _modshogun.Kernel_set_normalizer(self, *args)

    def get_normalizer(self):
        """get_normalizer(self) -> KernelNormalizer"""
        return _modshogun.Kernel_get_normalizer(self)

    def init_normalizer(self):
        """init_normalizer(self) -> bool"""
        return _modshogun.Kernel_init_normalizer(self)

    def load(self, *args):
        """load(self, loader)"""
        return _modshogun.Kernel_load(self, *args)

    def save(self, *args):
        """save(self, writer)"""
        return _modshogun.Kernel_save(self, *args)

    def get_lhs(self):
        """get_lhs(self) -> Features"""
        return _modshogun.Kernel_get_lhs(self)

    def get_rhs(self):
        """get_rhs(self) -> Features"""
        return _modshogun.Kernel_get_rhs(self)

    def get_num_vec_lhs(self):
        """get_num_vec_lhs(self) ->  int"""
        return _modshogun.Kernel_get_num_vec_lhs(self)

    def get_num_vec_rhs(self):
        """get_num_vec_rhs(self) ->  int"""
        return _modshogun.Kernel_get_num_vec_rhs(self)

    def has_features(self):
        """has_features(self) -> bool"""
        return _modshogun.Kernel_has_features(self)

    def get_lhs_equals_rhs(self):
        """get_lhs_equals_rhs(self) -> bool"""
        return _modshogun.Kernel_get_lhs_equals_rhs(self)

    def remove_lhs_and_rhs(self):
        """remove_lhs_and_rhs(self)"""
        return _modshogun.Kernel_remove_lhs_and_rhs(self)

    def remove_lhs(self):
        """remove_lhs(self)"""
        return _modshogun.Kernel_remove_lhs(self)

    def remove_rhs(self):
        """remove_rhs(self)"""
        return _modshogun.Kernel_remove_rhs(self)

    def get_kernel_type(self):
        """get_kernel_type(self) -> shogun::EKernelType"""
        return _modshogun.Kernel_get_kernel_type(self)

    def get_feature_type(self):
        """get_feature_type(self) -> shogun::EFeatureType"""
        return _modshogun.Kernel_get_feature_type(self)

    def get_feature_class(self):
        """get_feature_class(self) -> shogun::EFeatureClass"""
        return _modshogun.Kernel_get_feature_class(self)

    def set_cache_size(self, *args):
        """set_cache_size(self, size)"""
        return _modshogun.Kernel_set_cache_size(self, *args)

    def get_cache_size(self):
        """get_cache_size(self) ->  int"""
        return _modshogun.Kernel_get_cache_size(self)

    def cache_reset(self):
        """cache_reset(self)"""
        return _modshogun.Kernel_cache_reset(self)

    def get_max_elems_cache(self):
        """get_max_elems_cache(self) ->  int"""
        return _modshogun.Kernel_get_max_elems_cache(self)

    def get_activenum_cache(self):
        """get_activenum_cache(self) ->  int"""
        return _modshogun.Kernel_get_activenum_cache(self)

    def get_kernel_row(self, *args):
        """
        get_kernel_row(self, i) -> RealVector
        get_kernel_row(self, docnum, active2dnum, buffer, full_line=False)
        get_kernel_row(self, docnum, active2dnum, buffer)
        """
        return _modshogun.Kernel_get_kernel_row(self, *args)

    def cache_kernel_row(self, *args):
        """cache_kernel_row(self, x)"""
        return _modshogun.Kernel_cache_kernel_row(self, *args)

    def cache_multiple_kernel_rows(self, *args):
        """cache_multiple_kernel_rows(self, key, varnum)"""
        return _modshogun.Kernel_cache_multiple_kernel_rows(self, *args)

    def kernel_cache_reset_lru(self):
        """kernel_cache_reset_lru(self)"""
        return _modshogun.Kernel_kernel_cache_reset_lru(self)

    def kernel_cache_shrink(self, *args):
        """kernel_cache_shrink(self, totdoc, num_shrink, after)"""
        return _modshogun.Kernel_kernel_cache_shrink(self, *args)

    def resize_kernel_cache(self, *args):
        """
        resize_kernel_cache(self, size, regression_hack=False)
        resize_kernel_cache(self, size)
        """
        return _modshogun.Kernel_resize_kernel_cache(self, *args)

    def set_time(self, *args):
        """set_time(self, t)"""
        return _modshogun.Kernel_set_time(self, *args)

    def kernel_cache_touch(self, *args):
        """kernel_cache_touch(self, cacheidx) ->  int"""
        return _modshogun.Kernel_kernel_cache_touch(self, *args)

    def kernel_cache_check(self, *args):
        """kernel_cache_check(self, cacheidx) ->  int"""
        return _modshogun.Kernel_kernel_cache_check(self, *args)

    def kernel_cache_space_available(self):
        """kernel_cache_space_available(self) ->  int"""
        return _modshogun.Kernel_kernel_cache_space_available(self)

    def kernel_cache_init(self, *args):
        """
        kernel_cache_init(self, size, regression_hack=False)
        kernel_cache_init(self, size)
        """
        return _modshogun.Kernel_kernel_cache_init(self, *args)

    def kernel_cache_cleanup(self):
        """kernel_cache_cleanup(self)"""
        return _modshogun.Kernel_kernel_cache_cleanup(self)

    def list_kernel(self):
        """list_kernel(self)"""
        return _modshogun.Kernel_list_kernel(self)

    def has_property(self, *args):
        """has_property(self, p) -> bool"""
        return _modshogun.Kernel_has_property(self, *args)

    def clear_normal(self):
        """clear_normal(self)"""
        return _modshogun.Kernel_clear_normal(self)

    def add_to_normal(self, *args):
        """add_to_normal(self, vector_idx, weight)"""
        return _modshogun.Kernel_add_to_normal(self, *args)

    def get_optimization_type(self):
        """get_optimization_type(self) -> shogun::EOptimizationType"""
        return _modshogun.Kernel_get_optimization_type(self)

    def set_optimization_type(self, *args):
        """set_optimization_type(self, t)"""
        return _modshogun.Kernel_set_optimization_type(self, *args)

    def get_is_initialized(self):
        """get_is_initialized(self) -> bool"""
        return _modshogun.Kernel_get_is_initialized(self)

    def init_optimization(self, *args):
        """init_optimization(self, count, IDX, weights) -> bool"""
        return _modshogun.Kernel_init_optimization(self, *args)

    def delete_optimization(self):
        """delete_optimization(self) -> bool"""
        return _modshogun.Kernel_delete_optimization(self)

    def init_optimization_svm(self, *args):
        """init_optimization_svm(self, svm) -> bool"""
        return _modshogun.Kernel_init_optimization_svm(self, *args)

    def compute_optimized(self, *args):
        """compute_optimized(self, vector_idx) -> float"""
        return _modshogun.Kernel_compute_optimized(self, *args)

    def compute_batch(self, *args):
        """
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas, factor=1.0)
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas)
        """
        return _modshogun.Kernel_compute_batch(self, *args)

    def get_combined_kernel_weight(self):
        """get_combined_kernel_weight(self) -> float"""
        return _modshogun.Kernel_get_combined_kernel_weight(self)

    def set_combined_kernel_weight(self, *args):
        """set_combined_kernel_weight(self, nw)"""
        return _modshogun.Kernel_set_combined_kernel_weight(self, *args)

    def get_num_subkernels(self):
        """get_num_subkernels(self) ->  int"""
        return _modshogun.Kernel_get_num_subkernels(self)

    def compute_by_subkernel(self, *args):
        """compute_by_subkernel(self, vector_idx, subkernel_contrib)"""
        return _modshogun.Kernel_compute_by_subkernel(self, *args)

    def get_subkernel_weights(self, *args):
        """get_subkernel_weights(self, num_weights) -> float const *"""
        return _modshogun.Kernel_get_subkernel_weights(self, *args)

    def set_subkernel_weights(self, *args):
        """set_subkernel_weights(self, weights)"""
        return _modshogun.Kernel_set_subkernel_weights(self, *args)

Kernel_swigregister = _modshogun.Kernel_swigregister
Kernel_swigregister(Kernel)

class DotKernel(Kernel):
    """Proxy of C++ shogun::CDotKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_DotKernel
    __del__ = lambda self : None;
DotKernel_swigregister = _modshogun.DotKernel_swigregister
DotKernel_swigregister(DotKernel)

class SparseRealKernel(Kernel):
    """Proxy of C++ shogun::CSparseKernel<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseRealKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseRealKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparseRealKernel
    __del__ = lambda self : None;
SparseRealKernel_swigregister = _modshogun.SparseRealKernel_swigregister
SparseRealKernel_swigregister(SparseRealKernel)

class SparseWordKernel(Kernel):
    """Proxy of C++ shogun::CSparseKernel<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseWordKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseWordKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_SparseWordKernel
    __del__ = lambda self : None;
SparseWordKernel_swigregister = _modshogun.SparseWordKernel_swigregister
SparseWordKernel_swigregister(SparseWordKernel)

class StringRealKernel(Kernel):
    """Proxy of C++ shogun::CStringKernel<(float64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringRealKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringRealKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringRealKernel
    __del__ = lambda self : None;
StringRealKernel_swigregister = _modshogun.StringRealKernel_swigregister
StringRealKernel_swigregister(StringRealKernel)

class StringWordKernel(Kernel):
    """Proxy of C++ shogun::CStringKernel<(uint16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringWordKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringWordKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringWordKernel
    __del__ = lambda self : None;
StringWordKernel_swigregister = _modshogun.StringWordKernel_swigregister
StringWordKernel_swigregister(StringWordKernel)

class StringCharKernel(Kernel):
    """Proxy of C++ shogun::CStringKernel<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringCharKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringCharKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringCharKernel
    __del__ = lambda self : None;
StringCharKernel_swigregister = _modshogun.StringCharKernel_swigregister
StringCharKernel_swigregister(StringCharKernel)

class StringUlongKernel(Kernel):
    """Proxy of C++ shogun::CStringKernel<(uint64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUlongKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringUlongKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringUlongKernel
    __del__ = lambda self : None;
StringUlongKernel_swigregister = _modshogun.StringUlongKernel_swigregister
StringUlongKernel_swigregister(StringUlongKernel)

class StringShortKernel(Kernel):
    """Proxy of C++ shogun::CStringKernel<(int16_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringShortKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringShortKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringShortKernel
    __del__ = lambda self : None;
StringShortKernel_swigregister = _modshogun.StringShortKernel_swigregister
StringShortKernel_swigregister(StringShortKernel)

class StringByteKernel(Kernel):
    """Proxy of C++ shogun::CStringKernel<(uint8_t)> class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringByteKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringByteKernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_StringByteKernel
    __del__ = lambda self : None;
StringByteKernel_swigregister = _modshogun.StringByteKernel_swigregister
StringByteKernel_swigregister(StringByteKernel)

N_REGULAR = _modshogun.N_REGULAR
N_MULTITASK = _modshogun.N_MULTITASK
class KernelNormalizer(SGObject):
    """Proxy of C++ shogun::CKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelNormalizer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_KernelNormalizer
    __del__ = lambda self : None;
    def init(self, *args):
        """init(self, k) -> bool"""
        return _modshogun.KernelNormalizer_init(self, *args)

    def normalize(self, *args):
        """normalize(self, value, idx_lhs, idx_rhs) -> float"""
        return _modshogun.KernelNormalizer_normalize(self, *args)

    def normalize_lhs(self, *args):
        """normalize_lhs(self, value, idx_lhs) -> float"""
        return _modshogun.KernelNormalizer_normalize_lhs(self, *args)

    def normalize_rhs(self, *args):
        """normalize_rhs(self, value, idx_rhs) -> float"""
        return _modshogun.KernelNormalizer_normalize_rhs(self, *args)

    def register_params(self):
        """register_params(self)"""
        return _modshogun.KernelNormalizer_register_params(self)

    def get_normalizer_type(self):
        """get_normalizer_type(self) -> shogun::ENormalizerType"""
        return _modshogun.KernelNormalizer_get_normalizer_type(self)

    def set_normalizer_type(self, *args):
        """set_normalizer_type(self, type)"""
        return _modshogun.KernelNormalizer_set_normalizer_type(self, *args)

KernelNormalizer_swigregister = _modshogun.KernelNormalizer_swigregister
KernelNormalizer_swigregister(KernelNormalizer)

class PyramidChi2(DotKernel):
    """Proxy of C++ shogun::CPyramidChi2 class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyramidChi2, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyramidChi2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PyramidChi2
        __init__(self, size, num_cells2, weights_foreach_cell2, width_computation_type2, width2) -> PyramidChi2
        __init__(self, l, r, size, num_cells2, weights_foreach_cell2, width_computation_type2, width2) -> PyramidChi2
        """
        this = _modshogun.new_PyramidChi2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PyramidChi2
    __del__ = lambda self : None;
    def setparams_pychi2(self, *args):
        """setparams_pychi2(self, num_cells2, weights_foreach_cell2, width_computation_type2, width2)"""
        return _modshogun.PyramidChi2_setparams_pychi2(self, *args)

PyramidChi2_swigregister = _modshogun.PyramidChi2_swigregister
PyramidChi2_swigregister(PyramidChi2)

class ANOVAKernel(DotKernel):
    """Proxy of C++ shogun::CANOVAKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANOVAKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANOVAKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ANOVAKernel
        __init__(self, cache, d) -> ANOVAKernel
        __init__(self, l, r, d, cache) -> ANOVAKernel
        """
        this = _modshogun.new_ANOVAKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ANOVAKernel
    __del__ = lambda self : None;
    def get_cardinality(self):
        """get_cardinality(self) ->  int"""
        return _modshogun.ANOVAKernel_get_cardinality(self)

    def set_cardinality(self, *args):
        """set_cardinality(self, value)"""
        return _modshogun.ANOVAKernel_set_cardinality(self, *args)

    def compute_rec1(self, *args):
        """compute_rec1(self, idx_a, idx_b) -> float"""
        return _modshogun.ANOVAKernel_compute_rec1(self, *args)

    def compute_rec2(self, *args):
        """compute_rec2(self, idx_a, idx_b) -> float"""
        return _modshogun.ANOVAKernel_compute_rec2(self, *args)

ANOVAKernel_swigregister = _modshogun.ANOVAKernel_swigregister
ANOVAKernel_swigregister(ANOVAKernel)

class AUCKernel(DotKernel):
    """Proxy of C++ shogun::CAUCKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AUCKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AUCKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AUCKernel
        __init__(self, size, subkernel) -> AUCKernel
        """
        this = _modshogun.new_AUCKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_AUCKernel
    __del__ = lambda self : None;
    def setup_auc_maximization(self, *args):
        """setup_auc_maximization(self, labels) -> Labels"""
        return _modshogun.AUCKernel_setup_auc_maximization(self, *args)

AUCKernel_swigregister = _modshogun.AUCKernel_swigregister
AUCKernel_swigregister(AUCKernel)

class AvgDiagKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CAvgDiagKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgDiagKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgDiagKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, c=0.0): 
        """
        __init__(self, c=0.0) -> AvgDiagKernelNormalizer
        __init__(self) -> AvgDiagKernelNormalizer
        """
        this = _modshogun.new_AvgDiagKernelNormalizer(c)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_AvgDiagKernelNormalizer
    __del__ = lambda self : None;
AvgDiagKernelNormalizer_swigregister = _modshogun.AvgDiagKernelNormalizer_swigregister
AvgDiagKernelNormalizer_swigregister(AvgDiagKernelNormalizer)

class RidgeKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CRidgeKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RidgeKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RidgeKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, r=1e-10, c=0.0): 
        """
        __init__(self, r=1e-10, c=0.0) -> RidgeKernelNormalizer
        __init__(self, r=1e-10) -> RidgeKernelNormalizer
        __init__(self) -> RidgeKernelNormalizer
        """
        this = _modshogun.new_RidgeKernelNormalizer(r, c)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RidgeKernelNormalizer
    __del__ = lambda self : None;
RidgeKernelNormalizer_swigregister = _modshogun.RidgeKernelNormalizer_swigregister
RidgeKernelNormalizer_swigregister(RidgeKernelNormalizer)

class CauchyKernel(Kernel):
    """Proxy of C++ shogun::CCauchyKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CauchyKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CauchyKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CauchyKernel
        __init__(self, cache, sigma, dist) -> CauchyKernel
        __init__(self, l, r, sigma, dist) -> CauchyKernel
        """
        this = _modshogun.new_CauchyKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CauchyKernel
    __del__ = lambda self : None;
CauchyKernel_swigregister = _modshogun.CauchyKernel_swigregister
CauchyKernel_swigregister(CauchyKernel)

class CircularKernel(Kernel):
    """Proxy of C++ shogun::CCircularKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircularKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CircularKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CircularKernel
        __init__(self, size, sigma, dist) -> CircularKernel
        __init__(self, l, r, sigma, dist) -> CircularKernel
        """
        this = _modshogun.new_CircularKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_sigma(self, *args):
        """set_sigma(self, s)"""
        return _modshogun.CircularKernel_set_sigma(self, *args)

    def get_sigma(self):
        """get_sigma(self) -> float"""
        return _modshogun.CircularKernel_get_sigma(self)

    __swig_destroy__ = _modshogun.delete_CircularKernel
    __del__ = lambda self : None;
    def load_serializable_post(self):
        """load_serializable_post(self)"""
        return _modshogun.CircularKernel_load_serializable_post(self)

    def compute(self, *args):
        """compute(self, idx_a, idx_b) -> float"""
        return _modshogun.CircularKernel_compute(self, *args)

CircularKernel_swigregister = _modshogun.CircularKernel_swigregister
CircularKernel_swigregister(CircularKernel)

class Chi2Kernel(DotKernel):
    """Proxy of C++ shogun::CChi2Kernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chi2Kernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Chi2Kernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Chi2Kernel
        __init__(self, size, width) -> Chi2Kernel
        __init__(self, l, r, width, size) -> Chi2Kernel
        """
        this = _modshogun.new_Chi2Kernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Chi2Kernel
    __del__ = lambda self : None;
Chi2Kernel_swigregister = _modshogun.Chi2Kernel_swigregister
Chi2Kernel_swigregister(Chi2Kernel)

class CombinedKernel(Kernel):
    """Proxy of C++ shogun::CCombinedKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombinedKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombinedKernel, name)
    __repr__ = _swig_repr
    def __init__(self, size=10, append_subkernel_weights=False): 
        """
        __init__(self, size=10, append_subkernel_weights=False) -> CombinedKernel
        __init__(self, size=10) -> CombinedKernel
        __init__(self) -> CombinedKernel
        """
        this = _modshogun.new_CombinedKernel(size, append_subkernel_weights)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CombinedKernel
    __del__ = lambda self : None;
    def list_kernels(self):
        """list_kernels(self)"""
        return _modshogun.CombinedKernel_list_kernels(self)

    def get_first_kernel(self, *args):
        """
        get_first_kernel(self) -> Kernel
        get_first_kernel(self, current) -> Kernel
        """
        return _modshogun.CombinedKernel_get_first_kernel(self, *args)

    def get_kernel(self, *args):
        """get_kernel(self, idx) -> Kernel"""
        return _modshogun.CombinedKernel_get_kernel(self, *args)

    def get_last_kernel(self):
        """get_last_kernel(self) -> Kernel"""
        return _modshogun.CombinedKernel_get_last_kernel(self)

    def get_next_kernel(self, *args):
        """
        get_next_kernel(self) -> Kernel
        get_next_kernel(self, current) -> Kernel
        """
        return _modshogun.CombinedKernel_get_next_kernel(self, *args)

    def insert_kernel(self, *args):
        """insert_kernel(self, k) -> bool"""
        return _modshogun.CombinedKernel_insert_kernel(self, *args)

    def append_kernel(self, *args):
        """append_kernel(self, k) -> bool"""
        return _modshogun.CombinedKernel_append_kernel(self, *args)

    def delete_kernel(self):
        """delete_kernel(self) -> bool"""
        return _modshogun.CombinedKernel_delete_kernel(self)

    def get_append_subkernel_weights(self):
        """get_append_subkernel_weights(self) -> bool"""
        return _modshogun.CombinedKernel_get_append_subkernel_weights(self)

    def compute_batch(self, *args):
        """
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas, factor=1.0)
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas)
        """
        return _modshogun.CombinedKernel_compute_batch(self, *args)

    def compute_optimized_kernel_helper(*args):
        """compute_optimized_kernel_helper(p) -> void *"""
        return _modshogun.CombinedKernel_compute_optimized_kernel_helper(*args)

    if _newclass:compute_optimized_kernel_helper = staticmethod(compute_optimized_kernel_helper)
    __swig_getmethods__["compute_optimized_kernel_helper"] = lambda x: compute_optimized_kernel_helper
    def compute_kernel_helper(*args):
        """compute_kernel_helper(p) -> void *"""
        return _modshogun.CombinedKernel_compute_kernel_helper(*args)

    if _newclass:compute_kernel_helper = staticmethod(compute_kernel_helper)
    __swig_getmethods__["compute_kernel_helper"] = lambda x: compute_kernel_helper
    def emulate_compute_batch(self, *args):
        """emulate_compute_batch(self, k, num_vec, vec_idx, target, num_suppvec, IDX, weights)"""
        return _modshogun.CombinedKernel_emulate_compute_batch(self, *args)

    def get_subkernel_weights(self, *args):
        """
        get_subkernel_weights(self, num_weights) -> float const
        get_subkernel_weights(self) -> RealVector
        """
        return _modshogun.CombinedKernel_get_subkernel_weights(self, *args)

    def precompute_subkernels(self):
        """precompute_subkernels(self) -> bool"""
        return _modshogun.CombinedKernel_precompute_subkernels(self)

    def KernelToCombinedKernel(self, *args):
        """KernelToCombinedKernel(self, n) -> CombinedKernel"""
        return _modshogun.CombinedKernel_KernelToCombinedKernel(self, *args)

CombinedKernel_swigregister = _modshogun.CombinedKernel_swigregister
CombinedKernel_swigregister(CombinedKernel)

def CombinedKernel_compute_optimized_kernel_helper(*args):
  """CombinedKernel_compute_optimized_kernel_helper(p) -> void *"""
  return _modshogun.CombinedKernel_compute_optimized_kernel_helper(*args)

def CombinedKernel_compute_kernel_helper(*args):
  """CombinedKernel_compute_kernel_helper(p) -> void *"""
  return _modshogun.CombinedKernel_compute_kernel_helper(*args)

class CommUlongStringKernel(StringUlongKernel):
    """Proxy of C++ shogun::CCommUlongStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringUlongKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommUlongStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringUlongKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommUlongStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=10, use_sign=False) -> CommUlongStringKernel
        __init__(self, size=10) -> CommUlongStringKernel
        __init__(self) -> CommUlongStringKernel
        __init__(self, l, r, use_sign=False, size=10) -> CommUlongStringKernel
        __init__(self, l, r, use_sign=False) -> CommUlongStringKernel
        __init__(self, l, r) -> CommUlongStringKernel
        """
        this = _modshogun.new_CommUlongStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CommUlongStringKernel
    __del__ = lambda self : None;
    def merge_dictionaries(self, *args):
        """merge_dictionaries(self, t, j, k, vec, dic, dic_weights, weight, vec_idx)"""
        return _modshogun.CommUlongStringKernel_merge_dictionaries(self, *args)

    def get_dictionary(self, *args):
        """get_dictionary(self, dsize, dict, dweights)"""
        return _modshogun.CommUlongStringKernel_get_dictionary(self, *args)

CommUlongStringKernel_swigregister = _modshogun.CommUlongStringKernel_swigregister
CommUlongStringKernel_swigregister(CommUlongStringKernel)

class CommWordStringKernel(StringWordKernel):
    """Proxy of C++ shogun::CCommWordStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringWordKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommWordStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommWordStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CommWordStringKernel
        __init__(self, size, use_sign) -> CommWordStringKernel
        __init__(self, l, r, use_sign=False, size=10) -> CommWordStringKernel
        __init__(self, l, r, use_sign=False) -> CommWordStringKernel
        __init__(self, l, r) -> CommWordStringKernel
        """
        this = _modshogun.new_CommWordStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CommWordStringKernel
    __del__ = lambda self : None;
    def init_dictionary(self, *args):
        """init_dictionary(self, size) -> bool"""
        return _modshogun.CommWordStringKernel_init_dictionary(self, *args)

    def get_dictionary(self, *args):
        """get_dictionary(self, dsize, dweights)"""
        return _modshogun.CommWordStringKernel_get_dictionary(self, *args)

    def compute_scoring(self, *args):
        """
        compute_scoring(self, max_degree, num_feat, num_sym, target, num_suppvec, IDX, alphas, do_init=True) -> float
        compute_scoring(self, max_degree, num_feat, num_sym, target, num_suppvec, IDX, alphas) -> float *
        """
        return _modshogun.CommWordStringKernel_compute_scoring(self, *args)

    def compute_consensus(self, *args):
        """compute_consensus(self, num_feat, num_suppvec, IDX, alphas) -> str *"""
        return _modshogun.CommWordStringKernel_compute_consensus(self, *args)

    def set_use_dict_diagonal_optimization(self, *args):
        """set_use_dict_diagonal_optimization(self, flag)"""
        return _modshogun.CommWordStringKernel_set_use_dict_diagonal_optimization(self, *args)

    def get_use_dict_diagonal_optimization(self):
        """get_use_dict_diagonal_optimization(self) -> bool"""
        return _modshogun.CommWordStringKernel_get_use_dict_diagonal_optimization(self)

CommWordStringKernel_swigregister = _modshogun.CommWordStringKernel_swigregister
CommWordStringKernel_swigregister(CommWordStringKernel)

class ConstKernel(Kernel):
    """Proxy of C++ shogun::CConstKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ConstKernel
        __init__(self, c) -> ConstKernel
        __init__(self, l, r, c) -> ConstKernel
        """
        this = _modshogun.new_ConstKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ConstKernel
    __del__ = lambda self : None;
ConstKernel_swigregister = _modshogun.ConstKernel_swigregister
ConstKernel_swigregister(ConstKernel)

class CustomKernel(Kernel):
    """Proxy of C++ shogun::CCustomKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CustomKernel
        __init__(self, k) -> CustomKernel
        __init__(self, km) -> CustomKernel
        """
        this = _modshogun.new_CustomKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CustomKernel
    __del__ = lambda self : None;
    def dummy_init(self, *args):
        """dummy_init(self, rows, cols) -> bool"""
        return _modshogun.CustomKernel_dummy_init(self, *args)

    def set_triangle_kernel_matrix_from_triangle(self, *args):
        """set_triangle_kernel_matrix_from_triangle(self, tri_kernel_matrix) -> bool"""
        return _modshogun.CustomKernel_set_triangle_kernel_matrix_from_triangle(self, *args)

    def set_triangle_kernel_matrix_from_full(self, *args):
        """set_triangle_kernel_matrix_from_full(self, full_kernel_matrix) -> bool"""
        return _modshogun.CustomKernel_set_triangle_kernel_matrix_from_full(self, *args)

    def set_full_kernel_matrix_from_full(self, *args):
        """
        set_full_kernel_matrix_from_full(self, full_kernel_matrix) -> bool
        set_full_kernel_matrix_from_full(self, full_kernel_matrix) -> bool
        """
        return _modshogun.CustomKernel_set_full_kernel_matrix_from_full(self, *args)

CustomKernel_swigregister = _modshogun.CustomKernel_swigregister
CustomKernel_swigregister(CustomKernel)

class DiagKernel(Kernel):
    """Proxy of C++ shogun::CDiagKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiagKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DiagKernel
        __init__(self, size, diag=1.0) -> DiagKernel
        __init__(self, size) -> DiagKernel
        __init__(self, l, r, diag=1.0) -> DiagKernel
        __init__(self, l, r) -> DiagKernel
        """
        this = _modshogun.new_DiagKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DiagKernel
    __del__ = lambda self : None;
DiagKernel_swigregister = _modshogun.DiagKernel_swigregister
DiagKernel_swigregister(DiagKernel)

class DiceKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CDiceKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiceKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiceKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, use_opt_diag=False): 
        """
        __init__(self, use_opt_diag=False) -> DiceKernelNormalizer
        __init__(self) -> DiceKernelNormalizer
        """
        this = _modshogun.new_DiceKernelNormalizer(use_opt_diag)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DiceKernelNormalizer
    __del__ = lambda self : None;
    def alloc_and_compute_diag(self, *args):
        """alloc_and_compute_diag(self, k, v, num) -> bool"""
        return _modshogun.DiceKernelNormalizer_alloc_and_compute_diag(self, *args)

DiceKernelNormalizer_swigregister = _modshogun.DiceKernelNormalizer_swigregister
DiceKernelNormalizer_swigregister(DiceKernelNormalizer)

class ScatterKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CScatterKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScatterKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScatterKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ScatterKernelNormalizer
        __init__(self, const_diag, const_offdiag, labels, normalizer=None) -> ScatterKernelNormalizer
        __init__(self, const_diag, const_offdiag, labels) -> ScatterKernelNormalizer
        """
        this = _modshogun.new_ScatterKernelNormalizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ScatterKernelNormalizer
    __del__ = lambda self : None;
    def get_testing_class(self):
        """get_testing_class(self) ->  int"""
        return _modshogun.ScatterKernelNormalizer_get_testing_class(self)

    def set_testing_class(self, *args):
        """set_testing_class(self, c)"""
        return _modshogun.ScatterKernelNormalizer_set_testing_class(self, *args)

ScatterKernelNormalizer_swigregister = _modshogun.ScatterKernelNormalizer_swigregister
ScatterKernelNormalizer_swigregister(ScatterKernelNormalizer)

class VarianceKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CVarianceKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarianceKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VarianceKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> VarianceKernelNormalizer"""
        this = _modshogun.new_VarianceKernelNormalizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_VarianceKernelNormalizer
    __del__ = lambda self : None;
VarianceKernelNormalizer_swigregister = _modshogun.VarianceKernelNormalizer_swigregister
VarianceKernelNormalizer_swigregister(VarianceKernelNormalizer)

class DistanceKernel(Kernel):
    """Proxy of C++ shogun::CDistanceKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistanceKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistanceKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DistanceKernel
        __init__(self, cache, width, dist) -> DistanceKernel
        __init__(self, l, r, width, dist) -> DistanceKernel
        """
        this = _modshogun.new_DistanceKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DistanceKernel
    __del__ = lambda self : None;
    def register_params(self):
        """register_params(self)"""
        return _modshogun.DistanceKernel_register_params(self)

    def set_width(self, *args):
        """set_width(self, w)"""
        return _modshogun.DistanceKernel_set_width(self, *args)

    def get_width(self):
        """get_width(self) -> float"""
        return _modshogun.DistanceKernel_get_width(self)

DistanceKernel_swigregister = _modshogun.DistanceKernel_swigregister
DistanceKernel_swigregister(DistanceKernel)

class DistantSegmentsKernel(StringCharKernel):
    """Proxy of C++ shogun::CDistantSegmentsKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistantSegmentsKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistantSegmentsKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DistantSegmentsKernel
        __init__(self, size, delta, theta) -> DistantSegmentsKernel
        __init__(self, l, r, size, delta, theta) -> DistantSegmentsKernel
        """
        this = _modshogun.new_DistantSegmentsKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DistantSegmentsKernel
    __del__ = lambda self : None;
DistantSegmentsKernel_swigregister = _modshogun.DistantSegmentsKernel_swigregister
DistantSegmentsKernel_swigregister(DistantSegmentsKernel)

class ExponentialKernel(DotKernel):
    """Proxy of C++ shogun::CExponentialKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExponentialKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ExponentialKernel
        __init__(self, l, r, width, distance, size) -> ExponentialKernel
        """
        this = _modshogun.new_ExponentialKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ExponentialKernel
    __del__ = lambda self : None;
    def get_width(self):
        """get_width(self) -> float"""
        return _modshogun.ExponentialKernel_get_width(self)

ExponentialKernel_swigregister = _modshogun.ExponentialKernel_swigregister
ExponentialKernel_swigregister(ExponentialKernel)

class FixedDegreeStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CFixedDegreeStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedDegreeStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedDegreeStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FixedDegreeStringKernel
        __init__(self, size, degree) -> FixedDegreeStringKernel
        __init__(self, l, r, degree) -> FixedDegreeStringKernel
        """
        this = _modshogun.new_FixedDegreeStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_FixedDegreeStringKernel
    __del__ = lambda self : None;
FixedDegreeStringKernel_swigregister = _modshogun.FixedDegreeStringKernel_swigregister
FixedDegreeStringKernel_swigregister(FixedDegreeStringKernel)

class GaussianKernel(DotKernel):
    """Proxy of C++ shogun::CGaussianKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GaussianKernel
        __init__(self, size, width) -> GaussianKernel
        __init__(self, l, r, width, size=10) -> GaussianKernel
        __init__(self, l, r, width) -> GaussianKernel
        """
        this = _modshogun.new_GaussianKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GaussianKernel
    __del__ = lambda self : None;
    def set_width(self, *args):
        """set_width(self, w)"""
        return _modshogun.GaussianKernel_set_width(self, *args)

    def get_width(self):
        """get_width(self) -> float"""
        return _modshogun.GaussianKernel_get_width(self)

    def set_compact_enabled(self, *args):
        """set_compact_enabled(self, compact)"""
        return _modshogun.GaussianKernel_set_compact_enabled(self, *args)

    def get_compact_enabled(self):
        """get_compact_enabled(self) -> bool"""
        return _modshogun.GaussianKernel_get_compact_enabled(self)

GaussianKernel_swigregister = _modshogun.GaussianKernel_swigregister
GaussianKernel_swigregister(GaussianKernel)

class GaussianShiftKernel(GaussianKernel):
    """Proxy of C++ shogun::CGaussianShiftKernel class"""
    __swig_setmethods__ = {}
    for _s in [GaussianKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianShiftKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [GaussianKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianShiftKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GaussianShiftKernel
        __init__(self, size, width, max_shift, shift_step) -> GaussianShiftKernel
        __init__(self, l, r, width, max_shift, shift_step, size=10) -> GaussianShiftKernel
        __init__(self, l, r, width, max_shift, shift_step) -> GaussianShiftKernel
        """
        this = _modshogun.new_GaussianShiftKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GaussianShiftKernel
    __del__ = lambda self : None;
GaussianShiftKernel_swigregister = _modshogun.GaussianShiftKernel_swigregister
GaussianShiftKernel_swigregister(GaussianShiftKernel)

class GaussianShortRealKernel(DotKernel):
    """Proxy of C++ shogun::CGaussianShortRealKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianShortRealKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianShortRealKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GaussianShortRealKernel
        __init__(self, size, width) -> GaussianShortRealKernel
        __init__(self, l, r, width, size=10) -> GaussianShortRealKernel
        __init__(self, l, r, width) -> GaussianShortRealKernel
        """
        this = _modshogun.new_GaussianShortRealKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GaussianShortRealKernel
    __del__ = lambda self : None;
    def register_params(self):
        """register_params(self)"""
        return _modshogun.GaussianShortRealKernel_register_params(self)

GaussianShortRealKernel_swigregister = _modshogun.GaussianShortRealKernel_swigregister
GaussianShortRealKernel_swigregister(GaussianShortRealKernel)

class HistogramIntersectionKernel(DotKernel):
    """Proxy of C++ shogun::CHistogramIntersectionKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistogramIntersectionKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistogramIntersectionKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HistogramIntersectionKernel
        __init__(self, size) -> HistogramIntersectionKernel
        __init__(self, l, r, beta=1.0, size=10) -> HistogramIntersectionKernel
        __init__(self, l, r, beta=1.0) -> HistogramIntersectionKernel
        __init__(self, l, r) -> HistogramIntersectionKernel
        """
        this = _modshogun.new_HistogramIntersectionKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_HistogramIntersectionKernel
    __del__ = lambda self : None;
    def register_params(self):
        """register_params(self)"""
        return _modshogun.HistogramIntersectionKernel_register_params(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _modshogun.HistogramIntersectionKernel_get_beta(self)

    def set_beta(self, *args):
        """set_beta(self, beta)"""
        return _modshogun.HistogramIntersectionKernel_set_beta(self, *args)

HistogramIntersectionKernel_swigregister = _modshogun.HistogramIntersectionKernel_swigregister
HistogramIntersectionKernel_swigregister(HistogramIntersectionKernel)

class HistogramWordStringKernel(StringWordKernel):
    """Proxy of C++ shogun::CHistogramWordStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringWordKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistogramWordStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HistogramWordStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HistogramWordStringKernel
        __init__(self, size, pie) -> HistogramWordStringKernel
        __init__(self, l, r, pie) -> HistogramWordStringKernel
        """
        this = _modshogun.new_HistogramWordStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_HistogramWordStringKernel
    __del__ = lambda self : None;
HistogramWordStringKernel_swigregister = _modshogun.HistogramWordStringKernel_swigregister
HistogramWordStringKernel_swigregister(HistogramWordStringKernel)

class IdentityKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CIdentityKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> IdentityKernelNormalizer"""
        this = _modshogun.new_IdentityKernelNormalizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_IdentityKernelNormalizer
    __del__ = lambda self : None;
IdentityKernelNormalizer_swigregister = _modshogun.IdentityKernelNormalizer_swigregister
IdentityKernelNormalizer_swigregister(IdentityKernelNormalizer)

class InverseMultiQuadricKernel(Kernel):
    """Proxy of C++ shogun::CInverseMultiQuadricKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseMultiQuadricKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseMultiQuadricKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InverseMultiQuadricKernel
        __init__(self, cache, coef, dist) -> InverseMultiQuadricKernel
        __init__(self, l, r, coef, dist) -> InverseMultiQuadricKernel
        """
        this = _modshogun.new_InverseMultiQuadricKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_coef(self):
        """get_coef(self) -> float"""
        return _modshogun.InverseMultiQuadricKernel_get_coef(self)

    def set_coef(self, *args):
        """set_coef(self, value)"""
        return _modshogun.InverseMultiQuadricKernel_set_coef(self, *args)

    __swig_destroy__ = _modshogun.delete_InverseMultiQuadricKernel
    __del__ = lambda self : None;
InverseMultiQuadricKernel_swigregister = _modshogun.InverseMultiQuadricKernel_swigregister
InverseMultiQuadricKernel_swigregister(InverseMultiQuadricKernel)

class LinearKernel(DotKernel):
    """Proxy of C++ shogun::CLinearKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LinearKernel
        __init__(self, l, r) -> LinearKernel
        """
        this = _modshogun.new_LinearKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LinearKernel
    __del__ = lambda self : None;
    def init_optimization(self, *args):
        """
        init_optimization(self, num_suppvec, sv_idx, alphas) -> bool
        init_optimization(self, km) -> bool
        """
        return _modshogun.LinearKernel_init_optimization(self, *args)

    def get_normal(self, *args):
        """get_normal(self, len) -> float const *"""
        return _modshogun.LinearKernel_get_normal(self, *args)

    def get_w(self, *args):
        """get_w(self, dst_w, dst_dims)"""
        return _modshogun.LinearKernel_get_w(self, *args)

    def set_w(self, *args):
        """set_w(self, src_w, src_w_dim)"""
        return _modshogun.LinearKernel_set_w(self, *args)

LinearKernel_swigregister = _modshogun.LinearKernel_swigregister
LinearKernel_swigregister(LinearKernel)

class LinearStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CLinearStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LinearStringKernel
        __init__(self, l, r) -> LinearStringKernel
        """
        this = _modshogun.new_LinearStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LinearStringKernel
    __del__ = lambda self : None;
LinearStringKernel_swigregister = _modshogun.LinearStringKernel_swigregister
LinearStringKernel_swigregister(LinearStringKernel)

class SparseSpatialSampleStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CSparseSpatialSampleStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SparseSpatialSampleStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SparseSpatialSampleStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SparseSpatialSampleStringKernel
        __init__(self, l, r) -> SparseSpatialSampleStringKernel
        """
        this = _modshogun.new_SparseSpatialSampleStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SparseSpatialSampleStringKernel
    __del__ = lambda self : None;
    def set_d(self, *args):
        """set_d(self, max_distance)"""
        return _modshogun.SparseSpatialSampleStringKernel_set_d(self, *args)

    def get_d(self):
        """get_d(self) ->  int"""
        return _modshogun.SparseSpatialSampleStringKernel_get_d(self)

    def set_t(self, *args):
        """set_t(self, sequence_length)"""
        return _modshogun.SparseSpatialSampleStringKernel_set_t(self, *args)

    def get_t(self):
        """get_t(self) ->  int"""
        return _modshogun.SparseSpatialSampleStringKernel_get_t(self)

SparseSpatialSampleStringKernel_swigregister = _modshogun.SparseSpatialSampleStringKernel_swigregister
SparseSpatialSampleStringKernel_swigregister(SparseSpatialSampleStringKernel)

LOGSUM_TBL = _modshogun.LOGSUM_TBL
class LocalAlignmentStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CLocalAlignmentStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAlignmentStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAlignmentStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, size=0) -> LocalAlignmentStringKernel
        __init__(self) -> LocalAlignmentStringKernel
        __init__(self, l, r, opening=12, extension=2) -> LocalAlignmentStringKernel
        __init__(self, l, r, opening=12) -> LocalAlignmentStringKernel
        __init__(self, l, r) -> LocalAlignmentStringKernel
        """
        this = _modshogun.new_LocalAlignmentStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LocalAlignmentStringKernel
    __del__ = lambda self : None;
LocalAlignmentStringKernel_swigregister = _modshogun.LocalAlignmentStringKernel_swigregister
LocalAlignmentStringKernel_swigregister(LocalAlignmentStringKernel)

class LocalityImprovedStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CLocalityImprovedStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalityImprovedStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalityImprovedStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LocalityImprovedStringKernel
        __init__(self, size, length, inner_degree, outer_degree) -> LocalityImprovedStringKernel
        __init__(self, l, r, length, inner_degree, outer_degree) -> LocalityImprovedStringKernel
        """
        this = _modshogun.new_LocalityImprovedStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LocalityImprovedStringKernel
    __del__ = lambda self : None;
LocalityImprovedStringKernel_swigregister = _modshogun.LocalityImprovedStringKernel_swigregister
LocalityImprovedStringKernel_swigregister(LocalityImprovedStringKernel)

class MatchWordStringKernel(StringWordKernel):
    """Proxy of C++ shogun::CMatchWordStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringWordKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchWordStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatchWordStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MatchWordStringKernel
        __init__(self, size, d) -> MatchWordStringKernel
        __init__(self, l, r, degree) -> MatchWordStringKernel
        """
        this = _modshogun.new_MatchWordStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MatchWordStringKernel
    __del__ = lambda self : None;
MatchWordStringKernel_swigregister = _modshogun.MatchWordStringKernel_swigregister
MatchWordStringKernel_swigregister(MatchWordStringKernel)

class MultitaskKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CMultitaskKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultitaskKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultitaskKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultitaskKernelNormalizer
        __init__(self, task_vector) -> MultitaskKernelNormalizer
        """
        this = _modshogun.new_MultitaskKernelNormalizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MultitaskKernelNormalizer
    __del__ = lambda self : None;
    def get_num_unique_tasks(self, *args):
        """get_num_unique_tasks(self, vec) ->  int"""
        return _modshogun.MultitaskKernelNormalizer_get_num_unique_tasks(self, *args)

    def get_task_vector_lhs(self):
        """get_task_vector_lhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelNormalizer_get_task_vector_lhs(self)

    def set_task_vector_lhs(self, *args):
        """set_task_vector_lhs(self, vec)"""
        return _modshogun.MultitaskKernelNormalizer_set_task_vector_lhs(self, *args)

    def get_task_vector_rhs(self):
        """get_task_vector_rhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelNormalizer_get_task_vector_rhs(self)

    def set_task_vector_rhs(self, *args):
        """set_task_vector_rhs(self, vec)"""
        return _modshogun.MultitaskKernelNormalizer_set_task_vector_rhs(self, *args)

    def set_task_vector(self, *args):
        """set_task_vector(self, vec)"""
        return _modshogun.MultitaskKernelNormalizer_set_task_vector(self, *args)

    def get_task_similarity(self, *args):
        """get_task_similarity(self, task_lhs, task_rhs) -> float"""
        return _modshogun.MultitaskKernelNormalizer_get_task_similarity(self, *args)

    def set_task_similarity(self, *args):
        """set_task_similarity(self, task_lhs, task_rhs, similarity)"""
        return _modshogun.MultitaskKernelNormalizer_set_task_similarity(self, *args)

    def KernelNormalizerToMultitaskKernelNormalizer(self, *args):
        """KernelNormalizerToMultitaskKernelNormalizer(self, n) -> MultitaskKernelNormalizer"""
        return _modshogun.MultitaskKernelNormalizer_KernelNormalizerToMultitaskKernelNormalizer(self, *args)

MultitaskKernelNormalizer_swigregister = _modshogun.MultitaskKernelNormalizer_swigregister
MultitaskKernelNormalizer_swigregister(MultitaskKernelNormalizer)

class MultitaskKernelMklNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CMultitaskKernelMklNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultitaskKernelMklNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultitaskKernelMklNormalizer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def get_beta(self, *args):
        """get_beta(self, idx) -> float"""
        return _modshogun.MultitaskKernelMklNormalizer_get_beta(self, *args)

    def set_beta(self, *args):
        """set_beta(self, idx, weight)"""
        return _modshogun.MultitaskKernelMklNormalizer_set_beta(self, *args)

    def get_num_betas(self):
        """get_num_betas(self) ->  int"""
        return _modshogun.MultitaskKernelMklNormalizer_get_num_betas(self)

    __swig_destroy__ = _modshogun.delete_MultitaskKernelMklNormalizer
    __del__ = lambda self : None;
MultitaskKernelMklNormalizer_swigregister = _modshogun.MultitaskKernelMklNormalizer_swigregister
MultitaskKernelMklNormalizer_swigregister(MultitaskKernelMklNormalizer)

class CTaxonomy(SGObject):
    """Proxy of C++ shogun::CTaxonomy class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTaxonomy, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTaxonomy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CTaxonomy"""
        this = _modshogun.new_CTaxonomy()
        try: self.this.append(this)
        except: self.this = this
    def set_root_beta(self, *args):
        """set_root_beta(self, beta)"""
        return _modshogun.CTaxonomy_set_root_beta(self, *args)

    def get_id(self, *args):
        """get_id(self, name) ->  int"""
        return _modshogun.CTaxonomy_get_id(self, *args)

    def compute_node_similarity(self, *args):
        """compute_node_similarity(self, task_lhs, task_rhs) -> float"""
        return _modshogun.CTaxonomy_compute_node_similarity(self, *args)

    def update_task_histogram(self, *args):
        """update_task_histogram(self, task_vector_lhs)"""
        return _modshogun.CTaxonomy_update_task_histogram(self, *args)

    def get_num_nodes(self):
        """get_num_nodes(self) ->  int"""
        return _modshogun.CTaxonomy_get_num_nodes(self)

    def get_num_leaves(self):
        """get_num_leaves(self) ->  int"""
        return _modshogun.CTaxonomy_get_num_leaves(self)

    def get_node_weight(self, *args):
        """get_node_weight(self, idx) -> float"""
        return _modshogun.CTaxonomy_get_node_weight(self, *args)

    def set_node_weight(self, *args):
        """set_node_weight(self, idx, weight)"""
        return _modshogun.CTaxonomy_set_node_weight(self, *args)

    def get_name2id(self):
        """get_name2id(self) -> std::map< std::string,int32_t >"""
        return _modshogun.CTaxonomy_get_name2id(self)

    def get_id_by_name(self, *args):
        """get_id_by_name(self, name) ->  int"""
        return _modshogun.CTaxonomy_get_id_by_name(self, *args)

    __swig_destroy__ = _modshogun.delete_CTaxonomy
    __del__ = lambda self : None;
CTaxonomy_swigregister = _modshogun.CTaxonomy_swigregister
CTaxonomy_swigregister(CTaxonomy)

class MultitaskKernelTreeNormalizer(MultitaskKernelMklNormalizer):
    """Proxy of C++ shogun::CMultitaskKernelTreeNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [MultitaskKernelMklNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultitaskKernelTreeNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [MultitaskKernelMklNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultitaskKernelTreeNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultitaskKernelTreeNormalizer
        __init__(self, task_lhs, task_rhs, tax) -> MultitaskKernelTreeNormalizer
        """
        this = _modshogun.new_MultitaskKernelTreeNormalizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MultitaskKernelTreeNormalizer
    __del__ = lambda self : None;
    def update_cache(self):
        """update_cache(self)"""
        return _modshogun.MultitaskKernelTreeNormalizer_update_cache(self)

    def set_task_vector_lhs(self, *args):
        """set_task_vector_lhs(self, vec)"""
        return _modshogun.MultitaskKernelTreeNormalizer_set_task_vector_lhs(self, *args)

    def set_task_vector_rhs(self, *args):
        """set_task_vector_rhs(self, vec)"""
        return _modshogun.MultitaskKernelTreeNormalizer_set_task_vector_rhs(self, *args)

    def set_task_vector(self, *args):
        """set_task_vector(self, vec)"""
        return _modshogun.MultitaskKernelTreeNormalizer_set_task_vector(self, *args)

    def get_node_similarity(self, *args):
        """get_node_similarity(self, node_lhs, node_rhs) -> float"""
        return _modshogun.MultitaskKernelTreeNormalizer_get_node_similarity(self, *args)

    def set_node_similarity(self, *args):
        """set_node_similarity(self, node_lhs, node_rhs, similarity)"""
        return _modshogun.MultitaskKernelTreeNormalizer_set_node_similarity(self, *args)

    def KernelNormalizerToMultitaskKernelTreeNormalizer(self, *args):
        """KernelNormalizerToMultitaskKernelTreeNormalizer(self, n) -> MultitaskKernelTreeNormalizer"""
        return _modshogun.MultitaskKernelTreeNormalizer_KernelNormalizerToMultitaskKernelTreeNormalizer(self, *args)

MultitaskKernelTreeNormalizer_swigregister = _modshogun.MultitaskKernelTreeNormalizer_swigregister
MultitaskKernelTreeNormalizer_swigregister(MultitaskKernelTreeNormalizer)

class MultitaskKernelMaskNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CMultitaskKernelMaskNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultitaskKernelMaskNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultitaskKernelMaskNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultitaskKernelMaskNormalizer
        __init__(self, task_lhs, task_rhs, active_tasks_vec) -> MultitaskKernelMaskNormalizer
        """
        this = _modshogun.new_MultitaskKernelMaskNormalizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MultitaskKernelMaskNormalizer
    __del__ = lambda self : None;
    def get_task_vector_lhs(self):
        """get_task_vector_lhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelMaskNormalizer_get_task_vector_lhs(self)

    def set_task_vector_lhs(self, *args):
        """set_task_vector_lhs(self, vec)"""
        return _modshogun.MultitaskKernelMaskNormalizer_set_task_vector_lhs(self, *args)

    def get_task_vector_rhs(self):
        """get_task_vector_rhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelMaskNormalizer_get_task_vector_rhs(self)

    def set_task_vector_rhs(self, *args):
        """set_task_vector_rhs(self, vec)"""
        return _modshogun.MultitaskKernelMaskNormalizer_set_task_vector_rhs(self, *args)

    def set_task_vector(self, *args):
        """set_task_vector(self, vec)"""
        return _modshogun.MultitaskKernelMaskNormalizer_set_task_vector(self, *args)

    def get_similarity(self, *args):
        """get_similarity(self, task_lhs, task_rhs) -> float"""
        return _modshogun.MultitaskKernelMaskNormalizer_get_similarity(self, *args)

    def get_active_tasks(self):
        """get_active_tasks(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelMaskNormalizer_get_active_tasks(self)

    def get_normalization_constant(self):
        """get_normalization_constant(self) -> float"""
        return _modshogun.MultitaskKernelMaskNormalizer_get_normalization_constant(self)

    def set_normalization_constant(self, *args):
        """set_normalization_constant(self, constant) -> float"""
        return _modshogun.MultitaskKernelMaskNormalizer_set_normalization_constant(self, *args)

    def KernelNormalizerToMultitaskKernelMaskNormalizer(self, *args):
        """KernelNormalizerToMultitaskKernelMaskNormalizer(self, n) -> MultitaskKernelMaskNormalizer"""
        return _modshogun.MultitaskKernelMaskNormalizer_KernelNormalizerToMultitaskKernelMaskNormalizer(self, *args)

MultitaskKernelMaskNormalizer_swigregister = _modshogun.MultitaskKernelMaskNormalizer_swigregister
MultitaskKernelMaskNormalizer_swigregister(MultitaskKernelMaskNormalizer)

class MultitaskKernelMaskPairNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CMultitaskKernelMaskPairNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultitaskKernelMaskPairNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultitaskKernelMaskPairNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultitaskKernelMaskPairNormalizer
        __init__(self, task_vector_, active_pairs_) -> MultitaskKernelMaskPairNormalizer
        """
        this = _modshogun.new_MultitaskKernelMaskPairNormalizer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MultitaskKernelMaskPairNormalizer
    __del__ = lambda self : None;
    def get_task_vector_lhs(self):
        """get_task_vector_lhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_get_task_vector_lhs(self)

    def set_task_vector_lhs(self, *args):
        """set_task_vector_lhs(self, vec)"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_set_task_vector_lhs(self, *args)

    def get_task_vector_rhs(self):
        """get_task_vector_rhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_get_task_vector_rhs(self)

    def set_task_vector_rhs(self, *args):
        """set_task_vector_rhs(self, vec)"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_set_task_vector_rhs(self, *args)

    def set_task_vector(self, *args):
        """set_task_vector(self, vec)"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_set_task_vector(self, *args)

    def get_similarity(self, *args):
        """get_similarity(self, task_lhs, task_rhs) -> float"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_get_similarity(self, *args)

    def get_active_pairs(self):
        """get_active_pairs(self) -> std::vector< std::pair<  int,int32_t > >"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_get_active_pairs(self)

    def get_normalization_constant(self):
        """get_normalization_constant(self) -> float"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_get_normalization_constant(self)

    def set_normalization_constant(self, *args):
        """set_normalization_constant(self, constant) -> float"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_set_normalization_constant(self, *args)

    def KernelNormalizerToMultitaskKernelMaskPairNormalizer(self, *args):
        """KernelNormalizerToMultitaskKernelMaskPairNormalizer(self, n) -> MultitaskKernelMaskPairNormalizer"""
        return _modshogun.MultitaskKernelMaskPairNormalizer_KernelNormalizerToMultitaskKernelMaskPairNormalizer(self, *args)

MultitaskKernelMaskPairNormalizer_swigregister = _modshogun.MultitaskKernelMaskPairNormalizer_swigregister
MultitaskKernelMaskPairNormalizer_swigregister(MultitaskKernelMaskPairNormalizer)

class MultitaskKernelPlifNormalizer(MultitaskKernelMklNormalizer):
    """Proxy of C++ shogun::CMultitaskKernelPlifNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [MultitaskKernelMklNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultitaskKernelPlifNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [MultitaskKernelMklNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultitaskKernelPlifNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultitaskKernelPlifNormalizer
        __init__(self, support_, task_vector) -> MultitaskKernelPlifNormalizer
        """
        this = _modshogun.new_MultitaskKernelPlifNormalizer(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_num_unique_tasks(self, *args):
        """get_num_unique_tasks(self, vec) ->  int"""
        return _modshogun.MultitaskKernelPlifNormalizer_get_num_unique_tasks(self, *args)

    __swig_destroy__ = _modshogun.delete_MultitaskKernelPlifNormalizer
    __del__ = lambda self : None;
    def update_cache(self):
        """update_cache(self)"""
        return _modshogun.MultitaskKernelPlifNormalizer_update_cache(self)

    def compute_task_similarity(self, *args):
        """compute_task_similarity(self, task_a, task_b) -> float"""
        return _modshogun.MultitaskKernelPlifNormalizer_compute_task_similarity(self, *args)

    def get_task_vector_lhs(self):
        """get_task_vector_lhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelPlifNormalizer_get_task_vector_lhs(self)

    def set_task_vector_lhs(self, *args):
        """set_task_vector_lhs(self, vec)"""
        return _modshogun.MultitaskKernelPlifNormalizer_set_task_vector_lhs(self, *args)

    def get_task_vector_rhs(self):
        """get_task_vector_rhs(self) -> std::vector<  int >"""
        return _modshogun.MultitaskKernelPlifNormalizer_get_task_vector_rhs(self)

    def set_task_vector_rhs(self, *args):
        """set_task_vector_rhs(self, vec)"""
        return _modshogun.MultitaskKernelPlifNormalizer_set_task_vector_rhs(self, *args)

    def set_task_vector(self, *args):
        """set_task_vector(self, vec)"""
        return _modshogun.MultitaskKernelPlifNormalizer_set_task_vector(self, *args)

    def get_task_distance(self, *args):
        """get_task_distance(self, task_lhs, task_rhs) -> float"""
        return _modshogun.MultitaskKernelPlifNormalizer_get_task_distance(self, *args)

    def set_task_distance(self, *args):
        """set_task_distance(self, task_lhs, task_rhs, distance)"""
        return _modshogun.MultitaskKernelPlifNormalizer_set_task_distance(self, *args)

    def get_task_similarity(self, *args):
        """get_task_similarity(self, task_lhs, task_rhs) -> float"""
        return _modshogun.MultitaskKernelPlifNormalizer_get_task_similarity(self, *args)

    def set_task_similarity(self, *args):
        """set_task_similarity(self, task_lhs, task_rhs, similarity)"""
        return _modshogun.MultitaskKernelPlifNormalizer_set_task_similarity(self, *args)

    def KernelNormalizerToMultitaskKernelPlifNormalizer(self, *args):
        """KernelNormalizerToMultitaskKernelPlifNormalizer(self, n) -> MultitaskKernelPlifNormalizer"""
        return _modshogun.MultitaskKernelPlifNormalizer_KernelNormalizerToMultitaskKernelPlifNormalizer(self, *args)

MultitaskKernelPlifNormalizer_swigregister = _modshogun.MultitaskKernelPlifNormalizer_swigregister
MultitaskKernelPlifNormalizer_swigregister(MultitaskKernelPlifNormalizer)

class OligoStringKernel(StringCharKernel):
    """Proxy of C++ shogun::COligoStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OligoStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OligoStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OligoStringKernel
        __init__(self, cache_size, k, width) -> OligoStringKernel
        """
        this = _modshogun.new_OligoStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_OligoStringKernel
    __del__ = lambda self : None;
    def compute(self, *args):
        """compute(self, x, y) -> float"""
        return _modshogun.OligoStringKernel_compute(self, *args)

OligoStringKernel_swigregister = _modshogun.OligoStringKernel_swigregister
OligoStringKernel_swigregister(OligoStringKernel)

class PolyKernel(DotKernel):
    """Proxy of C++ shogun::CPolyKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PolyKernel
        __init__(self, l, r, d, inhom, size=10) -> PolyKernel
        __init__(self, l, r, d, inhom) -> PolyKernel
        __init__(self, size, degree, inhomogene=True) -> PolyKernel
        __init__(self, size, degree) -> PolyKernel
        """
        this = _modshogun.new_PolyKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PolyKernel
    __del__ = lambda self : None;
PolyKernel_swigregister = _modshogun.PolyKernel_swigregister
PolyKernel_swigregister(PolyKernel)

class PolyMatchStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CPolyMatchStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyMatchStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyMatchStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PolyMatchStringKernel
        __init__(self, size, degree, inhomogene) -> PolyMatchStringKernel
        __init__(self, l, r, degree, inhomogene) -> PolyMatchStringKernel
        """
        this = _modshogun.new_PolyMatchStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PolyMatchStringKernel
    __del__ = lambda self : None;
    def set_rescaling_enabled(self, *args):
        """set_rescaling_enabled(self, n)"""
        return _modshogun.PolyMatchStringKernel_set_rescaling_enabled(self, *args)

    def get_rescaling_enabled(self):
        """get_rescaling_enabled(self) -> bool"""
        return _modshogun.PolyMatchStringKernel_get_rescaling_enabled(self)

PolyMatchStringKernel_swigregister = _modshogun.PolyMatchStringKernel_swigregister
PolyMatchStringKernel_swigregister(PolyMatchStringKernel)

class PowerKernel(Kernel):
    """Proxy of C++ shogun::CPowerKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PowerKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PowerKernel
        __init__(self, cache, degree, dist) -> PowerKernel
        __init__(self, l, r, degree, dist) -> PowerKernel
        """
        this = _modshogun.new_PowerKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PowerKernel
    __del__ = lambda self : None;
PowerKernel_swigregister = _modshogun.PowerKernel_swigregister
PowerKernel_swigregister(PowerKernel)

class LogKernel(Kernel):
    """Proxy of C++ shogun::CLogKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LogKernel
        __init__(self, cache, degree, dist) -> LogKernel
        __init__(self, l, r, degree, dist) -> LogKernel
        """
        this = _modshogun.new_LogKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LogKernel
    __del__ = lambda self : None;
LogKernel_swigregister = _modshogun.LogKernel_swigregister
LogKernel_swigregister(LogKernel)

class GaussianMatchStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CGaussianMatchStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianMatchStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianMatchStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GaussianMatchStringKernel
        __init__(self, size, width) -> GaussianMatchStringKernel
        __init__(self, l, r, width) -> GaussianMatchStringKernel
        """
        this = _modshogun.new_GaussianMatchStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GaussianMatchStringKernel
    __del__ = lambda self : None;
    def register_params(self):
        """register_params(self)"""
        return _modshogun.GaussianMatchStringKernel_register_params(self)

GaussianMatchStringKernel_swigregister = _modshogun.GaussianMatchStringKernel_swigregister
GaussianMatchStringKernel_swigregister(GaussianMatchStringKernel)

class SNPStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CSNPStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SNPStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SNPStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SNPStringKernel
        __init__(self, size, degree, win_len, inhomogene) -> SNPStringKernel
        __init__(self, l, r, degree, win_len, inhomogene) -> SNPStringKernel
        """
        this = _modshogun.new_SNPStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SNPStringKernel
    __del__ = lambda self : None;
    def set_minor_base_string(self, *args):
        """set_minor_base_string(self, str)"""
        return _modshogun.SNPStringKernel_set_minor_base_string(self, *args)

    def set_major_base_string(self, *args):
        """set_major_base_string(self, str)"""
        return _modshogun.SNPStringKernel_set_major_base_string(self, *args)

    def get_minor_base_string(self):
        """get_minor_base_string(self) -> str *"""
        return _modshogun.SNPStringKernel_get_minor_base_string(self)

    def get_major_base_string(self):
        """get_major_base_string(self) -> str *"""
        return _modshogun.SNPStringKernel_get_major_base_string(self)

    def obtain_base_strings(self):
        """obtain_base_strings(self)"""
        return _modshogun.SNPStringKernel_obtain_base_strings(self)

    def register_params(self):
        """register_params(self)"""
        return _modshogun.SNPStringKernel_register_params(self)

SNPStringKernel_swigregister = _modshogun.SNPStringKernel_swigregister
SNPStringKernel_swigregister(SNPStringKernel)

class RegulatoryModulesStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CRegulatoryModulesStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegulatoryModulesStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegulatoryModulesStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RegulatoryModulesStringKernel
        __init__(self, size, width, degree, shift, window) -> RegulatoryModulesStringKernel
        __init__(self, lstr, rstr, lpos, rpos, width, degree, shift, window, size=10) -> RegulatoryModulesStringKernel
        __init__(self, lstr, rstr, lpos, rpos, width, degree, shift, window) -> RegulatoryModulesStringKernel
        """
        this = _modshogun.new_RegulatoryModulesStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_RegulatoryModulesStringKernel
    __del__ = lambda self : None;
    def set_motif_positions(self, *args):
        """set_motif_positions(self, positions_lhs, positions_rhs)"""
        return _modshogun.RegulatoryModulesStringKernel_set_motif_positions(self, *args)

    def register_params(self):
        """register_params(self)"""
        return _modshogun.RegulatoryModulesStringKernel_register_params(self)

RegulatoryModulesStringKernel_swigregister = _modshogun.RegulatoryModulesStringKernel_swigregister
RegulatoryModulesStringKernel_swigregister(RegulatoryModulesStringKernel)

class PolyMatchWordStringKernel(StringWordKernel):
    """Proxy of C++ shogun::CPolyMatchWordStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringWordKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolyMatchWordStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolyMatchWordStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PolyMatchWordStringKernel
        __init__(self, size, degree, inhomogene) -> PolyMatchWordStringKernel
        __init__(self, l, r, degree, inhomogene) -> PolyMatchWordStringKernel
        """
        this = _modshogun.new_PolyMatchWordStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PolyMatchWordStringKernel
    __del__ = lambda self : None;
PolyMatchWordStringKernel_swigregister = _modshogun.PolyMatchWordStringKernel_swigregister
PolyMatchWordStringKernel_swigregister(PolyMatchWordStringKernel)

class SalzbergWordStringKernel(StringWordKernel):
    """Proxy of C++ shogun::CSalzbergWordStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringWordKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalzbergWordStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringWordKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SalzbergWordStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SalzbergWordStringKernel
        __init__(self, size, pie, labels=None) -> SalzbergWordStringKernel
        __init__(self, size, pie) -> SalzbergWordStringKernel
        __init__(self, l, r, pie, labels=None) -> SalzbergWordStringKernel
        __init__(self, l, r, pie) -> SalzbergWordStringKernel
        """
        this = _modshogun.new_SalzbergWordStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SalzbergWordStringKernel
    __del__ = lambda self : None;
    def set_prior_probs(self, *args):
        """set_prior_probs(self, pos_prior_, neg_prior_)"""
        return _modshogun.SalzbergWordStringKernel_set_prior_probs(self, *args)

    def set_prior_probs_from_labels(self, *args):
        """set_prior_probs_from_labels(self, labels)"""
        return _modshogun.SalzbergWordStringKernel_set_prior_probs_from_labels(self, *args)

SalzbergWordStringKernel_swigregister = _modshogun.SalzbergWordStringKernel_swigregister
SalzbergWordStringKernel_swigregister(SalzbergWordStringKernel)

class SigmoidKernel(DotKernel):
    """Proxy of C++ shogun::CSigmoidKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SigmoidKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SigmoidKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SigmoidKernel
        __init__(self, size, gamma, coef0) -> SigmoidKernel
        __init__(self, l, r, size, gamma, coef0) -> SigmoidKernel
        """
        this = _modshogun.new_SigmoidKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SigmoidKernel
    __del__ = lambda self : None;
SigmoidKernel_swigregister = _modshogun.SigmoidKernel_swigregister
SigmoidKernel_swigregister(SigmoidKernel)

class SimpleLocalityImprovedStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CSimpleLocalityImprovedStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleLocalityImprovedStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleLocalityImprovedStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SimpleLocalityImprovedStringKernel
        __init__(self, size, length, inner_degree, outer_degree) -> SimpleLocalityImprovedStringKernel
        __init__(self, l, r, length, inner_degree, outer_degree) -> SimpleLocalityImprovedStringKernel
        """
        this = _modshogun.new_SimpleLocalityImprovedStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SimpleLocalityImprovedStringKernel
    __del__ = lambda self : None;
SimpleLocalityImprovedStringKernel_swigregister = _modshogun.SimpleLocalityImprovedStringKernel_swigregister
SimpleLocalityImprovedStringKernel_swigregister(SimpleLocalityImprovedStringKernel)

class SphericalKernel(Kernel):
    """Proxy of C++ shogun::CSphericalKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphericalKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphericalKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SphericalKernel
        __init__(self, size, sigma, dist) -> SphericalKernel
        __init__(self, l, r, sigma, dist) -> SphericalKernel
        """
        this = _modshogun.new_SphericalKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args):
        """
        init(self, l, r) -> bool
        init(self)
        """
        return _modshogun.SphericalKernel_init(self, *args)

    def set_sigma(self, *args):
        """set_sigma(self, s)"""
        return _modshogun.SphericalKernel_set_sigma(self, *args)

    def get_sigma(self):
        """get_sigma(self) -> float"""
        return _modshogun.SphericalKernel_get_sigma(self)

    __swig_destroy__ = _modshogun.delete_SphericalKernel
    __del__ = lambda self : None;
SphericalKernel_swigregister = _modshogun.SphericalKernel_swigregister
SphericalKernel_swigregister(SphericalKernel)

class SplineKernel(DotKernel):
    """Proxy of C++ shogun::CSplineKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SplineKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SplineKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SplineKernel
        __init__(self, l, r) -> SplineKernel
        """
        this = _modshogun.new_SplineKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SplineKernel
    __del__ = lambda self : None;
SplineKernel_swigregister = _modshogun.SplineKernel_swigregister
SplineKernel_swigregister(SplineKernel)

class SqrtDiagKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CSqrtDiagKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SqrtDiagKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SqrtDiagKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, use_opt_diag=False): 
        """
        __init__(self, use_opt_diag=False) -> SqrtDiagKernelNormalizer
        __init__(self) -> SqrtDiagKernelNormalizer
        """
        this = _modshogun.new_SqrtDiagKernelNormalizer(use_opt_diag)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SqrtDiagKernelNormalizer
    __del__ = lambda self : None;
    def alloc_and_compute_diag(self, *args):
        """alloc_and_compute_diag(self, k, v, num) -> bool"""
        return _modshogun.SqrtDiagKernelNormalizer_alloc_and_compute_diag(self, *args)

SqrtDiagKernelNormalizer_swigregister = _modshogun.SqrtDiagKernelNormalizer_swigregister
SqrtDiagKernelNormalizer_swigregister(SqrtDiagKernelNormalizer)

class TanimotoKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CTanimotoKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TanimotoKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TanimotoKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self, use_opt_diag=False): 
        """
        __init__(self, use_opt_diag=False) -> TanimotoKernelNormalizer
        __init__(self) -> TanimotoKernelNormalizer
        """
        this = _modshogun.new_TanimotoKernelNormalizer(use_opt_diag)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_TanimotoKernelNormalizer
    __del__ = lambda self : None;
    def alloc_and_compute_diag(self, *args):
        """alloc_and_compute_diag(self, k, v, num) -> bool"""
        return _modshogun.TanimotoKernelNormalizer_alloc_and_compute_diag(self, *args)

TanimotoKernelNormalizer_swigregister = _modshogun.TanimotoKernelNormalizer_swigregister
TanimotoKernelNormalizer_swigregister(TanimotoKernelNormalizer)

class TensorProductPairKernel(DotKernel):
    """Proxy of C++ shogun::CTensorProductPairKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TensorProductPairKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TensorProductPairKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TensorProductPairKernel
        __init__(self, size, subkernel) -> TensorProductPairKernel
        __init__(self, l, r, subkernel) -> TensorProductPairKernel
        """
        this = _modshogun.new_TensorProductPairKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_TensorProductPairKernel
    __del__ = lambda self : None;
    def register_params(self):
        """register_params(self)"""
        return _modshogun.TensorProductPairKernel_register_params(self)

TensorProductPairKernel_swigregister = _modshogun.TensorProductPairKernel_swigregister
TensorProductPairKernel_swigregister(TensorProductPairKernel)

class TStudentKernel(Kernel):
    """Proxy of C++ shogun::CTStudentKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TStudentKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TStudentKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStudentKernel
        __init__(self, cache, d, dist) -> TStudentKernel
        __init__(self, l, r, d, dist) -> TStudentKernel
        """
        this = _modshogun.new_TStudentKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_TStudentKernel
    __del__ = lambda self : None;
    def get_degree(self):
        """get_degree(self) -> float"""
        return _modshogun.TStudentKernel_get_degree(self)

    def set_degree(self, *args):
        """set_degree(self, value)"""
        return _modshogun.TStudentKernel_set_degree(self, *args)

TStudentKernel_swigregister = _modshogun.TStudentKernel_swigregister
TStudentKernel_swigregister(TStudentKernel)

class WaveKernel(Kernel):
    """Proxy of C++ shogun::CWaveKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WaveKernel
        __init__(self, cache, theta, dist) -> WaveKernel
        __init__(self, l, r, theta, dist) -> WaveKernel
        """
        this = _modshogun.new_WaveKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WaveKernel
    __del__ = lambda self : None;
WaveKernel_swigregister = _modshogun.WaveKernel_swigregister
WaveKernel_swigregister(WaveKernel)

class WaveletKernel(DotKernel):
    """Proxy of C++ shogun::CWaveletKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveletKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveletKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WaveletKernel
        __init__(self, size, Wdilation, Wtranslation) -> WaveletKernel
        __init__(self, l, r, size, Wdilation, Wtranslation) -> WaveletKernel
        """
        this = _modshogun.new_WaveletKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WaveletKernel
    __del__ = lambda self : None;
WaveletKernel_swigregister = _modshogun.WaveletKernel_swigregister
WaveletKernel_swigregister(WaveletKernel)

class WeightedCommWordStringKernel(CommWordStringKernel):
    """Proxy of C++ shogun::CWeightedCommWordStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [CommWordStringKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedCommWordStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [CommWordStringKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedCommWordStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WeightedCommWordStringKernel
        __init__(self, size, use_sign) -> WeightedCommWordStringKernel
        __init__(self, l, r, use_sign=False, size=10) -> WeightedCommWordStringKernel
        __init__(self, l, r, use_sign=False) -> WeightedCommWordStringKernel
        __init__(self, l, r) -> WeightedCommWordStringKernel
        """
        this = _modshogun.new_WeightedCommWordStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WeightedCommWordStringKernel
    __del__ = lambda self : None;
    def merge_normal(self):
        """merge_normal(self)"""
        return _modshogun.WeightedCommWordStringKernel_merge_normal(self)

    def set_wd_weights(self):
        """set_wd_weights(self) -> bool"""
        return _modshogun.WeightedCommWordStringKernel_set_wd_weights(self)

    def set_weights(self, *args):
        """set_weights(self, w, d) -> bool"""
        return _modshogun.WeightedCommWordStringKernel_set_weights(self, *args)

    def compute_scoring(self, *args):
        """
        compute_scoring(self, max_degree, num_feat, num_sym, target, num_suppvec, IDX, alphas, do_init=True) -> float
        compute_scoring(self, max_degree, num_feat, num_sym, target, num_suppvec, IDX, alphas) -> float *
        """
        return _modshogun.WeightedCommWordStringKernel_compute_scoring(self, *args)

WeightedCommWordStringKernel_swigregister = _modshogun.WeightedCommWordStringKernel_swigregister
WeightedCommWordStringKernel_swigregister(WeightedCommWordStringKernel)

class WeightedDegreePositionStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CWeightedDegreePositionStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedDegreePositionStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedDegreePositionStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WeightedDegreePositionStringKernel
        __init__(self, size, degree, max_mismatch=0, mkl_stepsize=1) -> WeightedDegreePositionStringKernel
        __init__(self, size, degree, max_mismatch=0) -> WeightedDegreePositionStringKernel
        __init__(self, size, degree) -> WeightedDegreePositionStringKernel
        __init__(self, size, weights, degree, max_mismatch, shift, shift_len, mkl_stepsize=1) -> WeightedDegreePositionStringKernel
        __init__(self, size, weights, degree, max_mismatch, shift, shift_len) -> WeightedDegreePositionStringKernel
        __init__(self, l, r, degree) -> WeightedDegreePositionStringKernel
        """
        this = _modshogun.new_WeightedDegreePositionStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WeightedDegreePositionStringKernel
    __del__ = lambda self : None;
    def init_optimization(self, *args):
        """
        init_optimization(self, p_count, IDX, alphas) -> bool
        init_optimization(self, count, IDX, alphas, tree_num, upto_tree=-1) -> bool
        init_optimization(self, count, IDX, alphas, tree_num) -> bool
        """
        return _modshogun.WeightedDegreePositionStringKernel_init_optimization(self, *args)

    def compute_batch_helper(*args):
        """compute_batch_helper(p) -> void *"""
        return _modshogun.WeightedDegreePositionStringKernel_compute_batch_helper(*args)

    if _newclass:compute_batch_helper = staticmethod(compute_batch_helper)
    __swig_getmethods__["compute_batch_helper"] = lambda x: compute_batch_helper
    def compute_batch(self, *args):
        """
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas, factor=1.0)
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas)
        """
        return _modshogun.WeightedDegreePositionStringKernel_compute_batch(self, *args)

    def compute_abs_weights(self, *args):
        """compute_abs_weights(self, len) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_compute_abs_weights(self, *args)

    def is_tree_initialized(self):
        """is_tree_initialized(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_is_tree_initialized(self)

    def get_max_mismatch(self):
        """get_max_mismatch(self) ->  int"""
        return _modshogun.WeightedDegreePositionStringKernel_get_max_mismatch(self)

    def get_degree(self):
        """get_degree(self) ->  int"""
        return _modshogun.WeightedDegreePositionStringKernel_get_degree(self)

    def get_degree_weights(self, *args):
        """get_degree_weights(self, d, len) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_get_degree_weights(self, *args)

    def get_weights(self, *args):
        """get_weights(self, num_weights) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_get_weights(self, *args)

    def get_position_weights(self, *args):
        """get_position_weights(self, len) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_get_position_weights(self, *args)

    def set_shifts(self, *args):
        """set_shifts(self, shifts)"""
        return _modshogun.WeightedDegreePositionStringKernel_set_shifts(self, *args)

    def set_weights(self, *args):
        """set_weights(self, new_weights) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_set_weights(self, *args)

    def set_wd_weights(self):
        """set_wd_weights(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_set_wd_weights(self)

    def set_position_weights(self, *args):
        """set_position_weights(self, pws)"""
        return _modshogun.WeightedDegreePositionStringKernel_set_position_weights(self, *args)

    def set_position_weights_lhs(self, *args):
        """set_position_weights_lhs(self, pws, len, num) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_set_position_weights_lhs(self, *args)

    def set_position_weights_rhs(self, *args):
        """set_position_weights_rhs(self, pws, len, num) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_set_position_weights_rhs(self, *args)

    def init_block_weights(self):
        """init_block_weights(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights(self)

    def init_block_weights_from_wd(self):
        """init_block_weights_from_wd(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_from_wd(self)

    def init_block_weights_from_wd_external(self):
        """init_block_weights_from_wd_external(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_from_wd_external(self)

    def init_block_weights_const(self):
        """init_block_weights_const(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_const(self)

    def init_block_weights_linear(self):
        """init_block_weights_linear(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_linear(self)

    def init_block_weights_sqpoly(self):
        """init_block_weights_sqpoly(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_sqpoly(self)

    def init_block_weights_cubicpoly(self):
        """init_block_weights_cubicpoly(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_cubicpoly(self)

    def init_block_weights_exp(self):
        """init_block_weights_exp(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_exp(self)

    def init_block_weights_log(self):
        """init_block_weights_log(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_init_block_weights_log(self)

    def delete_position_weights(self):
        """delete_position_weights(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_delete_position_weights(self)

    def delete_position_weights_lhs(self):
        """delete_position_weights_lhs(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_delete_position_weights_lhs(self)

    def delete_position_weights_rhs(self):
        """delete_position_weights_rhs(self) -> bool"""
        return _modshogun.WeightedDegreePositionStringKernel_delete_position_weights_rhs(self)

    def compute_by_tree(self, *args):
        """
        compute_by_tree(self, idx) -> float
        compute_by_tree(self, idx, LevelContrib)
        """
        return _modshogun.WeightedDegreePositionStringKernel_compute_by_tree(self, *args)

    def compute_scoring(self, *args):
        """compute_scoring(self, max_degree, num_feat, num_sym, target, num_suppvec, IDX, weights) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_compute_scoring(self, *args)

    def compute_consensus(self, *args):
        """compute_consensus(self, num_feat, num_suppvec, IDX, alphas) -> str *"""
        return _modshogun.WeightedDegreePositionStringKernel_compute_consensus(self, *args)

    def extract_w(self, *args):
        """extract_w(self, max_degree, num_feat, num_sym, w_result, num_suppvec, IDX, alphas) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_extract_w(self, *args)

    def compute_POIM(self, *args):
        """compute_POIM(self, max_degree, num_feat, num_sym, poim_result, num_suppvec, IDX, alphas, distrib) -> float *"""
        return _modshogun.WeightedDegreePositionStringKernel_compute_POIM(self, *args)

    def prepare_POIM2(self, *args):
        """prepare_POIM2(self, distrib, num_sym, num_feat)"""
        return _modshogun.WeightedDegreePositionStringKernel_prepare_POIM2(self, *args)

    def compute_POIM2(self, *args):
        """compute_POIM2(self, max_degree, svm)"""
        return _modshogun.WeightedDegreePositionStringKernel_compute_POIM2(self, *args)

    def get_POIM2(self, *args):
        """get_POIM2(self) -> [] of float"""
        return _modshogun.WeightedDegreePositionStringKernel_get_POIM2(self, *args)

    def cleanup_POIM2(self):
        """cleanup_POIM2(self)"""
        return _modshogun.WeightedDegreePositionStringKernel_cleanup_POIM2(self)

WeightedDegreePositionStringKernel_swigregister = _modshogun.WeightedDegreePositionStringKernel_swigregister
WeightedDegreePositionStringKernel_swigregister(WeightedDegreePositionStringKernel)

def WeightedDegreePositionStringKernel_compute_batch_helper(*args):
  """WeightedDegreePositionStringKernel_compute_batch_helper(p) -> void *"""
  return _modshogun.WeightedDegreePositionStringKernel_compute_batch_helper(*args)

E_WD = _modshogun.E_WD
E_EXTERNAL = _modshogun.E_EXTERNAL
E_BLOCK_CONST = _modshogun.E_BLOCK_CONST
E_BLOCK_LINEAR = _modshogun.E_BLOCK_LINEAR
E_BLOCK_SQPOLY = _modshogun.E_BLOCK_SQPOLY
E_BLOCK_CUBICPOLY = _modshogun.E_BLOCK_CUBICPOLY
E_BLOCK_EXP = _modshogun.E_BLOCK_EXP
E_BLOCK_LOG = _modshogun.E_BLOCK_LOG
class WeightedDegreeStringKernel(StringCharKernel):
    """Proxy of C++ shogun::CWeightedDegreeStringKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedDegreeStringKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedDegreeStringKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WeightedDegreeStringKernel
        __init__(self, degree, type=E_WD) -> WeightedDegreeStringKernel
        __init__(self, degree) -> WeightedDegreeStringKernel
        __init__(self, weights, degree) -> WeightedDegreeStringKernel
        __init__(self, l, r, degree) -> WeightedDegreeStringKernel
        """
        this = _modshogun.new_WeightedDegreeStringKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WeightedDegreeStringKernel
    __del__ = lambda self : None;
    def get_type(self):
        """get_type(self) -> shogun::EWDKernType"""
        return _modshogun.WeightedDegreeStringKernel_get_type(self)

    def init_optimization(self, *args):
        """
        init_optimization(self, count, IDX, alphas) -> bool
        init_optimization(self, count, IDX, alphas, tree_num) -> bool
        """
        return _modshogun.WeightedDegreeStringKernel_init_optimization(self, *args)

    def compute_batch_helper(*args):
        """compute_batch_helper(p) -> void *"""
        return _modshogun.WeightedDegreeStringKernel_compute_batch_helper(*args)

    if _newclass:compute_batch_helper = staticmethod(compute_batch_helper)
    __swig_getmethods__["compute_batch_helper"] = lambda x: compute_batch_helper
    def compute_batch(self, *args):
        """
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas, factor=1.0)
        compute_batch(self, num_vec, vec_idx, target, num_suppvec, IDX, alphas)
        """
        return _modshogun.WeightedDegreeStringKernel_compute_batch(self, *args)

    def compute_abs_weights(self, *args):
        """compute_abs_weights(self, len) -> float *"""
        return _modshogun.WeightedDegreeStringKernel_compute_abs_weights(self, *args)

    def compute_by_tree(self, *args):
        """compute_by_tree(self, idx, LevelContrib)"""
        return _modshogun.WeightedDegreeStringKernel_compute_by_tree(self, *args)

    def is_tree_initialized(self):
        """is_tree_initialized(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_is_tree_initialized(self)

    def get_degree_weights(self, *args):
        """get_degree_weights(self, d, len) -> float *"""
        return _modshogun.WeightedDegreeStringKernel_get_degree_weights(self, *args)

    def get_weights(self, *args):
        """get_weights(self, num_weights) -> float *"""
        return _modshogun.WeightedDegreeStringKernel_get_weights(self, *args)

    def get_position_weights(self, *args):
        """get_position_weights(self, len) -> float *"""
        return _modshogun.WeightedDegreeStringKernel_get_position_weights(self, *args)

    def set_wd_weights_by_type(self, *args):
        """set_wd_weights_by_type(self, type) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_wd_weights_by_type(self, *args)

    def set_wd_weights(self, *args):
        """set_wd_weights(self, new_weights)"""
        return _modshogun.WeightedDegreeStringKernel_set_wd_weights(self, *args)

    def set_weights(self, *args):
        """set_weights(self, new_weights) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_weights(self, *args)

    def set_position_weights(self, *args):
        """set_position_weights(self, pws, len) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_position_weights(self, *args)

    def init_block_weights(self):
        """init_block_weights(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights(self)

    def init_block_weights_from_wd(self):
        """init_block_weights_from_wd(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_from_wd(self)

    def init_block_weights_from_wd_external(self):
        """init_block_weights_from_wd_external(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_from_wd_external(self)

    def init_block_weights_const(self):
        """init_block_weights_const(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_const(self)

    def init_block_weights_linear(self):
        """init_block_weights_linear(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_linear(self)

    def init_block_weights_sqpoly(self):
        """init_block_weights_sqpoly(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_sqpoly(self)

    def init_block_weights_cubicpoly(self):
        """init_block_weights_cubicpoly(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_cubicpoly(self)

    def init_block_weights_exp(self):
        """init_block_weights_exp(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_exp(self)

    def init_block_weights_log(self):
        """init_block_weights_log(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_init_block_weights_log(self)

    def delete_position_weights(self):
        """delete_position_weights(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_delete_position_weights(self)

    def set_max_mismatch(self, *args):
        """set_max_mismatch(self, max) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_max_mismatch(self, *args)

    def get_max_mismatch(self):
        """get_max_mismatch(self) ->  int"""
        return _modshogun.WeightedDegreeStringKernel_get_max_mismatch(self)

    def set_degree(self, *args):
        """set_degree(self, deg) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_degree(self, *args)

    def get_degree(self):
        """get_degree(self) ->  int"""
        return _modshogun.WeightedDegreeStringKernel_get_degree(self)

    def set_use_block_computation(self, *args):
        """set_use_block_computation(self, block) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_use_block_computation(self, *args)

    def get_use_block_computation(self):
        """get_use_block_computation(self) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_get_use_block_computation(self)

    def set_mkl_stepsize(self, *args):
        """set_mkl_stepsize(self, step) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_mkl_stepsize(self, *args)

    def get_mkl_stepsize(self):
        """get_mkl_stepsize(self) ->  int"""
        return _modshogun.WeightedDegreeStringKernel_get_mkl_stepsize(self)

    def set_which_degree(self, *args):
        """set_which_degree(self, which) -> bool"""
        return _modshogun.WeightedDegreeStringKernel_set_which_degree(self, *args)

    def get_which_degree(self):
        """get_which_degree(self) ->  int"""
        return _modshogun.WeightedDegreeStringKernel_get_which_degree(self)

WeightedDegreeStringKernel_swigregister = _modshogun.WeightedDegreeStringKernel_swigregister
WeightedDegreeStringKernel_swigregister(WeightedDegreeStringKernel)

def WeightedDegreeStringKernel_compute_batch_helper(*args):
  """WeightedDegreeStringKernel_compute_batch_helper(p) -> void *"""
  return _modshogun.WeightedDegreeStringKernel_compute_batch_helper(*args)

class WeightedDegreeRBFKernel(DotKernel):
    """Proxy of C++ shogun::CWeightedDegreeRBFKernel class"""
    __swig_setmethods__ = {}
    for _s in [DotKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedDegreeRBFKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [DotKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedDegreeRBFKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WeightedDegreeRBFKernel
        __init__(self, size, width, degree, nof_properties) -> WeightedDegreeRBFKernel
        __init__(self, l, r, width, degree, nof_properties, size=10) -> WeightedDegreeRBFKernel
        __init__(self, l, r, width, degree, nof_properties) -> WeightedDegreeRBFKernel
        """
        this = _modshogun.new_WeightedDegreeRBFKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WeightedDegreeRBFKernel
    __del__ = lambda self : None;
    def set_degree(self, *args):
        """set_degree(self, deg) -> bool"""
        return _modshogun.WeightedDegreeRBFKernel_set_degree(self, *args)

    def get_degree(self):
        """get_degree(self) ->  int"""
        return _modshogun.WeightedDegreeRBFKernel_get_degree(self)

WeightedDegreeRBFKernel_swigregister = _modshogun.WeightedDegreeRBFKernel_swigregister
WeightedDegreeRBFKernel_swigregister(WeightedDegreeRBFKernel)

class SpectrumMismatchRBFKernel(StringCharKernel):
    """Proxy of C++ shogun::CSpectrumMismatchRBFKernel class"""
    __swig_setmethods__ = {}
    for _s in [StringCharKernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpectrumMismatchRBFKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [StringCharKernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpectrumMismatchRBFKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SpectrumMismatchRBFKernel
        __init__(self, size, AA_matrix_, nr_, nc_, degree, max_mismatch, width) -> SpectrumMismatchRBFKernel
        __init__(self, l, r, size, AA_matrix_, nr_, nc_, degree, max_mismatch, width) -> SpectrumMismatchRBFKernel
        """
        this = _modshogun.new_SpectrumMismatchRBFKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SpectrumMismatchRBFKernel
    __del__ = lambda self : None;
    def set_max_mismatch(self, *args):
        """set_max_mismatch(self, max) -> bool"""
        return _modshogun.SpectrumMismatchRBFKernel_set_max_mismatch(self, *args)

    def get_max_mismatch(self):
        """get_max_mismatch(self) ->  int"""
        return _modshogun.SpectrumMismatchRBFKernel_get_max_mismatch(self)

    def set_degree(self, *args):
        """set_degree(self, deg) -> bool"""
        return _modshogun.SpectrumMismatchRBFKernel_set_degree(self, *args)

    def get_degree(self):
        """get_degree(self) ->  int"""
        return _modshogun.SpectrumMismatchRBFKernel_get_degree(self)

    def set_AA_matrix(self, AA_matrix_=None, nr=128, nc=128):
        """
        set_AA_matrix(self, AA_matrix_=None, nr=128, nc=128) -> bool
        set_AA_matrix(self, AA_matrix_=None, nr=128) -> bool
        set_AA_matrix(self, AA_matrix_=None) -> bool
        set_AA_matrix(self) -> bool
        """
        return _modshogun.SpectrumMismatchRBFKernel_set_AA_matrix(self, AA_matrix_, nr, nc)

SpectrumMismatchRBFKernel_swigregister = _modshogun.SpectrumMismatchRBFKernel_swigregister
SpectrumMismatchRBFKernel_swigregister(SpectrumMismatchRBFKernel)

class ZeroMeanCenterKernelNormalizer(KernelNormalizer):
    """Proxy of C++ shogun::CZeroMeanCenterKernelNormalizer class"""
    __swig_setmethods__ = {}
    for _s in [KernelNormalizer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroMeanCenterKernelNormalizer, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelNormalizer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroMeanCenterKernelNormalizer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ZeroMeanCenterKernelNormalizer"""
        this = _modshogun.new_ZeroMeanCenterKernelNormalizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ZeroMeanCenterKernelNormalizer
    __del__ = lambda self : None;
    def alloc_and_compute_row_means(self, *args):
        """alloc_and_compute_row_means(self, k, v, num_lhs, num_rhs) -> bool"""
        return _modshogun.ZeroMeanCenterKernelNormalizer_alloc_and_compute_row_means(self, *args)

ZeroMeanCenterKernelNormalizer_swigregister = _modshogun.ZeroMeanCenterKernelNormalizer_swigregister
ZeroMeanCenterKernelNormalizer_swigregister(ZeroMeanCenterKernelNormalizer)

class MultiquadricKernel(Kernel):
    """Proxy of C++ shogun::CMultiquadricKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiquadricKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiquadricKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultiquadricKernel
        __init__(self, cache, coef, dist) -> MultiquadricKernel
        __init__(self, l, r, coef, dist) -> MultiquadricKernel
        """
        this = _modshogun.new_MultiquadricKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_coef(self):
        """get_coef(self) -> float"""
        return _modshogun.MultiquadricKernel_get_coef(self)

    def set_coef(self, *args):
        """set_coef(self, value)"""
        return _modshogun.MultiquadricKernel_set_coef(self, *args)

    __swig_destroy__ = _modshogun.delete_MultiquadricKernel
    __del__ = lambda self : None;
MultiquadricKernel_swigregister = _modshogun.MultiquadricKernel_swigregister
MultiquadricKernel_swigregister(MultiquadricKernel)

class RationalQuadraticKernel(Kernel):
    """Proxy of C++ shogun::CRationalQuadraticKernel class"""
    __swig_setmethods__ = {}
    for _s in [Kernel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RationalQuadraticKernel, name, value)
    __swig_getmethods__ = {}
    for _s in [Kernel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RationalQuadraticKernel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RationalQuadraticKernel
        __init__(self, cache, coef, dist) -> RationalQuadraticKernel
        __init__(self, l, r, c, dist) -> RationalQuadraticKernel
        """
        this = _modshogun.new_RationalQuadraticKernel(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_coef(self):
        """get_coef(self) -> float const"""
        return _modshogun.RationalQuadraticKernel_get_coef(self)

    def set_coef(self, *args):
        """set_coef(self, coef)"""
        return _modshogun.RationalQuadraticKernel_set_coef(self, *args)

    __swig_destroy__ = _modshogun.delete_RationalQuadraticKernel
    __del__ = lambda self : None;
RationalQuadraticKernel_swigregister = _modshogun.RationalQuadraticKernel_swigregister
RationalQuadraticKernel_swigregister(RationalQuadraticKernel)

class Distribution(SGObject):
    """Proxy of C++ shogun::CDistribution class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distribution, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distribution, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_Distribution
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.Distribution_train(self, data)

    def get_num_model_parameters(self):
        """get_num_model_parameters(self) ->  int"""
        return _modshogun.Distribution_get_num_model_parameters(self)

    def get_num_relevant_model_parameters(self):
        """get_num_relevant_model_parameters(self) ->  int"""
        return _modshogun.Distribution_get_num_relevant_model_parameters(self)

    def get_log_model_parameter(self, *args):
        """get_log_model_parameter(self, num_param) -> float"""
        return _modshogun.Distribution_get_log_model_parameter(self, *args)

    def get_log_derivative(self, *args):
        """get_log_derivative(self, num_param, num_example) -> float"""
        return _modshogun.Distribution_get_log_derivative(self, *args)

    def get_log_likelihood_example(self, *args):
        """get_log_likelihood_example(self, num_example) -> float"""
        return _modshogun.Distribution_get_log_likelihood_example(self, *args)

    def get_log_likelihood_sample(self):
        """get_log_likelihood_sample(self) -> float"""
        return _modshogun.Distribution_get_log_likelihood_sample(self)

    def get_log_likelihood(self):
        """get_log_likelihood(self) -> numpy 1dim array of float"""
        return _modshogun.Distribution_get_log_likelihood(self)

    def get_model_parameter(self, *args):
        """get_model_parameter(self, num_param) -> float"""
        return _modshogun.Distribution_get_model_parameter(self, *args)

    def get_derivative(self, *args):
        """get_derivative(self, num_param, num_example) -> float"""
        return _modshogun.Distribution_get_derivative(self, *args)

    def get_likelihood_example(self, *args):
        """get_likelihood_example(self, num_example) -> float"""
        return _modshogun.Distribution_get_likelihood_example(self, *args)

    def set_features(self, *args):
        """set_features(self, f)"""
        return _modshogun.Distribution_set_features(self, *args)

    def get_features(self):
        """get_features(self) -> Features"""
        return _modshogun.Distribution_get_features(self)

    def set_pseudo_count(self, *args):
        """set_pseudo_count(self, pseudo)"""
        return _modshogun.Distribution_set_pseudo_count(self, *args)

    def get_pseudo_count(self):
        """get_pseudo_count(self) -> float"""
        return _modshogun.Distribution_get_pseudo_count(self)

Distribution_swigregister = _modshogun.Distribution_swigregister
Distribution_swigregister(Distribution)

class Histogram(Distribution):
    """Proxy of C++ shogun::CHistogram class"""
    __swig_setmethods__ = {}
    for _s in [Distribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Histogram
        __init__(self, f) -> Histogram
        """
        this = _modshogun.new_Histogram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Histogram
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.Histogram_train(self, data)

    def set_histogram(self, *args):
        """set_histogram(self, histogram) -> bool"""
        return _modshogun.Histogram_set_histogram(self, *args)

    def get_histogram(self):
        """get_histogram(self) -> numpy 1dim array of float"""
        return _modshogun.Histogram_get_histogram(self)

Histogram_swigregister = _modshogun.Histogram_swigregister
Histogram_swigregister(Histogram)

BW_NORMAL = _modshogun.BW_NORMAL
BW_TRANS = _modshogun.BW_TRANS
BW_DEFINED = _modshogun.BW_DEFINED
VIT_NORMAL = _modshogun.VIT_NORMAL
VIT_DEFINED = _modshogun.VIT_DEFINED
class HMM(Distribution):
    """Proxy of C++ shogun::CHMM class"""
    __swig_setmethods__ = {}
    for _s in [Distribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HMM, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HMM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HMM
        __init__(self, N, M, model, PSEUDO) -> HMM
        __init__(self, obs, N, M, PSEUDO) -> HMM
        __init__(self, N, p, q, a) -> HMM
        __init__(self, N, p, q, num_trans, a_trans) -> HMM
        __init__(self, model_file, PSEUDO) -> HMM
        __init__(self, h) -> HMM
        """
        this = _modshogun.new_HMM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_HMM
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.HMM_train(self, data)

    def initialize(self, *args):
        """
        initialize(self, model, PSEUDO, model_file=None) -> bool
        initialize(self, model, PSEUDO) -> bool
        """
        return _modshogun.HMM_initialize(self, *args)

    def alloc_state_dependend_arrays(self):
        """alloc_state_dependend_arrays(self) -> bool"""
        return _modshogun.HMM_alloc_state_dependend_arrays(self)

    def free_state_dependend_arrays(self):
        """free_state_dependend_arrays(self)"""
        return _modshogun.HMM_free_state_dependend_arrays(self)

    def forward_comp(self, *args):
        """forward_comp(self, time, state, dimension) -> float"""
        return _modshogun.HMM_forward_comp(self, *args)

    def forward_comp_old(self, *args):
        """forward_comp_old(self, time, state, dimension) -> float"""
        return _modshogun.HMM_forward_comp_old(self, *args)

    def backward_comp(self, *args):
        """backward_comp(self, time, state, dimension) -> float"""
        return _modshogun.HMM_backward_comp(self, *args)

    def backward_comp_old(self, *args):
        """backward_comp_old(self, time, state, dimension) -> float"""
        return _modshogun.HMM_backward_comp_old(self, *args)

    def best_path(self, *args):
        """best_path(self, dimension) -> float"""
        return _modshogun.HMM_best_path(self, *args)

    def get_best_path_state(self, *args):
        """get_best_path_state(self, dim, t) -> int"""
        return _modshogun.HMM_get_best_path_state(self, *args)

    def model_probability_comp(self):
        """model_probability_comp(self) -> float"""
        return _modshogun.HMM_model_probability_comp(self)

    def model_probability(self, *args):
        """
        model_probability(self, dimension=-1) -> float
        model_probability(self) -> float
        """
        return _modshogun.HMM_model_probability(self, *args)

    def linear_model_probability(self, *args):
        """linear_model_probability(self, dimension) -> float"""
        return _modshogun.HMM_linear_model_probability(self, *args)

    def set_iterations(self, *args):
        """set_iterations(self, num) -> bool"""
        return _modshogun.HMM_set_iterations(self, *args)

    def get_iterations(self):
        """get_iterations(self) ->  int"""
        return _modshogun.HMM_get_iterations(self)

    def set_epsilon(self, *args):
        """set_epsilon(self, eps) -> bool"""
        return _modshogun.HMM_set_epsilon(self, *args)

    def get_epsilon(self):
        """get_epsilon(self) -> float"""
        return _modshogun.HMM_get_epsilon(self)

    def baum_welch_viterbi_train(self, *args):
        """baum_welch_viterbi_train(self, type) -> bool"""
        return _modshogun.HMM_baum_welch_viterbi_train(self, *args)

    def estimate_model_baum_welch(self, *args):
        """estimate_model_baum_welch(self, train)"""
        return _modshogun.HMM_estimate_model_baum_welch(self, *args)

    def estimate_model_baum_welch_trans(self, *args):
        """estimate_model_baum_welch_trans(self, train)"""
        return _modshogun.HMM_estimate_model_baum_welch_trans(self, *args)

    def estimate_model_baum_welch_old(self, *args):
        """estimate_model_baum_welch_old(self, train)"""
        return _modshogun.HMM_estimate_model_baum_welch_old(self, *args)

    def estimate_model_baum_welch_defined(self, *args):
        """estimate_model_baum_welch_defined(self, train)"""
        return _modshogun.HMM_estimate_model_baum_welch_defined(self, *args)

    def estimate_model_viterbi(self, *args):
        """estimate_model_viterbi(self, train)"""
        return _modshogun.HMM_estimate_model_viterbi(self, *args)

    def estimate_model_viterbi_defined(self, *args):
        """estimate_model_viterbi_defined(self, train)"""
        return _modshogun.HMM_estimate_model_viterbi_defined(self, *args)

    def linear_train(self, right_align=False):
        """
        linear_train(self, right_align=False) -> bool
        linear_train(self) -> bool
        """
        return _modshogun.HMM_linear_train(self, right_align)

    def permutation_entropy(self, *args):
        """permutation_entropy(self, window_width, sequence_number) -> bool"""
        return _modshogun.HMM_permutation_entropy(self, *args)

    def output_model(self, verbose=False):
        """
        output_model(self, verbose=False)
        output_model(self)
        """
        return _modshogun.HMM_output_model(self, verbose)

    def output_model_defined(self, verbose=False):
        """
        output_model_defined(self, verbose=False)
        output_model_defined(self)
        """
        return _modshogun.HMM_output_model_defined(self, verbose)

    def normalize(self, keep_dead_states=False):
        """
        normalize(self, keep_dead_states=False)
        normalize(self)
        """
        return _modshogun.HMM_normalize(self, keep_dead_states)

    def add_states(self, *args):
        """
        add_states(self, num_states, default_val=0)
        add_states(self, num_states)
        """
        return _modshogun.HMM_add_states(self, *args)

    def append_model(self, *args):
        """
        append_model(self, append_model, cur_out, app_out) -> bool
        append_model(self, append_model) -> bool
        """
        return _modshogun.HMM_append_model(self, *args)

    def chop(self, *args):
        """chop(self, value)"""
        return _modshogun.HMM_chop(self, *args)

    def convert_to_log(self):
        """convert_to_log(self)"""
        return _modshogun.HMM_convert_to_log(self)

    def init_model_random(self):
        """init_model_random(self)"""
        return _modshogun.HMM_init_model_random(self)

    def init_model_defined(self):
        """init_model_defined(self)"""
        return _modshogun.HMM_init_model_defined(self)

    def clear_model(self):
        """clear_model(self)"""
        return _modshogun.HMM_clear_model(self)

    def clear_model_defined(self):
        """clear_model_defined(self)"""
        return _modshogun.HMM_clear_model_defined(self)

    def copy_model(self, *args):
        """copy_model(self, l)"""
        return _modshogun.HMM_copy_model(self, *args)

    def invalidate_model(self):
        """invalidate_model(self)"""
        return _modshogun.HMM_invalidate_model(self)

    def get_status(self):
        """get_status(self) -> bool"""
        return _modshogun.HMM_get_status(self)

    def get_pseudo(self):
        """get_pseudo(self) -> float"""
        return _modshogun.HMM_get_pseudo(self)

    def set_pseudo(self, *args):
        """set_pseudo(self, pseudo)"""
        return _modshogun.HMM_set_pseudo(self, *args)

    def set_observations(self, *args):
        """
        set_observations(self, obs, hmm=None)
        set_observations(self, obs)
        """
        return _modshogun.HMM_set_observations(self, *args)

    def set_observation_nocache(self, *args):
        """set_observation_nocache(self, obs)"""
        return _modshogun.HMM_set_observation_nocache(self, *args)

    def get_observations(self):
        """get_observations(self) -> StringWordFeatures"""
        return _modshogun.HMM_get_observations(self)

    def load_definitions(self, *args):
        """
        load_definitions(self, file, verbose, initialize=True) -> bool
        load_definitions(self, file, verbose) -> bool
        """
        return _modshogun.HMM_load_definitions(self, *args)

    def load_model(self, *args):
        """load_model(self, file) -> bool"""
        return _modshogun.HMM_load_model(self, *args)

    def save_model(self, *args):
        """save_model(self, file) -> bool"""
        return _modshogun.HMM_save_model(self, *args)

    def save_model_derivatives(self, *args):
        """save_model_derivatives(self, file) -> bool"""
        return _modshogun.HMM_save_model_derivatives(self, *args)

    def save_model_derivatives_bin(self, *args):
        """save_model_derivatives_bin(self, file) -> bool"""
        return _modshogun.HMM_save_model_derivatives_bin(self, *args)

    def save_model_bin(self, *args):
        """save_model_bin(self, file) -> bool"""
        return _modshogun.HMM_save_model_bin(self, *args)

    def check_model_derivatives(self):
        """check_model_derivatives(self) -> bool"""
        return _modshogun.HMM_check_model_derivatives(self)

    def check_model_derivatives_combined(self):
        """check_model_derivatives_combined(self) -> bool"""
        return _modshogun.HMM_check_model_derivatives_combined(self)

    def get_path(self, *args):
        """get_path(self, dim, prob) -> shogun::T_STATES *"""
        return _modshogun.HMM_get_path(self, *args)

    def save_path(self, *args):
        """save_path(self, file) -> bool"""
        return _modshogun.HMM_save_path(self, *args)

    def save_path_derivatives(self, *args):
        """save_path_derivatives(self, file) -> bool"""
        return _modshogun.HMM_save_path_derivatives(self, *args)

    def save_path_derivatives_bin(self, *args):
        """save_path_derivatives_bin(self, file) -> bool"""
        return _modshogun.HMM_save_path_derivatives_bin(self, *args)

    def save_likelihood_bin(self, *args):
        """save_likelihood_bin(self, file) -> bool"""
        return _modshogun.HMM_save_likelihood_bin(self, *args)

    def save_likelihood(self, *args):
        """save_likelihood(self, file) -> bool"""
        return _modshogun.HMM_save_likelihood(self, *args)

    def get_N(self):
        """get_N(self) -> shogun::T_STATES"""
        return _modshogun.HMM_get_N(self)

    def get_M(self):
        """get_M(self) ->  int"""
        return _modshogun.HMM_get_M(self)

    def set_q(self, *args):
        """set_q(self, offset, value)"""
        return _modshogun.HMM_set_q(self, *args)

    def set_p(self, *args):
        """set_p(self, offset, value)"""
        return _modshogun.HMM_set_p(self, *args)

    def set_A(self, *args):
        """set_A(self, line_, column, value)"""
        return _modshogun.HMM_set_A(self, *args)

    def set_a(self, *args):
        """set_a(self, line_, column, value)"""
        return _modshogun.HMM_set_a(self, *args)

    def set_B(self, *args):
        """set_B(self, line_, column, value)"""
        return _modshogun.HMM_set_B(self, *args)

    def set_b(self, *args):
        """set_b(self, line_, column, value)"""
        return _modshogun.HMM_set_b(self, *args)

    def set_psi(self, *args):
        """set_psi(self, time, state, value, dimension)"""
        return _modshogun.HMM_set_psi(self, *args)

    def get_q(self, *args):
        """get_q(self, offset) -> float"""
        return _modshogun.HMM_get_q(self, *args)

    def get_p(self, *args):
        """get_p(self, offset) -> float"""
        return _modshogun.HMM_get_p(self, *args)

    def get_A(self, *args):
        """get_A(self, line_, column) -> float"""
        return _modshogun.HMM_get_A(self, *args)

    def get_a(self, *args):
        """get_a(self, line_, column) -> float"""
        return _modshogun.HMM_get_a(self, *args)

    def get_B(self, *args):
        """get_B(self, line_, column) -> float"""
        return _modshogun.HMM_get_B(self, *args)

    def get_b(self, *args):
        """get_b(self, line_, column) -> float"""
        return _modshogun.HMM_get_b(self, *args)

    def get_psi(self, *args):
        """get_psi(self, time, state, dimension) -> shogun::T_STATES"""
        return _modshogun.HMM_get_psi(self, *args)

    def state_probability(self, *args):
        """state_probability(self, time, state, dimension) -> float"""
        return _modshogun.HMM_state_probability(self, *args)

    def transition_probability(self, *args):
        """transition_probability(self, time, state_i, state_j, dimension) -> float"""
        return _modshogun.HMM_transition_probability(self, *args)

    def linear_model_derivative(self, *args):
        """linear_model_derivative(self, i, j, dimension) -> float"""
        return _modshogun.HMM_linear_model_derivative(self, *args)

    def model_derivative_p(self, *args):
        """model_derivative_p(self, i, dimension) -> float"""
        return _modshogun.HMM_model_derivative_p(self, *args)

    def model_derivative_q(self, *args):
        """model_derivative_q(self, i, dimension) -> float"""
        return _modshogun.HMM_model_derivative_q(self, *args)

    def model_derivative_a(self, *args):
        """model_derivative_a(self, i, j, dimension) -> float"""
        return _modshogun.HMM_model_derivative_a(self, *args)

    def model_derivative_b(self, *args):
        """model_derivative_b(self, i, j, dimension) -> float"""
        return _modshogun.HMM_model_derivative_b(self, *args)

    def path_derivative_p(self, *args):
        """path_derivative_p(self, i, dimension) -> float"""
        return _modshogun.HMM_path_derivative_p(self, *args)

    def path_derivative_q(self, *args):
        """path_derivative_q(self, i, dimension) -> float"""
        return _modshogun.HMM_path_derivative_q(self, *args)

    def path_derivative_a(self, *args):
        """path_derivative_a(self, i, j, dimension) -> float"""
        return _modshogun.HMM_path_derivative_a(self, *args)

    def path_derivative_b(self, *args):
        """path_derivative_b(self, i, j, dimension) -> float"""
        return _modshogun.HMM_path_derivative_b(self, *args)

HMM_swigregister = _modshogun.HMM_swigregister
HMM_swigregister(HMM)

class GHMM(Distribution):
    """Proxy of C++ shogun::CGHMM class"""
    __swig_setmethods__ = {}
    for _s in [Distribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GHMM, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GHMM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GHMM"""
        this = _modshogun.new_GHMM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GHMM
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.GHMM_train(self, data)

GHMM_swigregister = _modshogun.GHMM_swigregister
GHMM_swigregister(GHMM)

class LinearHMM(Distribution):
    """Proxy of C++ shogun::CLinearHMM class"""
    __swig_setmethods__ = {}
    for _s in [Distribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearHMM, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearHMM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LinearHMM
        __init__(self, f) -> LinearHMM
        __init__(self, p_num_features, p_num_symbols) -> LinearHMM
        """
        this = _modshogun.new_LinearHMM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LinearHMM
    __del__ = lambda self : None;
    def train(self, *args):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        train(self, indizes, num_indizes, pseudo_count) -> bool
        """
        return _modshogun.LinearHMM_train(self, *args)

    def get_likelihood_example(self, *args):
        """get_likelihood_example(self, vector, len) -> float"""
        return _modshogun.LinearHMM_get_likelihood_example(self, *args)

    def get_log_likelihood_example(self, *args):
        """
        get_log_likelihood_example(self, vector, len) -> float
        get_log_likelihood_example(self, num_example) -> float
        """
        return _modshogun.LinearHMM_get_log_likelihood_example(self, *args)

    def get_log_derivative_obsolete(self, *args):
        """get_log_derivative_obsolete(self, obs, pos) -> float"""
        return _modshogun.LinearHMM_get_log_derivative_obsolete(self, *args)

    def get_derivative_obsolete(self, *args):
        """get_derivative_obsolete(self, vector, len, pos) -> float"""
        return _modshogun.LinearHMM_get_derivative_obsolete(self, *args)

    def get_sequence_length(self):
        """get_sequence_length(self) ->  int"""
        return _modshogun.LinearHMM_get_sequence_length(self)

    def get_num_symbols(self):
        """get_num_symbols(self) ->  int"""
        return _modshogun.LinearHMM_get_num_symbols(self)

    def get_positional_log_parameter(self, *args):
        """get_positional_log_parameter(self, obs, position) -> float"""
        return _modshogun.LinearHMM_get_positional_log_parameter(self, *args)

    def get_log_transition_probs(self):
        """get_log_transition_probs(self) -> numpy 1dim array of %float"""
        return _modshogun.LinearHMM_get_log_transition_probs(self)

    def set_log_transition_probs(self, *args):
        """set_log_transition_probs(self, probs) -> bool"""
        return _modshogun.LinearHMM_set_log_transition_probs(self, *args)

    def get_transition_probs(self):
        """get_transition_probs(self) -> numpy 1dim array of %float"""
        return _modshogun.LinearHMM_get_transition_probs(self)

    def set_transition_probs(self, *args):
        """set_transition_probs(self, probs) -> bool"""
        return _modshogun.LinearHMM_set_transition_probs(self, *args)

LinearHMM_swigregister = _modshogun.LinearHMM_swigregister
LinearHMM_swigregister(LinearHMM)

class PositionalPWM(Distribution):
    """Proxy of C++ shogun::CPositionalPWM class"""
    __swig_setmethods__ = {}
    for _s in [Distribution]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionalPWM, name, value)
    __swig_getmethods__ = {}
    for _s in [Distribution]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionalPWM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PositionalPWM"""
        this = _modshogun.new_PositionalPWM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PositionalPWM
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.PositionalPWM_train(self, data)

    def get_log_likelihood_window(self, *args):
        """get_log_likelihood_window(self, window, len, pos) -> float"""
        return _modshogun.PositionalPWM_get_log_likelihood_window(self, *args)

    def get_sigma(self):
        """get_sigma(self) -> float"""
        return _modshogun.PositionalPWM_get_sigma(self)

    def set_sigma(self, *args):
        """set_sigma(self, sigma)"""
        return _modshogun.PositionalPWM_set_sigma(self, *args)

    def get_mean(self):
        """get_mean(self) -> float"""
        return _modshogun.PositionalPWM_get_mean(self)

    def set_mean(self, *args):
        """set_mean(self, mean)"""
        return _modshogun.PositionalPWM_set_mean(self, *args)

    def set_pwm(self, *args):
        """set_pwm(self, pwm)"""
        return _modshogun.PositionalPWM_set_pwm(self, *args)

    def get_pwm(self):
        """get_pwm(self) -> RealMatrix"""
        return _modshogun.PositionalPWM_get_pwm(self)

    def get_w(self):
        """get_w(self) -> RealMatrix"""
        return _modshogun.PositionalPWM_get_w(self)

    def get_scoring(self, *args):
        """get_scoring(self, d) -> RealMatrix"""
        return _modshogun.PositionalPWM_get_scoring(self, *args)

    def compute_w(self, *args):
        """compute_w(self, num_pos)"""
        return _modshogun.PositionalPWM_compute_w(self, *args)

    def compute_scoring(self, *args):
        """compute_scoring(self, max_degree)"""
        return _modshogun.PositionalPWM_compute_scoring(self, *args)

PositionalPWM_swigregister = _modshogun.PositionalPWM_swigregister
PositionalPWM_swigregister(PositionalPWM)

CT_NONE = _modshogun.CT_NONE
CT_LIGHT = _modshogun.CT_LIGHT
CT_LIGHTONECLASS = _modshogun.CT_LIGHTONECLASS
CT_LIBSVM = _modshogun.CT_LIBSVM
CT_LIBSVMONECLASS = _modshogun.CT_LIBSVMONECLASS
CT_LIBSVMMULTICLASS = _modshogun.CT_LIBSVMMULTICLASS
CT_MPD = _modshogun.CT_MPD
CT_GPBT = _modshogun.CT_GPBT
CT_CPLEXSVM = _modshogun.CT_CPLEXSVM
CT_PERCEPTRON = _modshogun.CT_PERCEPTRON
CT_KERNELPERCEPTRON = _modshogun.CT_KERNELPERCEPTRON
CT_LDA = _modshogun.CT_LDA
CT_LPM = _modshogun.CT_LPM
CT_LPBOOST = _modshogun.CT_LPBOOST
CT_KNN = _modshogun.CT_KNN
CT_SVMLIN = _modshogun.CT_SVMLIN
CT_KRR = _modshogun.CT_KRR
CT_GNPPSVM = _modshogun.CT_GNPPSVM
CT_GMNPSVM = _modshogun.CT_GMNPSVM
CT_SUBGRADIENTSVM = _modshogun.CT_SUBGRADIENTSVM
CT_SUBGRADIENTLPM = _modshogun.CT_SUBGRADIENTLPM
CT_SVMPERF = _modshogun.CT_SVMPERF
CT_LIBSVR = _modshogun.CT_LIBSVR
CT_SVRLIGHT = _modshogun.CT_SVRLIGHT
CT_LIBLINEAR = _modshogun.CT_LIBLINEAR
CT_KMEANS = _modshogun.CT_KMEANS
CT_HIERARCHICAL = _modshogun.CT_HIERARCHICAL
CT_SVMOCAS = _modshogun.CT_SVMOCAS
CT_WDSVMOCAS = _modshogun.CT_WDSVMOCAS
CT_SVMSGD = _modshogun.CT_SVMSGD
CT_MKLMULTICLASS = _modshogun.CT_MKLMULTICLASS
CT_MKLCLASSIFICATION = _modshogun.CT_MKLCLASSIFICATION
CT_MKLONECLASS = _modshogun.CT_MKLONECLASS
CT_MKLREGRESSION = _modshogun.CT_MKLREGRESSION
CT_SCATTERSVM = _modshogun.CT_SCATTERSVM
CT_DASVM = _modshogun.CT_DASVM
CT_LARANK = _modshogun.CT_LARANK
CT_DASVMLINEAR = _modshogun.CT_DASVMLINEAR
CT_GAUSSIANNAIVEBAYES = _modshogun.CT_GAUSSIANNAIVEBAYES
CT_AVERAGEDPERCEPTRON = _modshogun.CT_AVERAGEDPERCEPTRON
CT_SGDQN = _modshogun.CT_SGDQN
ST_AUTO = _modshogun.ST_AUTO
ST_CPLEX = _modshogun.ST_CPLEX
ST_GLPK = _modshogun.ST_GLPK
ST_NEWTON = _modshogun.ST_NEWTON
ST_DIRECT = _modshogun.ST_DIRECT
ST_ELASTICNET = _modshogun.ST_ELASTICNET
ST_BLOCK_NORM = _modshogun.ST_BLOCK_NORM
class Machine(SGObject):
    """Proxy of C++ shogun::CMachine class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Machine, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Machine, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_Machine
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.Machine_train(self, data)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, num) -> float
        """
        return _modshogun.Machine_apply(self, *args)

    def load(self, *args):
        """load(self, srcfile) -> bool"""
        return _modshogun.Machine_load(self, *args)

    def save(self, *args):
        """save(self, dstfile) -> bool"""
        return _modshogun.Machine_save(self, *args)

    def set_labels(self, *args):
        """set_labels(self, lab)"""
        return _modshogun.Machine_set_labels(self, *args)

    def get_labels(self):
        """get_labels(self) -> numpy 1dim array of float"""
        return _modshogun.Machine_get_labels(self)

    def get_label(self, *args):
        """get_label(self, i) -> float"""
        return _modshogun.Machine_get_label(self, *args)

    def set_max_train_time(self, *args):
        """set_max_train_time(self, t)"""
        return _modshogun.Machine_set_max_train_time(self, *args)

    def get_max_train_time(self):
        """get_max_train_time(self) -> float"""
        return _modshogun.Machine_get_max_train_time(self)

    def get_classifier_type(self):
        """get_classifier_type(self) -> shogun::EClassifierType"""
        return _modshogun.Machine_get_classifier_type(self)

    def set_solver_type(self, *args):
        """set_solver_type(self, st)"""
        return _modshogun.Machine_set_solver_type(self, *args)

    def get_solver_type(self):
        """get_solver_type(self) -> shogun::ESolverType"""
        return _modshogun.Machine_get_solver_type(self)

    def set_store_model_features(self, *args):
        """set_store_model_features(self, store_model)"""
        return _modshogun.Machine_set_store_model_features(self, *args)

Machine_swigregister = _modshogun.Machine_swigregister
Machine_swigregister(Machine)

class KernelMachine(Machine):
    """Proxy of C++ shogun::CKernelMachine class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelMachine, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelMachine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> KernelMachine"""
        this = _modshogun.new_KernelMachine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_KernelMachine
    __del__ = lambda self : None;
    def set_kernel(self, *args):
        """set_kernel(self, k)"""
        return _modshogun.KernelMachine_set_kernel(self, *args)

    def get_kernel(self):
        """get_kernel(self) -> Kernel"""
        return _modshogun.KernelMachine_get_kernel(self)

    def set_batch_computation_enabled(self, *args):
        """set_batch_computation_enabled(self, enable)"""
        return _modshogun.KernelMachine_set_batch_computation_enabled(self, *args)

    def get_batch_computation_enabled(self):
        """get_batch_computation_enabled(self) -> bool"""
        return _modshogun.KernelMachine_get_batch_computation_enabled(self)

    def set_linadd_enabled(self, *args):
        """set_linadd_enabled(self, enable)"""
        return _modshogun.KernelMachine_set_linadd_enabled(self, *args)

    def get_linadd_enabled(self):
        """get_linadd_enabled(self) -> bool"""
        return _modshogun.KernelMachine_get_linadd_enabled(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.KernelMachine_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.KernelMachine_get_bias_enabled(self)

    def get_bias(self):
        """get_bias(self) -> float"""
        return _modshogun.KernelMachine_get_bias(self)

    def set_bias(self, *args):
        """set_bias(self, bias)"""
        return _modshogun.KernelMachine_set_bias(self, *args)

    def get_support_vector(self, *args):
        """get_support_vector(self, idx) ->  int"""
        return _modshogun.KernelMachine_get_support_vector(self, *args)

    def get_alpha(self, *args):
        """get_alpha(self, idx) -> float"""
        return _modshogun.KernelMachine_get_alpha(self, *args)

    def set_support_vector(self, *args):
        """set_support_vector(self, idx, val) -> bool"""
        return _modshogun.KernelMachine_set_support_vector(self, *args)

    def set_alpha(self, *args):
        """set_alpha(self, idx, val) -> bool"""
        return _modshogun.KernelMachine_set_alpha(self, *args)

    def get_num_support_vectors(self):
        """get_num_support_vectors(self) ->  int"""
        return _modshogun.KernelMachine_get_num_support_vectors(self)

    def set_alphas(self, *args):
        """set_alphas(self, alphas)"""
        return _modshogun.KernelMachine_set_alphas(self, *args)

    def set_support_vectors(self, *args):
        """set_support_vectors(self, svs)"""
        return _modshogun.KernelMachine_set_support_vectors(self, *args)

    def get_support_vectors(self):
        """get_support_vectors(self) -> [] of int"""
        return _modshogun.KernelMachine_get_support_vectors(self)

    def get_alphas(self):
        """get_alphas(self) -> [] of float"""
        return _modshogun.KernelMachine_get_alphas(self)

    def create_new_model(self, *args):
        """create_new_model(self, num) -> bool"""
        return _modshogun.KernelMachine_create_new_model(self, *args)

    def init_kernel_optimization(self):
        """init_kernel_optimization(self) -> bool"""
        return _modshogun.KernelMachine_init_kernel_optimization(self)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, num) -> float
        """
        return _modshogun.KernelMachine_apply(self, *args)

    def apply_helper(*args):
        """apply_helper(p) -> void *"""
        return _modshogun.KernelMachine_apply_helper(*args)

    if _newclass:apply_helper = staticmethod(apply_helper)
    __swig_getmethods__["apply_helper"] = lambda x: apply_helper
KernelMachine_swigregister = _modshogun.KernelMachine_swigregister
KernelMachine_swigregister(KernelMachine)

def KernelMachine_apply_helper(*args):
  """KernelMachine_apply_helper(p) -> void *"""
  return _modshogun.KernelMachine_apply_helper(*args)

class CDistanceMachine(Machine):
    """Proxy of C++ shogun::CDistanceMachine class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDistanceMachine, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDistanceMachine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> CDistanceMachine"""
        this = _modshogun.new_CDistanceMachine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CDistanceMachine
    __del__ = lambda self : None;
    def set_distance(self, *args):
        """set_distance(self, d)"""
        return _modshogun.CDistanceMachine_set_distance(self, *args)

    def get_distance(self):
        """get_distance(self) -> Distance"""
        return _modshogun.CDistanceMachine_get_distance(self)

    def distances_lhs(self, *args):
        """distances_lhs(self, result, idx_a1, idx_a2, idx_b)"""
        return _modshogun.CDistanceMachine_distances_lhs(self, *args)

    def distances_rhs(self, *args):
        """distances_rhs(self, result, idx_b1, idx_b2, idx_a)"""
        return _modshogun.CDistanceMachine_distances_rhs(self, *args)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, num) -> float
        """
        return _modshogun.CDistanceMachine_apply(self, *args)

CDistanceMachine_swigregister = _modshogun.CDistanceMachine_swigregister
CDistanceMachine_swigregister(CDistanceMachine)

class CSVM(KernelMachine):
    """Proxy of C++ shogun::CSVM class"""
    __swig_setmethods__ = {}
    for _s in [KernelMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [KernelMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, num_sv=0) -> CSVM
        __init__(self) -> CSVM
        __init__(self, C, k, lab) -> CSVM
        """
        this = _modshogun.new_CSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CSVM
    __del__ = lambda self : None;
    def set_defaults(self, num_sv=0):
        """
        set_defaults(self, num_sv=0)
        set_defaults(self)
        """
        return _modshogun.CSVM_set_defaults(self, num_sv)

    def get_linear_term(self):
        """get_linear_term(self) -> RealVector"""
        return _modshogun.CSVM_get_linear_term(self)

    def set_linear_term(self, *args):
        """set_linear_term(self, linear_term)"""
        return _modshogun.CSVM_set_linear_term(self, *args)

    def set_nu(self, *args):
        """set_nu(self, nue)"""
        return _modshogun.CSVM_set_nu(self, *args)

    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.CSVM_set_C(self, *args)

    def set_epsilon(self, *args):
        """set_epsilon(self, eps)"""
        return _modshogun.CSVM_set_epsilon(self, *args)

    def set_tube_epsilon(self, *args):
        """set_tube_epsilon(self, eps)"""
        return _modshogun.CSVM_set_tube_epsilon(self, *args)

    def get_tube_epsilon(self):
        """get_tube_epsilon(self) -> float"""
        return _modshogun.CSVM_get_tube_epsilon(self)

    def set_qpsize(self, *args):
        """set_qpsize(self, qps)"""
        return _modshogun.CSVM_set_qpsize(self, *args)

    def get_epsilon(self):
        """get_epsilon(self) -> float"""
        return _modshogun.CSVM_get_epsilon(self)

    def get_nu(self):
        """get_nu(self) -> float"""
        return _modshogun.CSVM_get_nu(self)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.CSVM_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.CSVM_get_C2(self)

    def get_qpsize(self):
        """get_qpsize(self) ->  int"""
        return _modshogun.CSVM_get_qpsize(self)

    def set_shrinking_enabled(self, *args):
        """set_shrinking_enabled(self, enable)"""
        return _modshogun.CSVM_set_shrinking_enabled(self, *args)

    def get_shrinking_enabled(self):
        """get_shrinking_enabled(self) -> bool"""
        return _modshogun.CSVM_get_shrinking_enabled(self)

    def compute_svm_dual_objective(self):
        """compute_svm_dual_objective(self) -> float"""
        return _modshogun.CSVM_compute_svm_dual_objective(self)

    def compute_svm_primal_objective(self):
        """compute_svm_primal_objective(self) -> float"""
        return _modshogun.CSVM_compute_svm_primal_objective(self)

    def set_objective(self, *args):
        """set_objective(self, v)"""
        return _modshogun.CSVM_set_objective(self, *args)

    def get_objective(self):
        """get_objective(self) -> float"""
        return _modshogun.CSVM_get_objective(self)

    def set_callback_function(self, *args):
        """set_callback_function(self, m, cb)"""
        return _modshogun.CSVM_set_callback_function(self, *args)

CSVM_swigregister = _modshogun.CSVM_swigregister
CSVM_swigregister(CSVM)

ONE_VS_REST = _modshogun.ONE_VS_REST
ONE_VS_ONE = _modshogun.ONE_VS_ONE
class MultiClassSVM(CSVM):
    """Proxy of C++ shogun::CMultiClassSVM class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiClassSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiClassSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultiClassSVM
        __init__(self, type) -> MultiClassSVM
        __init__(self, type, C, k, lab) -> MultiClassSVM
        """
        this = _modshogun.new_MultiClassSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MultiClassSVM
    __del__ = lambda self : None;
    def create_multiclass_svm(self, *args):
        """create_multiclass_svm(self, num_classes) -> bool"""
        return _modshogun.MultiClassSVM_create_multiclass_svm(self, *args)

    def set_svm(self, *args):
        """set_svm(self, num, svm) -> bool"""
        return _modshogun.MultiClassSVM_set_svm(self, *args)

    def get_svm(self, *args):
        """get_svm(self, num) -> CSVM"""
        return _modshogun.MultiClassSVM_get_svm(self, *args)

    def get_num_svms(self):
        """get_num_svms(self) ->  int"""
        return _modshogun.MultiClassSVM_get_num_svms(self)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, num) -> float
        """
        return _modshogun.MultiClassSVM_apply(self, *args)

    def classify_one_vs_rest(self):
        """classify_one_vs_rest(self) -> Labels"""
        return _modshogun.MultiClassSVM_classify_one_vs_rest(self)

    def classify_example_one_vs_rest(self, *args):
        """classify_example_one_vs_rest(self, num) -> float"""
        return _modshogun.MultiClassSVM_classify_example_one_vs_rest(self, *args)

    def classify_one_vs_one(self):
        """classify_one_vs_one(self) -> Labels"""
        return _modshogun.MultiClassSVM_classify_one_vs_one(self)

    def classify_example_one_vs_one(self, *args):
        """classify_example_one_vs_one(self, num) -> float"""
        return _modshogun.MultiClassSVM_classify_example_one_vs_one(self, *args)

    def get_multiclass_type(self):
        """get_multiclass_type(self) -> shogun::EMultiClassSVM"""
        return _modshogun.MultiClassSVM_get_multiclass_type(self)

MultiClassSVM_swigregister = _modshogun.MultiClassSVM_swigregister
MultiClassSVM_swigregister(MultiClassSVM)

class LinearMachine(Machine):
    """Proxy of C++ shogun::CLinearMachine class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearMachine, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearMachine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> LinearMachine"""
        this = _modshogun.new_LinearMachine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LinearMachine
    __del__ = lambda self : None;
    def get_w(self, *args):
        """
        get_w(self) -> [] of float
        get_w(self) -> [] of float
        """
        return _modshogun.LinearMachine_get_w(self, *args)

    def set_w(self, *args):
        """set_w(self, src_w)"""
        return _modshogun.LinearMachine_set_w(self, *args)

    def set_bias(self, *args):
        """set_bias(self, b)"""
        return _modshogun.LinearMachine_set_bias(self, *args)

    def get_bias(self):
        """get_bias(self) -> float"""
        return _modshogun.LinearMachine_get_bias(self)

    def set_features(self, *args):
        """set_features(self, feat)"""
        return _modshogun.LinearMachine_set_features(self, *args)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, vec_idx) -> float
        """
        return _modshogun.LinearMachine_apply(self, *args)

    def get_features(self):
        """get_features(self) -> DotFeatures"""
        return _modshogun.LinearMachine_get_features(self)

LinearMachine_swigregister = _modshogun.LinearMachine_swigregister
LinearMachine_swigregister(LinearMachine)

class OnlineLinearMachine(Machine):
    """Proxy of C++ shogun::COnlineLinearMachine class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnlineLinearMachine, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnlineLinearMachine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> OnlineLinearMachine"""
        this = _modshogun.new_OnlineLinearMachine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_OnlineLinearMachine
    __del__ = lambda self : None;
    def get_w(self, *args):
        """
        get_w(self) -> [] of float
        get_w(self) -> [] of float
        get_w(self) -> [] of float
        """
        return _modshogun.OnlineLinearMachine_get_w(self, *args)

    def set_w(self, *args):
        """
        set_w(self, src_w, src_w_dim)
        set_w(self, src_w, src_w_dim)
        """
        return _modshogun.OnlineLinearMachine_set_w(self, *args)

    def set_bias(self, *args):
        """set_bias(self, b)"""
        return _modshogun.OnlineLinearMachine_set_bias(self, *args)

    def get_bias(self):
        """get_bias(self) -> float"""
        return _modshogun.OnlineLinearMachine_get_bias(self)

    def set_features(self, *args):
        """set_features(self, feat)"""
        return _modshogun.OnlineLinearMachine_set_features(self, *args)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, vec_idx) -> float
        apply(self, vec, len) -> float
        """
        return _modshogun.OnlineLinearMachine_apply(self, *args)

    def apply_to_current_example(self):
        """apply_to_current_example(self) -> float"""
        return _modshogun.OnlineLinearMachine_apply_to_current_example(self)

    def get_features(self):
        """get_features(self) -> StreamingDotFeatures"""
        return _modshogun.OnlineLinearMachine_get_features(self)

OnlineLinearMachine_swigregister = _modshogun.OnlineLinearMachine_swigregister
OnlineLinearMachine_swigregister(OnlineLinearMachine)

class GaussianNaiveBayes(Machine):
    """Proxy of C++ shogun::CGaussianNaiveBayes class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianNaiveBayes, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianNaiveBayes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GaussianNaiveBayes
        __init__(self, train_examples, train_labels) -> GaussianNaiveBayes
        """
        this = _modshogun.new_GaussianNaiveBayes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GaussianNaiveBayes
    __del__ = lambda self : None;
    def set_features(self, *args):
        """set_features(self, features)"""
        return _modshogun.GaussianNaiveBayes_set_features(self, *args)

    def get_features(self):
        """get_features(self) -> DotFeatures"""
        return _modshogun.GaussianNaiveBayes_get_features(self)

    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.GaussianNaiveBayes_train(self, data)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, idx) -> float
        """
        return _modshogun.GaussianNaiveBayes_apply(self, *args)

GaussianNaiveBayes_swigregister = _modshogun.GaussianNaiveBayes_swigregister
GaussianNaiveBayes_swigregister(GaussianNaiveBayes)

class GMNPSVM(MultiClassSVM):
    """Proxy of C++ shogun::CGMNPSVM class"""
    __swig_setmethods__ = {}
    for _s in [MultiClassSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GMNPSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiClassSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GMNPSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GMNPSVM
        __init__(self, C, k, lab) -> GMNPSVM
        """
        this = _modshogun.new_GMNPSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GMNPSVM
    __del__ = lambda self : None;
    def get_basealphas_ptr(self, *args):
        """get_basealphas_ptr(self, y, x) -> float *"""
        return _modshogun.GMNPSVM_get_basealphas_ptr(self, *args)

GMNPSVM_swigregister = _modshogun.GMNPSVM_swigregister
GMNPSVM_swigregister(GMNPSVM)

class GNPPSVM(CSVM):
    """Proxy of C++ shogun::CGNPPSVM class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GNPPSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GNPPSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GNPPSVM
        __init__(self, C, k, lab) -> GNPPSVM
        """
        this = _modshogun.new_GNPPSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GNPPSVM
    __del__ = lambda self : None;
GNPPSVM_swigregister = _modshogun.GNPPSVM_swigregister
GNPPSVM_swigregister(GNPPSVM)

class GPBTSVM(CSVM):
    """Proxy of C++ shogun::CGPBTSVM class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPBTSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPBTSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GPBTSVM
        __init__(self, C, k, lab) -> GPBTSVM
        """
        this = _modshogun.new_GPBTSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GPBTSVM
    __del__ = lambda self : None;
GPBTSVM_swigregister = _modshogun.GPBTSVM_swigregister
GPBTSVM_swigregister(GPBTSVM)

class KNN(CDistanceMachine):
    """Proxy of C++ shogun::CKNN class"""
    __swig_setmethods__ = {}
    for _s in [CDistanceMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KNN, name, value)
    __swig_getmethods__ = {}
    for _s in [CDistanceMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KNN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> KNN
        __init__(self, k, d, trainlab) -> KNN
        """
        this = _modshogun.new_KNN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_KNN
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, vec_idx) -> float
        """
        return _modshogun.KNN_apply(self, *args)

    def classify_for_multiple_k(self):
        """classify_for_multiple_k(self) -> IntMatrix"""
        return _modshogun.KNN_classify_for_multiple_k(self)

    def set_k(self, *args):
        """set_k(self, k)"""
        return _modshogun.KNN_set_k(self, *args)

    def get_k(self):
        """get_k(self) ->  int"""
        return _modshogun.KNN_get_k(self)

    def set_q(self, *args):
        """set_q(self, q)"""
        return _modshogun.KNN_set_q(self, *args)

    def get_q(self):
        """get_q(self) -> float"""
        return _modshogun.KNN_get_q(self)

KNN_swigregister = _modshogun.KNN_swigregister
KNN_swigregister(KNN)

L2R_LR = _modshogun.L2R_LR
L2R_L2LOSS_SVC_DUAL = _modshogun.L2R_L2LOSS_SVC_DUAL
L2R_L2LOSS_SVC = _modshogun.L2R_L2LOSS_SVC
L2R_L1LOSS_SVC_DUAL = _modshogun.L2R_L1LOSS_SVC_DUAL
MCSVM_CS = _modshogun.MCSVM_CS
L1R_L2LOSS_SVC = _modshogun.L1R_L2LOSS_SVC
L1R_LR = _modshogun.L1R_LR
NO_BIAS_LIBSVM = _modshogun.NO_BIAS_LIBSVM
NO_BIAS_SVMLIGHT = _modshogun.NO_BIAS_SVMLIGHT
TEST_RULE1 = _modshogun.TEST_RULE1
TEST_RULE2 = _modshogun.TEST_RULE2
class ScatterSVM(MultiClassSVM):
    """Proxy of C++ shogun::CScatterSVM class"""
    __swig_setmethods__ = {}
    for _s in [MultiClassSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScatterSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiClassSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScatterSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ScatterSVM
        __init__(self, type) -> ScatterSVM
        __init__(self, C, k, lab) -> ScatterSVM
        """
        this = _modshogun.new_ScatterSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ScatterSVM
    __del__ = lambda self : None;
ScatterSVM_swigregister = _modshogun.ScatterSVM_swigregister
ScatterSVM_swigregister(ScatterSVM)

LIBSVM_C_SVC = _modshogun.LIBSVM_C_SVC
LIBSVM_NU_SVC = _modshogun.LIBSVM_NU_SVC
class LibSVM(CSVM):
    """Proxy of C++ shogun::CLibSVM class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LibSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, st=LIBSVM_C_SVC) -> LibSVM
        __init__(self) -> LibSVM
        __init__(self, C, k, lab) -> LibSVM
        """
        this = _modshogun.new_LibSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LibSVM
    __del__ = lambda self : None;
LibSVM_swigregister = _modshogun.LibSVM_swigregister
LibSVM_swigregister(LibSVM)

class LaRank(MultiClassSVM):
    """Proxy of C++ shogun::CLaRank class"""
    __swig_setmethods__ = {}
    for _s in [MultiClassSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LaRank, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiClassSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LaRank, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LaRank
        __init__(self, C, k, lab) -> LaRank
        """
        this = _modshogun.new_LaRank(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LaRank
    __del__ = lambda self : None;
    def add(self, *args):
        """add(self, x_id, yi) ->  int"""
        return _modshogun.LaRank_add(self, *args)

    def predict(self, *args):
        """predict(self, x_id) ->  int"""
        return _modshogun.LaRank_predict(self, *args)

    def destroy(self):
        """destroy(self)"""
        return _modshogun.LaRank_destroy(self)

    def computeGap(self):
        """computeGap(self) -> float"""
        return _modshogun.LaRank_computeGap(self)

    def getNumOutputs(self):
        """getNumOutputs(self) -> int"""
        return _modshogun.LaRank_getNumOutputs(self)

    def getNSV(self):
        """getNSV(self) ->  int"""
        return _modshogun.LaRank_getNSV(self)

    def computeW2(self):
        """computeW2(self) -> float"""
        return _modshogun.LaRank_computeW2(self)

    def getDual(self):
        """getDual(self) -> float"""
        return _modshogun.LaRank_getDual(self)

    def set_batch_mode(self, *args):
        """set_batch_mode(self, enable)"""
        return _modshogun.LaRank_set_batch_mode(self, *args)

    def get_batch_mode(self):
        """get_batch_mode(self) -> bool"""
        return _modshogun.LaRank_get_batch_mode(self)

    def set_tau(self, *args):
        """set_tau(self, t)"""
        return _modshogun.LaRank_set_tau(self, *args)

    def get_tau(self):
        """get_tau(self) -> float"""
        return _modshogun.LaRank_get_tau(self)

LaRank_swigregister = _modshogun.LaRank_swigregister
LaRank_swigregister(LaRank)

class LibSVMMultiClass(MultiClassSVM):
    """Proxy of C++ shogun::CLibSVMMultiClass class"""
    __swig_setmethods__ = {}
    for _s in [MultiClassSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibSVMMultiClass, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiClassSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LibSVMMultiClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, st=LIBSVM_C_SVC) -> LibSVMMultiClass
        __init__(self) -> LibSVMMultiClass
        __init__(self, C, k, lab) -> LibSVMMultiClass
        """
        this = _modshogun.new_LibSVMMultiClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LibSVMMultiClass
    __del__ = lambda self : None;
LibSVMMultiClass_swigregister = _modshogun.LibSVMMultiClass_swigregister
LibSVMMultiClass_swigregister(LibSVMMultiClass)

class LibSVMOneClass(CSVM):
    """Proxy of C++ shogun::CLibSVMOneClass class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibSVMOneClass, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LibSVMOneClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LibSVMOneClass
        __init__(self, C, k) -> LibSVMOneClass
        """
        this = _modshogun.new_LibSVMOneClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LibSVMOneClass
    __del__ = lambda self : None;
LibSVMOneClass_swigregister = _modshogun.LibSVMOneClass_swigregister
LibSVMOneClass_swigregister(LibSVMOneClass)

class MPDSVM(CSVM):
    """Proxy of C++ shogun::CMPDSVM class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPDSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MPDSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MPDSVM
        __init__(self, C, k, lab) -> MPDSVM
        """
        this = _modshogun.new_MPDSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MPDSVM
    __del__ = lambda self : None;
MPDSVM_swigregister = _modshogun.MPDSVM_swigregister
MPDSVM_swigregister(MPDSVM)

class OnlineSVMSGD(OnlineLinearMachine):
    """Proxy of C++ shogun::COnlineSVMSGD class"""
    __swig_setmethods__ = {}
    for _s in [OnlineLinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnlineSVMSGD, name, value)
    __swig_getmethods__ = {}
    for _s in [OnlineLinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnlineSVMSGD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OnlineSVMSGD
        __init__(self, C) -> OnlineSVMSGD
        __init__(self, C, traindat) -> OnlineSVMSGD
        """
        this = _modshogun.new_OnlineSVMSGD(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_OnlineSVMSGD
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.OnlineSVMSGD_train(self, data)

    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.OnlineSVMSGD_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.OnlineSVMSGD_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.OnlineSVMSGD_get_C2(self)

    def set_epochs(self, *args):
        """set_epochs(self, e)"""
        return _modshogun.OnlineSVMSGD_set_epochs(self, *args)

    def get_epochs(self):
        """get_epochs(self) ->  int"""
        return _modshogun.OnlineSVMSGD_get_epochs(self)

    def set_lambda(self, *args):
        """set_lambda(self, l)"""
        return _modshogun.OnlineSVMSGD_set_lambda(self, *args)

    def get_lambda(self):
        """get_lambda(self) -> float"""
        return _modshogun.OnlineSVMSGD_get_lambda(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.OnlineSVMSGD_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.OnlineSVMSGD_get_bias_enabled(self)

    def set_regularized_bias_enabled(self, *args):
        """set_regularized_bias_enabled(self, enable_bias)"""
        return _modshogun.OnlineSVMSGD_set_regularized_bias_enabled(self, *args)

    def get_regularized_bias_enabled(self):
        """get_regularized_bias_enabled(self) -> bool"""
        return _modshogun.OnlineSVMSGD_get_regularized_bias_enabled(self)

    def set_loss_function(self, *args):
        """set_loss_function(self, loss_func)"""
        return _modshogun.OnlineSVMSGD_set_loss_function(self, *args)

    def get_loss_function(self):
        """get_loss_function(self) -> CLossFunction *"""
        return _modshogun.OnlineSVMSGD_get_loss_function(self)

OnlineSVMSGD_swigregister = _modshogun.OnlineSVMSGD_swigregister
OnlineSVMSGD_swigregister(OnlineSVMSGD)

class OnlineLibLinear(OnlineLinearMachine):
    """Proxy of C++ shogun::COnlineLibLinear class"""
    __swig_setmethods__ = {}
    for _s in [OnlineLinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnlineLibLinear, name, value)
    __swig_getmethods__ = {}
    for _s in [OnlineLinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnlineLibLinear, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OnlineLibLinear
        __init__(self, C) -> OnlineLibLinear
        __init__(self, C, traindat) -> OnlineLibLinear
        """
        this = _modshogun.new_OnlineLibLinear(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_OnlineLibLinear
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.OnlineLibLinear_train(self, data)

    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.OnlineLibLinear_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.OnlineLibLinear_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.OnlineLibLinear_get_C2(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.OnlineLibLinear_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.OnlineLibLinear_get_bias_enabled(self)

OnlineLibLinear_swigregister = _modshogun.OnlineLibLinear_swigregister
OnlineLibLinear_swigregister(OnlineLibLinear)

class Perceptron(LinearMachine):
    """Proxy of C++ shogun::CPerceptron class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Perceptron, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Perceptron, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Perceptron
        __init__(self, traindat, trainlab) -> Perceptron
        """
        this = _modshogun.new_Perceptron(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Perceptron
    __del__ = lambda self : None;
    def set_learn_rate(self, *args):
        """set_learn_rate(self, r)"""
        return _modshogun.Perceptron_set_learn_rate(self, *args)

    def set_max_iter(self, *args):
        """set_max_iter(self, i)"""
        return _modshogun.Perceptron_set_max_iter(self, *args)

Perceptron_swigregister = _modshogun.Perceptron_swigregister
Perceptron_swigregister(Perceptron)

class AveragedPerceptron(LinearMachine):
    """Proxy of C++ shogun::CAveragedPerceptron class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AveragedPerceptron, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AveragedPerceptron, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AveragedPerceptron
        __init__(self, traindat, trainlab) -> AveragedPerceptron
        """
        this = _modshogun.new_AveragedPerceptron(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_AveragedPerceptron
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.AveragedPerceptron_train(self, data)

    def set_learn_rate(self, *args):
        """set_learn_rate(self, r)"""
        return _modshogun.AveragedPerceptron_set_learn_rate(self, *args)

    def set_max_iter(self, *args):
        """set_max_iter(self, i)"""
        return _modshogun.AveragedPerceptron_set_max_iter(self, *args)

AveragedPerceptron_swigregister = _modshogun.AveragedPerceptron_swigregister
AveragedPerceptron_swigregister(AveragedPerceptron)

class SubGradientSVM(LinearMachine):
    """Proxy of C++ shogun::CSubGradientSVM class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubGradientSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubGradientSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SubGradientSVM
        __init__(self, C, traindat, trainlab) -> SubGradientSVM
        """
        this = _modshogun.new_SubGradientSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SubGradientSVM
    __del__ = lambda self : None;
    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.SubGradientSVM_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.SubGradientSVM_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.SubGradientSVM_get_C2(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.SubGradientSVM_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.SubGradientSVM_get_bias_enabled(self)

    def set_epsilon(self, *args):
        """set_epsilon(self, eps)"""
        return _modshogun.SubGradientSVM_set_epsilon(self, *args)

    def get_epsilon(self):
        """get_epsilon(self) -> float"""
        return _modshogun.SubGradientSVM_get_epsilon(self)

    def set_qpsize(self, *args):
        """set_qpsize(self, q)"""
        return _modshogun.SubGradientSVM_set_qpsize(self, *args)

    def get_qpsize(self):
        """get_qpsize(self) ->  int"""
        return _modshogun.SubGradientSVM_get_qpsize(self)

    def set_qpsize_max(self, *args):
        """set_qpsize_max(self, q)"""
        return _modshogun.SubGradientSVM_set_qpsize_max(self, *args)

    def get_qpsize_max(self):
        """get_qpsize_max(self) ->  int"""
        return _modshogun.SubGradientSVM_get_qpsize_max(self)

SubGradientSVM_swigregister = _modshogun.SubGradientSVM_swigregister
SubGradientSVM_swigregister(SubGradientSVM)

class SVMLin(LinearMachine):
    """Proxy of C++ shogun::CSVMLin class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVMLin, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVMLin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SVMLin
        __init__(self, C, traindat, trainlab) -> SVMLin
        """
        this = _modshogun.new_SVMLin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SVMLin
    __del__ = lambda self : None;
    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.SVMLin_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.SVMLin_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.SVMLin_get_C2(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.SVMLin_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.SVMLin_get_bias_enabled(self)

    def set_epsilon(self, *args):
        """set_epsilon(self, eps)"""
        return _modshogun.SVMLin_set_epsilon(self, *args)

    def get_epsilon(self):
        """get_epsilon(self) -> float"""
        return _modshogun.SVMLin_get_epsilon(self)

SVMLin_swigregister = _modshogun.SVMLin_swigregister
SVMLin_swigregister(SVMLin)

SVM_OCAS = _modshogun.SVM_OCAS
SVM_BMRM = _modshogun.SVM_BMRM
class SVMOcas(LinearMachine):
    """Proxy of C++ shogun::CSVMOcas class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVMOcas, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVMOcas, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SVMOcas
        __init__(self, type) -> SVMOcas
        __init__(self, C, traindat, trainlab) -> SVMOcas
        """
        this = _modshogun.new_SVMOcas(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SVMOcas
    __del__ = lambda self : None;
    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.SVMOcas_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.SVMOcas_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.SVMOcas_get_C2(self)

    def set_epsilon(self, *args):
        """set_epsilon(self, eps)"""
        return _modshogun.SVMOcas_set_epsilon(self, *args)

    def get_epsilon(self):
        """get_epsilon(self) -> float"""
        return _modshogun.SVMOcas_get_epsilon(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.SVMOcas_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.SVMOcas_get_bias_enabled(self)

    def set_bufsize(self, *args):
        """set_bufsize(self, sz)"""
        return _modshogun.SVMOcas_set_bufsize(self, *args)

    def get_bufsize(self):
        """get_bufsize(self) ->  int"""
        return _modshogun.SVMOcas_get_bufsize(self)

SVMOcas_swigregister = _modshogun.SVMOcas_swigregister
SVMOcas_swigregister(SVMOcas)

class SVMSGD(LinearMachine):
    """Proxy of C++ shogun::CSVMSGD class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVMSGD, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVMSGD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SVMSGD
        __init__(self, C) -> SVMSGD
        __init__(self, C, traindat, trainlab) -> SVMSGD
        """
        this = _modshogun.new_SVMSGD(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SVMSGD
    __del__ = lambda self : None;
    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.SVMSGD_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.SVMSGD_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.SVMSGD_get_C2(self)

    def set_epochs(self, *args):
        """set_epochs(self, e)"""
        return _modshogun.SVMSGD_set_epochs(self, *args)

    def get_epochs(self):
        """get_epochs(self) ->  int"""
        return _modshogun.SVMSGD_get_epochs(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.SVMSGD_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.SVMSGD_get_bias_enabled(self)

    def set_regularized_bias_enabled(self, *args):
        """set_regularized_bias_enabled(self, enable_bias)"""
        return _modshogun.SVMSGD_set_regularized_bias_enabled(self, *args)

    def get_regularized_bias_enabled(self):
        """get_regularized_bias_enabled(self) -> bool"""
        return _modshogun.SVMSGD_get_regularized_bias_enabled(self)

    def set_loss_function(self, *args):
        """set_loss_function(self, loss_func)"""
        return _modshogun.SVMSGD_set_loss_function(self, *args)

    def get_loss_function(self):
        """get_loss_function(self) -> CLossFunction *"""
        return _modshogun.SVMSGD_get_loss_function(self)

SVMSGD_swigregister = _modshogun.SVMSGD_swigregister
SVMSGD_swigregister(SVMSGD)

class SGDQN(LinearMachine):
    """Proxy of C++ shogun::CSGDQN class"""
    __swig_setmethods__ = {}
    for _s in [LinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SGDQN, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SGDQN, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SGDQN
        __init__(self, C) -> SGDQN
        __init__(self, C, traindat, trainlab) -> SGDQN
        """
        this = _modshogun.new_SGDQN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SGDQN
    __del__ = lambda self : None;
    def train(self, data=None):
        """
        train(self, data=None) -> bool
        train(self) -> bool
        """
        return _modshogun.SGDQN_train(self, data)

    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.SGDQN_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.SGDQN_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.SGDQN_get_C2(self)

    def set_epochs(self, *args):
        """set_epochs(self, e)"""
        return _modshogun.SGDQN_set_epochs(self, *args)

    def get_epochs(self):
        """get_epochs(self) ->  int"""
        return _modshogun.SGDQN_get_epochs(self)

    def compute_ratio(self, *args):
        """compute_ratio(self, W, W_1, B, dst, dim, regularizer_lambda, loss)"""
        return _modshogun.SGDQN_compute_ratio(self, *args)

    def combine_and_clip(self, *args):
        """combine_and_clip(self, Bc, B, dim, c1, c2, v1, v2)"""
        return _modshogun.SGDQN_combine_and_clip(self, *args)

    def set_loss_function(self, *args):
        """set_loss_function(self, loss_func)"""
        return _modshogun.SGDQN_set_loss_function(self, *args)

    def get_loss_function(self):
        """get_loss_function(self) -> CLossFunction *"""
        return _modshogun.SGDQN_get_loss_function(self)

SGDQN_swigregister = _modshogun.SGDQN_swigregister
SGDQN_swigregister(SGDQN)

class WDSVMOcas(Machine):
    """Proxy of C++ shogun::CWDSVMOcas class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WDSVMOcas, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WDSVMOcas, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> WDSVMOcas
        __init__(self, type) -> WDSVMOcas
        __init__(self, C, d, from_d, traindat, trainlab) -> WDSVMOcas
        """
        this = _modshogun.new_WDSVMOcas(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_WDSVMOcas
    __del__ = lambda self : None;
    def set_C(self, *args):
        """set_C(self, c_neg, c_pos)"""
        return _modshogun.WDSVMOcas_set_C(self, *args)

    def get_C1(self):
        """get_C1(self) -> float"""
        return _modshogun.WDSVMOcas_get_C1(self)

    def get_C2(self):
        """get_C2(self) -> float"""
        return _modshogun.WDSVMOcas_get_C2(self)

    def set_epsilon(self, *args):
        """set_epsilon(self, eps)"""
        return _modshogun.WDSVMOcas_set_epsilon(self, *args)

    def get_epsilon(self):
        """get_epsilon(self) -> float"""
        return _modshogun.WDSVMOcas_get_epsilon(self)

    def set_features(self, *args):
        """set_features(self, feat)"""
        return _modshogun.WDSVMOcas_set_features(self, *args)

    def get_features(self):
        """get_features(self) -> StringByteFeatures"""
        return _modshogun.WDSVMOcas_get_features(self)

    def set_bias_enabled(self, *args):
        """set_bias_enabled(self, enable_bias)"""
        return _modshogun.WDSVMOcas_set_bias_enabled(self, *args)

    def get_bias_enabled(self):
        """get_bias_enabled(self) -> bool"""
        return _modshogun.WDSVMOcas_get_bias_enabled(self)

    def set_bufsize(self, *args):
        """set_bufsize(self, sz)"""
        return _modshogun.WDSVMOcas_set_bufsize(self, *args)

    def get_bufsize(self):
        """get_bufsize(self) ->  int"""
        return _modshogun.WDSVMOcas_get_bufsize(self)

    def set_degree(self, *args):
        """set_degree(self, d, from_d)"""
        return _modshogun.WDSVMOcas_set_degree(self, *args)

    def get_degree(self):
        """get_degree(self) ->  int"""
        return _modshogun.WDSVMOcas_get_degree(self)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, num) -> float
        """
        return _modshogun.WDSVMOcas_apply(self, *args)

    def set_normalization_const(self):
        """set_normalization_const(self)"""
        return _modshogun.WDSVMOcas_set_normalization_const(self)

    def get_normalization_const(self):
        """get_normalization_const(self) -> float"""
        return _modshogun.WDSVMOcas_get_normalization_const(self)

WDSVMOcas_swigregister = _modshogun.WDSVMOcas_swigregister
WDSVMOcas_swigregister(WDSVMOcas)

class PluginEstimate(Machine):
    """Proxy of C++ shogun::CPluginEstimate class"""
    __swig_setmethods__ = {}
    for _s in [Machine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginEstimate, name, value)
    __swig_getmethods__ = {}
    for _s in [Machine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PluginEstimate, name)
    __repr__ = _swig_repr
    def __init__(self, pos_pseudo=1e-10, neg_pseudo=1e-10): 
        """
        __init__(self, pos_pseudo=1e-10, neg_pseudo=1e-10) -> PluginEstimate
        __init__(self, pos_pseudo=1e-10) -> PluginEstimate
        __init__(self) -> PluginEstimate
        """
        this = _modshogun.new_PluginEstimate(pos_pseudo, neg_pseudo)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PluginEstimate
    __del__ = lambda self : None;
    def set_features(self, *args):
        """set_features(self, feat)"""
        return _modshogun.PluginEstimate_set_features(self, *args)

    def get_features(self):
        """get_features(self) -> StringWordFeatures"""
        return _modshogun.PluginEstimate_get_features(self)

    def apply(self, *args):
        """
        apply(self) -> Labels
        apply(self, data) -> Labels
        apply(self, vec_idx) -> float
        """
        return _modshogun.PluginEstimate_apply(self, *args)

    def posterior_log_odds_obsolete(self, *args):
        """posterior_log_odds_obsolete(self, vector, len) -> float"""
        return _modshogun.PluginEstimate_posterior_log_odds_obsolete(self, *args)

    def get_parameterwise_log_odds(self, *args):
        """get_parameterwise_log_odds(self, obs, position) -> float"""
        return _modshogun.PluginEstimate_get_parameterwise_log_odds(self, *args)

    def log_derivative_pos_obsolete(self, *args):
        """log_derivative_pos_obsolete(self, obs, pos) -> float"""
        return _modshogun.PluginEstimate_log_derivative_pos_obsolete(self, *args)

    def log_derivative_neg_obsolete(self, *args):
        """log_derivative_neg_obsolete(self, obs, pos) -> float"""
        return _modshogun.PluginEstimate_log_derivative_neg_obsolete(self, *args)

    def get_model_params(self, *args):
        """get_model_params(self, pos_params, neg_params, seq_length, num_symbols) -> bool"""
        return _modshogun.PluginEstimate_get_model_params(self, *args)

    def set_model_params(self, *args):
        """set_model_params(self, pos_params, neg_params, seq_length, num_symbols)"""
        return _modshogun.PluginEstimate_set_model_params(self, *args)

    def get_num_params(self):
        """get_num_params(self) ->  int"""
        return _modshogun.PluginEstimate_get_num_params(self)

    def check_models(self):
        """check_models(self) -> bool"""
        return _modshogun.PluginEstimate_check_models(self)

PluginEstimate_swigregister = _modshogun.PluginEstimate_swigregister
PluginEstimate_swigregister(PluginEstimate)

class MKL(CSVM):
    """Proxy of C++ shogun::CMKL class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MKL, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MKL, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_MKL
    __del__ = lambda self : None;
    def set_constraint_generator(self, *args):
        """set_constraint_generator(self, s)"""
        return _modshogun.MKL_set_constraint_generator(self, *args)

    def set_svm(self, *args):
        """set_svm(self, s)"""
        return _modshogun.MKL_set_svm(self, *args)

    def get_svm(self):
        """get_svm(self) -> CSVM"""
        return _modshogun.MKL_get_svm(self)

    def set_C_mkl(self, *args):
        """set_C_mkl(self, C)"""
        return _modshogun.MKL_set_C_mkl(self, *args)

    def set_mkl_norm(self, *args):
        """set_mkl_norm(self, norm)"""
        return _modshogun.MKL_set_mkl_norm(self, *args)

    def set_elasticnet_lambda(self, *args):
        """set_elasticnet_lambda(self, elasticnet_lambda)"""
        return _modshogun.MKL_set_elasticnet_lambda(self, *args)

    def set_mkl_block_norm(self, *args):
        """set_mkl_block_norm(self, q)"""
        return _modshogun.MKL_set_mkl_block_norm(self, *args)

    def set_interleaved_optimization_enabled(self, *args):
        """set_interleaved_optimization_enabled(self, enable)"""
        return _modshogun.MKL_set_interleaved_optimization_enabled(self, *args)

    def get_interleaved_optimization_enabled(self):
        """get_interleaved_optimization_enabled(self) -> bool"""
        return _modshogun.MKL_get_interleaved_optimization_enabled(self)

    def compute_mkl_primal_objective(self):
        """compute_mkl_primal_objective(self) -> float"""
        return _modshogun.MKL_compute_mkl_primal_objective(self)

    def compute_mkl_dual_objective(self):
        """compute_mkl_dual_objective(self) -> float"""
        return _modshogun.MKL_compute_mkl_dual_objective(self)

    def compute_elasticnet_dual_objective(self):
        """compute_elasticnet_dual_objective(self) -> float"""
        return _modshogun.MKL_compute_elasticnet_dual_objective(self)

    def set_mkl_epsilon(self, *args):
        """set_mkl_epsilon(self, eps)"""
        return _modshogun.MKL_set_mkl_epsilon(self, *args)

    def get_mkl_epsilon(self):
        """get_mkl_epsilon(self) -> float"""
        return _modshogun.MKL_get_mkl_epsilon(self)

    def get_mkl_iterations(self):
        """get_mkl_iterations(self) ->  int"""
        return _modshogun.MKL_get_mkl_iterations(self)

    def perform_mkl_step(self, *args):
        """perform_mkl_step(self, sumw, suma) -> bool"""
        return _modshogun.MKL_perform_mkl_step(self, *args)

    def perform_mkl_step_helper(*args):
        """perform_mkl_step_helper(mkl, sumw, suma) -> bool"""
        return _modshogun.MKL_perform_mkl_step_helper(*args)

    if _newclass:perform_mkl_step_helper = staticmethod(perform_mkl_step_helper)
    __swig_getmethods__["perform_mkl_step_helper"] = lambda x: perform_mkl_step_helper
    def compute_sum_alpha(self):
        """compute_sum_alpha(self) -> float"""
        return _modshogun.MKL_compute_sum_alpha(self)

    def compute_sum_beta(self, *args):
        """compute_sum_beta(self, sumw)"""
        return _modshogun.MKL_compute_sum_beta(self, *args)

MKL_swigregister = _modshogun.MKL_swigregister
MKL_swigregister(MKL)

def MKL_perform_mkl_step_helper(*args):
  """MKL_perform_mkl_step_helper(mkl, sumw, suma) -> bool"""
  return _modshogun.MKL_perform_mkl_step_helper(*args)

class MKLClassification(MKL):
    """Proxy of C++ shogun::CMKLClassification class"""
    __swig_setmethods__ = {}
    for _s in [MKL]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MKLClassification, name, value)
    __swig_getmethods__ = {}
    for _s in [MKL]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MKLClassification, name)
    __repr__ = _swig_repr
    def __init__(self, s=None): 
        """
        __init__(self, s=None) -> MKLClassification
        __init__(self) -> MKLClassification
        """
        this = _modshogun.new_MKLClassification(s)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MKLClassification
    __del__ = lambda self : None;
MKLClassification_swigregister = _modshogun.MKLClassification_swigregister
MKLClassification_swigregister(MKLClassification)

class MKLOneClass(MKL):
    """Proxy of C++ shogun::CMKLOneClass class"""
    __swig_setmethods__ = {}
    for _s in [MKL]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MKLOneClass, name, value)
    __swig_getmethods__ = {}
    for _s in [MKL]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MKLOneClass, name)
    __repr__ = _swig_repr
    def __init__(self, s=None): 
        """
        __init__(self, s=None) -> MKLOneClass
        __init__(self) -> MKLOneClass
        """
        this = _modshogun.new_MKLOneClass(s)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MKLOneClass
    __del__ = lambda self : None;
MKLOneClass_swigregister = _modshogun.MKLOneClass_swigregister
MKLOneClass_swigregister(MKLOneClass)

class MKLMultiClass(MultiClassSVM):
    """Proxy of C++ shogun::CMKLMultiClass class"""
    __swig_setmethods__ = {}
    for _s in [MultiClassSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MKLMultiClass, name, value)
    __swig_getmethods__ = {}
    for _s in [MultiClassSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MKLMultiClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MKLMultiClass
        __init__(self, C, k, lab) -> MKLMultiClass
        """
        this = _modshogun.new_MKLMultiClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MKLMultiClass
    __del__ = lambda self : None;
    def getsubkernelweights(self, *args):
        """getsubkernelweights(self, numweights) -> float *"""
        return _modshogun.MKLMultiClass_getsubkernelweights(self, *args)

    def set_mkl_epsilon(self, *args):
        """set_mkl_epsilon(self, eps)"""
        return _modshogun.MKLMultiClass_set_mkl_epsilon(self, *args)

    def set_max_num_mkliters(self, *args):
        """set_max_num_mkliters(self, maxnum)"""
        return _modshogun.MKLMultiClass_set_max_num_mkliters(self, *args)

    def set_mkl_norm(self, *args):
        """set_mkl_norm(self, norm)"""
        return _modshogun.MKLMultiClass_set_mkl_norm(self, *args)

MKLMultiClass_swigregister = _modshogun.MKLMultiClass_swigregister
MKLMultiClass_swigregister(MKLMultiClass)

class VowpalWabbit(OnlineLinearMachine):
    """Proxy of C++ shogun::CVowpalWabbit class"""
    __swig_setmethods__ = {}
    for _s in [OnlineLinearMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VowpalWabbit, name, value)
    __swig_getmethods__ = {}
    for _s in [OnlineLinearMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VowpalWabbit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VowpalWabbit
        __init__(self, feat) -> VowpalWabbit
        """
        this = _modshogun.new_VowpalWabbit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_VowpalWabbit
    __del__ = lambda self : None;
    def reinitialize_weights(self):
        """reinitialize_weights(self)"""
        return _modshogun.VowpalWabbit_reinitialize_weights(self)

    def set_no_training(self, *args):
        """set_no_training(self, dont_train)"""
        return _modshogun.VowpalWabbit_set_no_training(self, *args)

    def set_adaptive(self, *args):
        """set_adaptive(self, adaptive_learning)"""
        return _modshogun.VowpalWabbit_set_adaptive(self, *args)

    def set_exact_adaptive_norm(self, *args):
        """set_exact_adaptive_norm(self, exact_adaptive)"""
        return _modshogun.VowpalWabbit_set_exact_adaptive_norm(self, *args)

    def set_num_passes(self, *args):
        """set_num_passes(self, passes)"""
        return _modshogun.VowpalWabbit_set_num_passes(self, *args)

    def load_regressor(self, *args):
        """load_regressor(self, file_name)"""
        return _modshogun.VowpalWabbit_load_regressor(self, *args)

    def set_regressor_out(self, *args):
        """
        set_regressor_out(self, file_name, is_text=True)
        set_regressor_out(self, file_name)
        """
        return _modshogun.VowpalWabbit_set_regressor_out(self, *args)

    def set_prediction_out(self, *args):
        """set_prediction_out(self, file_name)"""
        return _modshogun.VowpalWabbit_set_prediction_out(self, *args)

    def add_quadratic_pair(self, *args):
        """add_quadratic_pair(self, pair)"""
        return _modshogun.VowpalWabbit_add_quadratic_pair(self, *args)

    def train_machine(self, feat=None):
        """
        train_machine(self, feat=None) -> bool
        train_machine(self) -> bool
        """
        return _modshogun.VowpalWabbit_train_machine(self, feat)

    def predict_and_finalize(self, *args):
        """predict_and_finalize(self, ex) -> float"""
        return _modshogun.VowpalWabbit_predict_and_finalize(self, *args)

    def compute_exact_norm(self, *args):
        """compute_exact_norm(self, ex, sum_abs_x) -> float"""
        return _modshogun.VowpalWabbit_compute_exact_norm(self, *args)

    def compute_exact_norm_quad(self, *args):
        """compute_exact_norm_quad(self, weights, page_feature, offer_features, mask, g, sum_abs_x) -> float"""
        return _modshogun.VowpalWabbit_compute_exact_norm_quad(self, *args)

    def get_env(self):
        """get_env(self) -> CVwEnvironment *"""
        return _modshogun.VowpalWabbit_get_env(self)

VowpalWabbit_swigregister = _modshogun.VowpalWabbit_swigregister
VowpalWabbit_swigregister(VowpalWabbit)

class SVM(CSVM):
    def __init__(self, kernel, alphas, support_vectors, b):
        assert(len(alphas)==len(support_vectors))
        num_sv=len(alphas)
        CSVM.__init__(self, num_sv)
        self.set_alphas(alphas)
        self.set_support_vectors(support_vectors)
        self.set_kernel(kernel)
        self.set_bias(b)

DEF_PRECISION = _modshogun.DEF_PRECISION
class SVMLight(CSVM):
    """Proxy of C++ shogun::CSVMLight class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVMLight, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVMLight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SVMLight
        __init__(self, C, k, lab) -> SVMLight
        """
        this = _modshogun.new_SVMLight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SVMLight
    __del__ = lambda self : None;
SVMLight_swigregister = _modshogun.SVMLight_swigregister
SVMLight_swigregister(SVMLight)

class CSVMLightOneClass(SVMLight):
    """Proxy of C++ shogun::CSVMLightOneClass class"""
    __swig_setmethods__ = {}
    for _s in [SVMLight]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSVMLightOneClass, name, value)
    __swig_getmethods__ = {}
    for _s in [SVMLight]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSVMLightOneClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CSVMLightOneClass
        __init__(self, C, k) -> CSVMLightOneClass
        """
        this = _modshogun.new_CSVMLightOneClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_CSVMLightOneClass
    __del__ = lambda self : None;
CSVMLightOneClass_swigregister = _modshogun.CSVMLightOneClass_swigregister
CSVMLightOneClass_swigregister(CSVMLightOneClass)

class DomainAdaptationSVM(SVMLight):
    """Proxy of C++ shogun::CDomainAdaptationSVM class"""
    __swig_setmethods__ = {}
    for _s in [SVMLight]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainAdaptationSVM, name, value)
    __swig_getmethods__ = {}
    for _s in [SVMLight]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DomainAdaptationSVM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DomainAdaptationSVM
        __init__(self, C, k, lab, presvm, B) -> DomainAdaptationSVM
        """
        this = _modshogun.new_DomainAdaptationSVM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DomainAdaptationSVM
    __del__ = lambda self : None;
    def get_presvm(self):
        """get_presvm(self) -> CSVM"""
        return _modshogun.DomainAdaptationSVM_get_presvm(self)

    def get_B(self):
        """get_B(self) -> float"""
        return _modshogun.DomainAdaptationSVM_get_B(self)

    def get_train_factor(self):
        """get_train_factor(self) -> float"""
        return _modshogun.DomainAdaptationSVM_get_train_factor(self)

    def set_train_factor(self, *args):
        """set_train_factor(self, factor)"""
        return _modshogun.DomainAdaptationSVM_set_train_factor(self, *args)

DomainAdaptationSVM_swigregister = _modshogun.DomainAdaptationSVM_swigregister
DomainAdaptationSVM_swigregister(DomainAdaptationSVM)

RT_NONE = _modshogun.RT_NONE
RT_LIGHT = _modshogun.RT_LIGHT
RT_LIBSVM = _modshogun.RT_LIBSVM
class LibSVR(CSVM):
    """Proxy of C++ shogun::CLibSVR class"""
    __swig_setmethods__ = {}
    for _s in [CSVM]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LibSVR, name, value)
    __swig_getmethods__ = {}
    for _s in [CSVM]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LibSVR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LibSVR
        __init__(self, C, epsilon, k, lab) -> LibSVR
        """
        this = _modshogun.new_LibSVR(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_LibSVR
    __del__ = lambda self : None;
LibSVR_swigregister = _modshogun.LibSVR_swigregister
LibSVR_swigregister(LibSVR)

class MKLRegression(MKL):
    """Proxy of C++ shogun::CMKLRegression class"""
    __swig_setmethods__ = {}
    for _s in [MKL]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MKLRegression, name, value)
    __swig_getmethods__ = {}
    for _s in [MKL]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MKLRegression, name)
    __repr__ = _swig_repr
    def __init__(self, s=None): 
        """
        __init__(self, s=None) -> MKLRegression
        __init__(self) -> MKLRegression
        """
        this = _modshogun.new_MKLRegression(s)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_MKLRegression
    __del__ = lambda self : None;
MKLRegression_swigregister = _modshogun.MKLRegression_swigregister
MKLRegression_swigregister(MKLRegression)

class SVRLight(SVMLight):
    """Proxy of C++ shogun::CSVRLight class"""
    __swig_setmethods__ = {}
    for _s in [SVMLight]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVRLight, name, value)
    __swig_getmethods__ = {}
    for _s in [SVMLight]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVRLight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SVRLight
        __init__(self, C, epsilon, k, lab) -> SVRLight
        """
        this = _modshogun.new_SVRLight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SVRLight
    __del__ = lambda self : None;
SVRLight_swigregister = _modshogun.SVRLight_swigregister
SVRLight_swigregister(SVRLight)

class KMeans(CDistanceMachine):
    """Proxy of C++ shogun::CKMeans class"""
    __swig_setmethods__ = {}
    for _s in [CDistanceMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KMeans, name, value)
    __swig_getmethods__ = {}
    for _s in [CDistanceMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KMeans, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> KMeans
        __init__(self, k, d) -> KMeans
        """
        this = _modshogun.new_KMeans(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_KMeans
    __del__ = lambda self : None;
    def set_k(self, *args):
        """set_k(self, p_k)"""
        return _modshogun.KMeans_set_k(self, *args)

    def get_k(self):
        """get_k(self) ->  int"""
        return _modshogun.KMeans_get_k(self)

    def set_max_iter(self, *args):
        """set_max_iter(self, iter)"""
        return _modshogun.KMeans_set_max_iter(self, *args)

    def get_max_iter(self):
        """get_max_iter(self) -> float"""
        return _modshogun.KMeans_get_max_iter(self)

    def get_radiuses(self):
        """get_radiuses(self) -> RealVector"""
        return _modshogun.KMeans_get_radiuses(self)

    def get_cluster_centers(self):
        """get_cluster_centers(self) -> RealMatrix"""
        return _modshogun.KMeans_get_cluster_centers(self)

    def get_dimensions(self):
        """get_dimensions(self) ->  int"""
        return _modshogun.KMeans_get_dimensions(self)

KMeans_swigregister = _modshogun.KMeans_swigregister
KMeans_swigregister(KMeans)

class Hierarchical(CDistanceMachine):
    """Proxy of C++ shogun::CHierarchical class"""
    __swig_setmethods__ = {}
    for _s in [CDistanceMachine]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hierarchical, name, value)
    __swig_getmethods__ = {}
    for _s in [CDistanceMachine]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hierarchical, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Hierarchical
        __init__(self, merges, d) -> Hierarchical
        """
        this = _modshogun.new_Hierarchical(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Hierarchical
    __del__ = lambda self : None;
    def set_merges(self, *args):
        """set_merges(self, m)"""
        return _modshogun.Hierarchical_set_merges(self, *args)

    def get_merges(self):
        """get_merges(self) ->  int"""
        return _modshogun.Hierarchical_get_merges(self)

    def get_assignment(self):
        """get_assignment(self) -> IntVector"""
        return _modshogun.Hierarchical_get_assignment(self)

    def get_merge_distances(self):
        """get_merge_distances(self) -> RealVector"""
        return _modshogun.Hierarchical_get_merge_distances(self)

    def get_cluster_pairs(self):
        """get_cluster_pairs(self) -> IntMatrix"""
        return _modshogun.Hierarchical_get_cluster_pairs(self)

Hierarchical_swigregister = _modshogun.Hierarchical_swigregister
Hierarchical_swigregister(Hierarchical)

class ModelSelectionBase(SGObject):
    """Proxy of C++ shogun::CModelSelection class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelSelectionBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelSelectionBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_ModelSelectionBase
    __del__ = lambda self : None;
    def select_model(self):
        """select_model(self) -> ParameterCombination"""
        return _modshogun.ModelSelectionBase_select_model(self)

ModelSelectionBase_swigregister = _modshogun.ModelSelectionBase_swigregister
ModelSelectionBase_swigregister(ModelSelectionBase)

class GridSearchModelSelection(ModelSelectionBase):
    """Proxy of C++ shogun::CGridSearchModelSelection class"""
    __swig_setmethods__ = {}
    for _s in [ModelSelectionBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridSearchModelSelection, name, value)
    __swig_getmethods__ = {}
    for _s in [ModelSelectionBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridSearchModelSelection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GridSearchModelSelection
        __init__(self, model_parameters, cross_validation) -> GridSearchModelSelection
        """
        this = _modshogun.new_GridSearchModelSelection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_GridSearchModelSelection
    __del__ = lambda self : None;
GridSearchModelSelection_swigregister = _modshogun.GridSearchModelSelection_swigregister
GridSearchModelSelection_swigregister(GridSearchModelSelection)

class ParameterCombination(SGObject):
    """Proxy of C++ shogun::CParameterCombination class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterCombination, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterCombination, name)
    __repr__ = _swig_repr
    def print_tree(self, prefix_num=0):
        """
        print_tree(self, prefix_num=0)
        print_tree(self)
        """
        return _modshogun.ParameterCombination_print_tree(self, prefix_num)

    def __init__(self, *args): 
        """
        __init__(self) -> ParameterCombination
        __init__(self, param) -> ParameterCombination
        """
        this = _modshogun.new_ParameterCombination(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ParameterCombination
    __del__ = lambda self : None;
    def apply_to_modsel_parameter(self, *args):
        """apply_to_modsel_parameter(self, parameter)"""
        return _modshogun.ParameterCombination_apply_to_modsel_parameter(self, *args)

    def apply_to_machine(self, *args):
        """apply_to_machine(self, machine)"""
        return _modshogun.ParameterCombination_apply_to_machine(self, *args)

    def append_child(self, *args):
        """append_child(self, child)"""
        return _modshogun.ParameterCombination_append_child(self, *args)

    def copy_tree(self):
        """copy_tree(self) -> ParameterCombination"""
        return _modshogun.ParameterCombination_copy_tree(self)

    def leaf_sets_multiplication(*args):
        """leaf_sets_multiplication(sets, new_root) -> CDynamicObjectArray< shogun::CParameterCombination > *"""
        return _modshogun.ParameterCombination_leaf_sets_multiplication(*args)

    if _newclass:leaf_sets_multiplication = staticmethod(leaf_sets_multiplication)
    __swig_getmethods__["leaf_sets_multiplication"] = lambda x: leaf_sets_multiplication
    def has_children(self):
        """has_children(self) -> bool"""
        return _modshogun.ParameterCombination_has_children(self)

    def parameter_set_multiplication(*args):
        """parameter_set_multiplication(set_1, set_2) -> DynArray< shogun::Parameter * > *"""
        return _modshogun.ParameterCombination_parameter_set_multiplication(*args)

    if _newclass:parameter_set_multiplication = staticmethod(parameter_set_multiplication)
    __swig_getmethods__["parameter_set_multiplication"] = lambda x: parameter_set_multiplication
ParameterCombination_swigregister = _modshogun.ParameterCombination_swigregister
ParameterCombination_swigregister(ParameterCombination)

def ParameterCombination_leaf_sets_multiplication(*args):
  """ParameterCombination_leaf_sets_multiplication(sets, new_root) -> CDynamicObjectArray< shogun::CParameterCombination > *"""
  return _modshogun.ParameterCombination_leaf_sets_multiplication(*args)

def ParameterCombination_parameter_set_multiplication(*args):
  """ParameterCombination_parameter_set_multiplication(set_1, set_2) -> DynArray< shogun::Parameter * > *"""
  return _modshogun.ParameterCombination_parameter_set_multiplication(*args)

class DynamicParameterCombinationArray(SGObject):
    """Proxy of C++ shogun::CDynamicObjectArray<(shogun::CParameterCombination)> class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicParameterCombinationArray, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicParameterCombinationArray, name)
    __repr__ = _swig_repr
    def __init__(self, p_resize_granularity=128): 
        """
        __init__(self, p_resize_granularity=128) -> DynamicParameterCombinationArray
        __init__(self) -> DynamicParameterCombinationArray
        """
        this = _modshogun.new_DynamicParameterCombinationArray(p_resize_granularity)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynamicParameterCombinationArray
    __del__ = lambda self : None;
    def set_granularity(self, *args):
        """set_granularity(self, g) ->  int"""
        return _modshogun.DynamicParameterCombinationArray_set_granularity(self, *args)

    def get_num_elements(self):
        """get_num_elements(self) ->  int"""
        return _modshogun.DynamicParameterCombinationArray_get_num_elements(self)

    def get_element(self, *args):
        """get_element(self, index) -> ParameterCombination"""
        return _modshogun.DynamicParameterCombinationArray_get_element(self, *args)

    def get_element_safe(self, *args):
        """get_element_safe(self, index) -> ParameterCombination"""
        return _modshogun.DynamicParameterCombinationArray_get_element_safe(self, *args)

    def set_element(self, *args):
        """set_element(self, element, index) -> bool"""
        return _modshogun.DynamicParameterCombinationArray_set_element(self, *args)

    def insert_element(self, *args):
        """insert_element(self, element, index) -> bool"""
        return _modshogun.DynamicParameterCombinationArray_insert_element(self, *args)

    def append_element(self, *args):
        """append_element(self, element) -> bool"""
        return _modshogun.DynamicParameterCombinationArray_append_element(self, *args)

    def push_back(self, *args):
        """push_back(self, element)"""
        return _modshogun.DynamicParameterCombinationArray_push_back(self, *args)

    def pop_back(self):
        """pop_back(self)"""
        return _modshogun.DynamicParameterCombinationArray_pop_back(self)

    def back(self):
        """back(self) -> ParameterCombination"""
        return _modshogun.DynamicParameterCombinationArray_back(self)

    def find_element(self, *args):
        """find_element(self, element) ->  int"""
        return _modshogun.DynamicParameterCombinationArray_find_element(self, *args)

    def delete_element(self, *args):
        """delete_element(self, idx) -> bool"""
        return _modshogun.DynamicParameterCombinationArray_delete_element(self, *args)

    def clear_array(self):
        """clear_array(self)"""
        return _modshogun.DynamicParameterCombinationArray_clear_array(self)

    def get_array(self):
        """get_array(self) -> shogun::CParameterCombination **"""
        return _modshogun.DynamicParameterCombinationArray_get_array(self)

    def shuffle(self):
        """shuffle(self)"""
        return _modshogun.DynamicParameterCombinationArray_shuffle(self)

DynamicParameterCombinationArray_swigregister = _modshogun.DynamicParameterCombinationArray_swigregister
DynamicParameterCombinationArray_swigregister(DynamicParameterCombinationArray)

R_LINEAR = _modshogun.R_LINEAR
R_EXP = _modshogun.R_EXP
R_LOG = _modshogun.R_LOG
MSPT_NONE = _modshogun.MSPT_NONE
MSPT_FLOAT64 = _modshogun.MSPT_FLOAT64
MSPT_INT32 = _modshogun.MSPT_INT32
class ModelSelectionParameters(SGObject):
    """Proxy of C++ shogun::CModelSelectionParameters class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelSelectionParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelSelectionParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ModelSelectionParameters
        __init__(self, node_name) -> ModelSelectionParameters
        __init__(self, node_name, sgobject) -> ModelSelectionParameters
        """
        this = _modshogun.new_ModelSelectionParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_ModelSelectionParameters
    __del__ = lambda self : None;
    def append_child(self, *args):
        """append_child(self, child)"""
        return _modshogun.ModelSelectionParameters_append_child(self, *args)

    def print_tree(self, prefix_num=0):
        """
        print_tree(self, prefix_num=0)
        print_tree(self)
        """
        return _modshogun.ModelSelectionParameters_print_tree(self, prefix_num)

    def get_combinations(self):
        """get_combinations(self) -> DynamicParameterCombinationArray"""
        return _modshogun.ModelSelectionParameters_get_combinations(self)

    def build_values(self, *args):
        """
        build_values(self, min, max, type, step=1.0, type_base=2.0)
        build_values(self, min, max, type, step=1.0)
        build_values(self, min, max, type)
        build_values(self, min, max, type, step=1, type_base=2)
        build_values(self, min, max, type, step=1)
        build_values(self, min, max, type)
        """
        return _modshogun.ModelSelectionParameters_build_values(self, *args)

ModelSelectionParameters_swigregister = _modshogun.ModelSelectionParameters_swigregister
ModelSelectionParameters_swigregister(ModelSelectionParameters)

class PlifBase(SGObject):
    """Proxy of C++ shogun::CPlifBase class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlifBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlifBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _modshogun.delete_PlifBase
    __del__ = lambda self : None;
    def lookup_penalty(self, *args):
        """
        lookup_penalty(self, p_value, svm_values) -> float
        lookup_penalty(self, p_value, svm_values) -> float
        """
        return _modshogun.PlifBase_lookup_penalty(self, *args)

    def penalty_clear_derivative(self):
        """penalty_clear_derivative(self)"""
        return _modshogun.PlifBase_penalty_clear_derivative(self)

    def penalty_add_derivative(self, *args):
        """penalty_add_derivative(self, p_value, svm_values, factor)"""
        return _modshogun.PlifBase_penalty_add_derivative(self, *args)

    def get_max_value(self):
        """get_max_value(self) -> float"""
        return _modshogun.PlifBase_get_max_value(self)

    def get_min_value(self):
        """get_min_value(self) -> float"""
        return _modshogun.PlifBase_get_min_value(self)

    def get_used_svms(self, *args):
        """get_used_svms(self, num_svms, svm_ids)"""
        return _modshogun.PlifBase_get_used_svms(self, *args)

    def uses_svm_values(self):
        """uses_svm_values(self) -> bool"""
        return _modshogun.PlifBase_uses_svm_values(self)

    def get_max_id(self):
        """get_max_id(self) ->  int"""
        return _modshogun.PlifBase_get_max_id(self)

    def list_plif(self):
        """list_plif(self)"""
        return _modshogun.PlifBase_list_plif(self)

PlifBase_swigregister = _modshogun.PlifBase_swigregister
PlifBase_swigregister(PlifBase)

T_LINEAR = _modshogun.T_LINEAR
T_LOG = _modshogun.T_LOG
T_LOG_PLUS1 = _modshogun.T_LOG_PLUS1
T_LOG_PLUS3 = _modshogun.T_LOG_PLUS3
T_LINEAR_PLUS3 = _modshogun.T_LINEAR_PLUS3
class Plif(PlifBase):
    """Proxy of C++ shogun::CPlif class"""
    __swig_setmethods__ = {}
    for _s in [PlifBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plif, name, value)
    __swig_getmethods__ = {}
    for _s in [PlifBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Plif, name)
    __repr__ = _swig_repr
    def __init__(self, len=0): 
        """
        __init__(self, len=0) -> Plif
        __init__(self) -> Plif
        """
        this = _modshogun.new_Plif(len)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_Plif
    __del__ = lambda self : None;
    def init_penalty_struct_cache(self):
        """init_penalty_struct_cache(self)"""
        return _modshogun.Plif_init_penalty_struct_cache(self)

    def lookup_penalty_svm(self, *args):
        """lookup_penalty_svm(self, p_value, d_values) -> float"""
        return _modshogun.Plif_lookup_penalty_svm(self, *args)

    def lookup_penalty(self, *args):
        """
        lookup_penalty(self, p_value, svm_values) -> float
        lookup_penalty(self, p_value, svm_values) -> float
        """
        return _modshogun.Plif_lookup_penalty(self, *args)

    def lookup(self, *args):
        """lookup(self, p_value) -> float"""
        return _modshogun.Plif_lookup(self, *args)

    def penalty_add_derivative_svm(self, *args):
        """penalty_add_derivative_svm(self, p_value, svm_values, factor)"""
        return _modshogun.Plif_penalty_add_derivative_svm(self, *args)

    def get_cum_derivative(self, *args):
        """get_cum_derivative(self, p_len) -> float const *"""
        return _modshogun.Plif_get_cum_derivative(self, *args)

    def set_transform_type(self, *args):
        """set_transform_type(self, type_str) -> bool"""
        return _modshogun.Plif_set_transform_type(self, *args)

    def get_transform_type(self):
        """get_transform_type(self) -> str const *"""
        return _modshogun.Plif_get_transform_type(self)

    def set_id(self, *args):
        """set_id(self, p_id)"""
        return _modshogun.Plif_set_id(self, *args)

    def get_id(self):
        """get_id(self) ->  int"""
        return _modshogun.Plif_get_id(self)

    def set_use_svm(self, *args):
        """set_use_svm(self, p_use_svm)"""
        return _modshogun.Plif_set_use_svm(self, *args)

    def get_use_svm(self):
        """get_use_svm(self) ->  int"""
        return _modshogun.Plif_get_use_svm(self)

    def set_use_cache(self, *args):
        """set_use_cache(self, p_use_cache)"""
        return _modshogun.Plif_set_use_cache(self, *args)

    def invalidate_cache(self):
        """invalidate_cache(self)"""
        return _modshogun.Plif_invalidate_cache(self)

    def get_use_cache(self):
        """get_use_cache(self) ->  int"""
        return _modshogun.Plif_get_use_cache(self)

    def set_plif(self, *args):
        """set_plif(self, p_len, p_limits, p_penalties)"""
        return _modshogun.Plif_set_plif(self, *args)

    def set_plif_limits(self, *args):
        """set_plif_limits(self, p_limits)"""
        return _modshogun.Plif_set_plif_limits(self, *args)

    def set_plif_penalty(self, *args):
        """set_plif_penalty(self, p_penalties)"""
        return _modshogun.Plif_set_plif_penalty(self, *args)

    def set_plif_length(self, *args):
        """set_plif_length(self, p_len)"""
        return _modshogun.Plif_set_plif_length(self, *args)

    def get_plif_limits(self):
        """get_plif_limits(self) -> float *"""
        return _modshogun.Plif_get_plif_limits(self)

    def get_plif_penalties(self):
        """get_plif_penalties(self) -> float *"""
        return _modshogun.Plif_get_plif_penalties(self)

    def set_max_value(self, *args):
        """set_max_value(self, p_max_value)"""
        return _modshogun.Plif_set_max_value(self, *args)

    def set_min_value(self, *args):
        """set_min_value(self, p_min_value)"""
        return _modshogun.Plif_set_min_value(self, *args)

    def set_plif_name(self, *args):
        """set_plif_name(self, p_name)"""
        return _modshogun.Plif_set_plif_name(self, *args)

    def get_plif_name(self):
        """get_plif_name(self) -> str *"""
        return _modshogun.Plif_get_plif_name(self)

    def get_do_calc(self):
        """get_do_calc(self) -> bool"""
        return _modshogun.Plif_get_do_calc(self)

    def set_do_calc(self, *args):
        """set_do_calc(self, b)"""
        return _modshogun.Plif_set_do_calc(self, *args)

    def get_plif_len(self):
        """get_plif_len(self) ->  int"""
        return _modshogun.Plif_get_plif_len(self)

    def delete_penalty_struct(*args):
        """delete_penalty_struct(PEN, P)"""
        return _modshogun.Plif_delete_penalty_struct(*args)

    if _newclass:delete_penalty_struct = staticmethod(delete_penalty_struct)
    __swig_getmethods__["delete_penalty_struct"] = lambda x: delete_penalty_struct
Plif_swigregister = _modshogun.Plif_swigregister
Plif_swigregister(Plif)

def Plif_delete_penalty_struct(*args):
  """Plif_delete_penalty_struct(PEN, P)"""
  return _modshogun.Plif_delete_penalty_struct(*args)

class PlifArray(PlifBase):
    """Proxy of C++ shogun::CPlifArray class"""
    __swig_setmethods__ = {}
    for _s in [PlifBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlifArray, name, value)
    __swig_getmethods__ = {}
    for _s in [PlifBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlifArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PlifArray"""
        this = _modshogun.new_PlifArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PlifArray
    __del__ = lambda self : None;
    def add_plif(self, *args):
        """add_plif(self, new_plif)"""
        return _modshogun.PlifArray_add_plif(self, *args)

    def clear(self):
        """clear(self)"""
        return _modshogun.PlifArray_clear(self)

    def get_num_plifs(self):
        """get_num_plifs(self) ->  int"""
        return _modshogun.PlifArray_get_num_plifs(self)

    def lookup_penalty(self, *args):
        """
        lookup_penalty(self, p_value, svm_values) -> float
        lookup_penalty(self, p_value, svm_values) -> float
        """
        return _modshogun.PlifArray_lookup_penalty(self, *args)

PlifArray_swigregister = _modshogun.PlifArray_swigregister
PlifArray_swigregister(PlifArray)

class DynProg(SGObject):
    """Proxy of C++ shogun::CDynProg class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynProg, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynProg, name)
    __repr__ = _swig_repr
    def __init__(self, p_num_svms=8): 
        """
        __init__(self, p_num_svms=8) -> DynProg
        __init__(self) -> DynProg
        """
        this = _modshogun.new_DynProg(p_num_svms)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_DynProg
    __del__ = lambda self : None;
    def set_num_states(self, *args):
        """set_num_states(self, N)"""
        return _modshogun.DynProg_set_num_states(self, *args)

    def get_num_states(self):
        """get_num_states(self) ->  int"""
        return _modshogun.DynProg_get_num_states(self)

    def get_num_svms(self):
        """get_num_svms(self) ->  int"""
        return _modshogun.DynProg_get_num_svms(self)

    def init_content_svm_value_array(self, *args):
        """init_content_svm_value_array(self, p_num_svms)"""
        return _modshogun.DynProg_init_content_svm_value_array(self, *args)

    def init_tiling_data(self, *args):
        """init_tiling_data(self, probe_pos, intensities, num_probes)"""
        return _modshogun.DynProg_init_tiling_data(self, *args)

    def precompute_tiling_plifs(self, *args):
        """precompute_tiling_plifs(self, PEN, tiling_plif_ids, num_tiling_plifs)"""
        return _modshogun.DynProg_precompute_tiling_plifs(self, *args)

    def resize_lin_feat(self, *args):
        """resize_lin_feat(self, num_new_feat)"""
        return _modshogun.DynProg_resize_lin_feat(self, *args)

    def set_p_vector(self, *args):
        """set_p_vector(self, p)"""
        return _modshogun.DynProg_set_p_vector(self, *args)

    def set_q_vector(self, *args):
        """set_q_vector(self, q)"""
        return _modshogun.DynProg_set_q_vector(self, *args)

    def set_a_id(self, *args):
        """set_a_id(self, a)"""
        return _modshogun.DynProg_set_a_id(self, *args)

    def set_a_trans_matrix(self, *args):
        """set_a_trans_matrix(self, a_trans)"""
        return _modshogun.DynProg_set_a_trans_matrix(self, *args)

    def init_mod_words_array(self, *args):
        """init_mod_words_array(self, p_mod_words_array)"""
        return _modshogun.DynProg_init_mod_words_array(self, *args)

    def check_svm_arrays(self):
        """check_svm_arrays(self) -> bool"""
        return _modshogun.DynProg_check_svm_arrays(self)

    def set_observation_matrix(self, *args):
        """set_observation_matrix(self, seq)"""
        return _modshogun.DynProg_set_observation_matrix(self, *args)

    def get_num_positions(self):
        """get_num_positions(self) ->  int"""
        return _modshogun.DynProg_get_num_positions(self)

    def set_content_type_array(self, *args):
        """set_content_type_array(self, seg_path)"""
        return _modshogun.DynProg_set_content_type_array(self, *args)

    def set_pos(self, *args):
        """set_pos(self, pos)"""
        return _modshogun.DynProg_set_pos(self, *args)

    def set_orf_info(self, *args):
        """set_orf_info(self, orf_info)"""
        return _modshogun.DynProg_set_orf_info(self, *args)

    def set_gene_string(self, *args):
        """set_gene_string(self, genestr)"""
        return _modshogun.DynProg_set_gene_string(self, *args)

    def set_dict_weights(self, *args):
        """set_dict_weights(self, dictionary_weights)"""
        return _modshogun.DynProg_set_dict_weights(self, *args)

    def best_path_set_segment_loss(self, *args):
        """best_path_set_segment_loss(self, segment_loss)"""
        return _modshogun.DynProg_best_path_set_segment_loss(self, *args)

    def best_path_set_segment_ids_mask(self, *args):
        """best_path_set_segment_ids_mask(self, segment_ids, segment_mask, m)"""
        return _modshogun.DynProg_best_path_set_segment_ids_mask(self, *args)

    def set_sparse_features(self, *args):
        """set_sparse_features(self, seq_sparse1, seq_sparse2)"""
        return _modshogun.DynProg_set_sparse_features(self, *args)

    def set_plif_matrices(self, *args):
        """set_plif_matrices(self, pm)"""
        return _modshogun.DynProg_set_plif_matrices(self, *args)

    def get_scores(self):
        """get_scores(self) -> RealVector"""
        return _modshogun.DynProg_get_scores(self)

    def get_states(self):
        """get_states(self) -> IntMatrix"""
        return _modshogun.DynProg_get_states(self)

    def get_positions(self):
        """get_positions(self) -> IntMatrix"""
        return _modshogun.DynProg_get_positions(self)

    def compute_nbest_paths(self, *args):
        """compute_nbest_paths(self, max_num_signals, use_orf, nbest, with_loss, with_multiple_sequences)"""
        return _modshogun.DynProg_compute_nbest_paths(self, *args)

    def best_path_trans_deriv(self, *args):
        """best_path_trans_deriv(self, my_state_seq, my_pos_seq, my_seq_len, seq_array, max_num_signals)"""
        return _modshogun.DynProg_best_path_trans_deriv(self, *args)

    def set_my_state_seq(self, *args):
        """set_my_state_seq(self, my_state_seq)"""
        return _modshogun.DynProg_set_my_state_seq(self, *args)

    def set_my_pos_seq(self, *args):
        """set_my_pos_seq(self, my_pos_seq)"""
        return _modshogun.DynProg_set_my_pos_seq(self, *args)

    def get_path_scores(self, *args):
        """get_path_scores(self, my_scores, seq_len)"""
        return _modshogun.DynProg_get_path_scores(self, *args)

    def get_path_losses(self, *args):
        """get_path_losses(self, my_losses, seq_len)"""
        return _modshogun.DynProg_get_path_losses(self, *args)

    def get_N(self):
        """get_N(self) -> shogun::T_STATES"""
        return _modshogun.DynProg_get_N(self)

    def set_q(self, *args):
        """set_q(self, offset, value)"""
        return _modshogun.DynProg_set_q(self, *args)

    def set_p(self, *args):
        """set_p(self, offset, value)"""
        return _modshogun.DynProg_set_p(self, *args)

    def set_a(self, *args):
        """
        set_a(self, a)
        set_a(self, line_, column, value)
        """
        return _modshogun.DynProg_set_a(self, *args)

    def get_q(self, *args):
        """get_q(self, offset) -> float"""
        return _modshogun.DynProg_get_q(self, *args)

    def get_q_deriv(self, *args):
        """get_q_deriv(self, offset) -> float"""
        return _modshogun.DynProg_get_q_deriv(self, *args)

    def get_p(self, *args):
        """get_p(self, offset) -> float"""
        return _modshogun.DynProg_get_p(self, *args)

    def get_p_deriv(self, *args):
        """get_p_deriv(self, offset) -> float"""
        return _modshogun.DynProg_get_p_deriv(self, *args)

    def precompute_content_values(self):
        """precompute_content_values(self)"""
        return _modshogun.DynProg_precompute_content_values(self)

    def get_lin_feat(self, *args):
        """get_lin_feat(self, dim1, dim2) -> float *"""
        return _modshogun.DynProg_get_lin_feat(self, *args)

    def set_lin_feat(self, *args):
        """set_lin_feat(self, p_lin_feat, p_num_svms, p_seq_len)"""
        return _modshogun.DynProg_set_lin_feat(self, *args)

    def create_word_string(self):
        """create_word_string(self)"""
        return _modshogun.DynProg_create_word_string(self)

    def precompute_stop_codons(self):
        """precompute_stop_codons(self)"""
        return _modshogun.DynProg_precompute_stop_codons(self)

    def get_a(self, *args):
        """get_a(self, line_, column) -> float"""
        return _modshogun.DynProg_get_a(self, *args)

    def get_a_deriv(self, *args):
        """get_a_deriv(self, line_, column) -> float"""
        return _modshogun.DynProg_get_a_deriv(self, *args)

    def set_intron_list(self, *args):
        """set_intron_list(self, intron_list, num_plifs)"""
        return _modshogun.DynProg_set_intron_list(self, *args)

    def get_segment_loss_object(self):
        """get_segment_loss_object(self) -> SegmentLoss"""
        return _modshogun.DynProg_get_segment_loss_object(self)

    def long_transition_settings(self, *args):
        """long_transition_settings(self, use_long_transitions, threshold, max_len)"""
        return _modshogun.DynProg_long_transition_settings(self, *args)

DynProg_swigregister = _modshogun.DynProg_swigregister
DynProg_swigregister(DynProg)

class PlifMatrix(SGObject):
    """Proxy of C++ shogun::CPlifMatrix class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlifMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PlifMatrix, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PlifMatrix"""
        this = _modshogun.new_PlifMatrix()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_PlifMatrix
    __del__ = lambda self : None;
    def get_PEN(self):
        """get_PEN(self) -> shogun::CPlif **"""
        return _modshogun.PlifMatrix_get_PEN(self)

    def get_plif_matrix(self):
        """get_plif_matrix(self) -> shogun::CPlifBase **"""
        return _modshogun.PlifMatrix_get_plif_matrix(self)

    def get_num_states(self):
        """get_num_states(self) ->  int"""
        return _modshogun.PlifMatrix_get_num_states(self)

    def get_state_signals(self):
        """get_state_signals(self) -> shogun::CPlifBase **"""
        return _modshogun.PlifMatrix_get_state_signals(self)

    def get_num_plifs(self):
        """get_num_plifs(self) ->  int"""
        return _modshogun.PlifMatrix_get_num_plifs(self)

    def get_num_limits(self):
        """get_num_limits(self) ->  int"""
        return _modshogun.PlifMatrix_get_num_limits(self)

    def create_plifs(self, *args):
        """create_plifs(self, num_plifs, num_limits)"""
        return _modshogun.PlifMatrix_create_plifs(self, *args)

    def set_plif_ids(self, *args):
        """set_plif_ids(self, ids)"""
        return _modshogun.PlifMatrix_set_plif_ids(self, *args)

    def set_plif_min_values(self, *args):
        """set_plif_min_values(self, min_values)"""
        return _modshogun.PlifMatrix_set_plif_min_values(self, *args)

    def set_plif_max_values(self, *args):
        """set_plif_max_values(self, max_values)"""
        return _modshogun.PlifMatrix_set_plif_max_values(self, *args)

    def set_plif_use_cache(self, *args):
        """set_plif_use_cache(self, use_cache)"""
        return _modshogun.PlifMatrix_set_plif_use_cache(self, *args)

    def set_plif_use_svm(self, *args):
        """set_plif_use_svm(self, use_svm)"""
        return _modshogun.PlifMatrix_set_plif_use_svm(self, *args)

    def set_plif_limits(self, *args):
        """set_plif_limits(self, limits)"""
        return _modshogun.PlifMatrix_set_plif_limits(self, *args)

    def set_plif_penalties(self, *args):
        """set_plif_penalties(self, penalties)"""
        return _modshogun.PlifMatrix_set_plif_penalties(self, *args)

    def set_plif_names(self, *args):
        """
        set_plif_names(self, names, num_values, maxlen=0)
        set_plif_names(self, names, num_values)
        """
        return _modshogun.PlifMatrix_set_plif_names(self, *args)

    def set_plif_transform_type(self, *args):
        """
        set_plif_transform_type(self, transform_type, num_values, maxlen=0)
        set_plif_transform_type(self, transform_type, num_values)
        """
        return _modshogun.PlifMatrix_set_plif_transform_type(self, *args)

    def get_plif_id(self, *args):
        """get_plif_id(self, idx) ->  int"""
        return _modshogun.PlifMatrix_get_plif_id(self, *args)

    def compute_plif_matrix(self, *args):
        """compute_plif_matrix(self, penalties_array) -> bool"""
        return _modshogun.PlifMatrix_compute_plif_matrix(self, *args)

    def compute_signal_plifs(self, *args):
        """compute_signal_plifs(self, state_signals) -> bool"""
        return _modshogun.PlifMatrix_compute_signal_plifs(self, *args)

    def set_plif_state_signal_matrix(self, *args):
        """set_plif_state_signal_matrix(self, plif_id_matrix, m, n)"""
        return _modshogun.PlifMatrix_set_plif_state_signal_matrix(self, *args)

PlifMatrix_swigregister = _modshogun.PlifMatrix_swigregister
PlifMatrix_swigregister(PlifMatrix)

class IntronList(SGObject):
    """Proxy of C++ shogun::CIntronList class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntronList, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntronList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> IntronList"""
        this = _modshogun.new_IntronList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_IntronList
    __del__ = lambda self : None;
    def init_list(self, *args):
        """init_list(self, all_pos, len)"""
        return _modshogun.IntronList_init_list(self, *args)

    def read_introns(self, *args):
        """read_introns(self, start_pos, end_pos, quality, len)"""
        return _modshogun.IntronList_read_introns(self, *args)

    def get_intron_support(self, *args):
        """get_intron_support(self, values, from_pos, to_pos)"""
        return _modshogun.IntronList_get_intron_support(self, *args)

IntronList_swigregister = _modshogun.IntronList_swigregister
IntronList_swigregister(IntronList)

class SegmentLoss(SGObject):
    """Proxy of C++ shogun::CSegmentLoss class"""
    __swig_setmethods__ = {}
    for _s in [SGObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentLoss, name, value)
    __swig_getmethods__ = {}
    for _s in [SGObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentLoss, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SegmentLoss"""
        this = _modshogun.new_SegmentLoss()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modshogun.delete_SegmentLoss
    __del__ = lambda self : None;
    def get_segment_loss(self, *args):
        """get_segment_loss(self, from_pos, to_pos, segment_id) -> float"""
        return _modshogun.SegmentLoss_get_segment_loss(self, *args)

    def get_segment_loss_extend(self, *args):
        """get_segment_loss_extend(self, from_pos, to_pos, segment_id) -> float"""
        return _modshogun.SegmentLoss_get_segment_loss_extend(self, *args)

    def set_segment_loss(self, *args):
        """set_segment_loss(self, segment_loss, m, n)"""
        return _modshogun.SegmentLoss_set_segment_loss(self, *args)

    def set_segment_ids(self, *args):
        """set_segment_ids(self, segment_ids)"""
        return _modshogun.SegmentLoss_set_segment_ids(self, *args)

    def set_segment_mask(self, *args):
        """set_segment_mask(self, segment_mask)"""
        return _modshogun.SegmentLoss_set_segment_mask(self, *args)

    def set_num_segment_types(self, *args):
        """set_num_segment_types(self, num_segment_types)"""
        return _modshogun.SegmentLoss_set_num_segment_types(self, *args)

    def compute_loss(self, *args):
        """compute_loss(self, all_pos, len)"""
        return _modshogun.SegmentLoss_compute_loss(self, *args)

SegmentLoss_swigregister = _modshogun.SegmentLoss_swigregister
SegmentLoss_swigregister(SegmentLoss)

# This file is compatible with both classic and new-style classes.


